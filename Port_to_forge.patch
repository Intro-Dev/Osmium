Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/.gitignore	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,25 @@
+# eclipse
+bin
+*.launch
+.settings
+.metadata
+.classpath
+.project
+
+# idea
+out
+*.ipr
+*.iws
+*.iml
+.idea
+
+# gradle
+build
+.gradle
+
+# other
+eclipse
+run
+
+# Files from Forge MDK
+forge*changelog.txt
Index: CREDITS.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CREDITS.txt b/CREDITS.txt
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/CREDITS.txt	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,65 @@
+Minecraft Forge: Credits/Thank You
+
+Forge is a set of tools and modifications to the Minecraft base game code to assist 
+mod developers in creating new and exciting content. It has been in development for 
+several years now, but I would like to take this time thank a few people who have 
+helped it along it's way.
+
+First, the people who originally created the Forge projects way back in Minecraft 
+alpha. Eloraam of RedPower, and SpaceToad of Buildcraft, without their acceptiance 
+of me taking over the project, who knows what Minecraft modding would be today.
+
+Secondly, someone who has worked with me, and developed some of the core features
+that allow modding to be as functional, and as simple as it is, cpw. For developing
+FML, which stabelized the client and server modding ecosystem. As well as the base
+loading system that allows us to modify Minecraft's code as elegently as possible.
+
+Mezz, who has stepped up as the issue and pull request manager. Helping to keep me
+sane as well as guiding the community into creating better additions to Forge.
+
+Searge, Bspks, Fesh0r, ProfMobious, and all the rest over on the MCP team {of which 
+I am a part}. For creating some of the core tools needed to make Minecraft modding 
+both possible, and as stable as can be.
+  On that note, here is some specific information of the MCP data we use:
+    * Minecraft Coder Pack (MCP) *
+      Forge Mod Loader and Minecraft Forge have permission to distribute and automatically 
+      download components of MCP and distribute MCP data files. This permission is not 
+      transitive and others wishing to redistribute the Minecraft Forge source independently
+      should seek permission of MCP or remove the MCP data files and request their users 
+      to download MCP separately.
+      
+And lastly, the countless community members who have spent time submitting bug reports, 
+pull requests, and just helping out the community in general. Thank you.
+
+--LexManos
+
+=========================================================================
+
+This is Forge Mod Loader.
+
+You can find the source code at all times at https://github.com/MinecraftForge/MinecraftForge/tree/1.12.x/src/main/java/net/minecraftforge/fml
+
+This minecraft mod is a clean open source implementation of a mod loader for minecraft servers
+and minecraft clients.
+
+The code is authored by cpw.
+
+It began by partially implementing an API defined by the client side ModLoader, authored by Risugami.
+http://www.minecraftforum.net/topic/75440-
+This support has been dropped as of Minecraft release 1.7, as Risugami no longer maintains ModLoader.
+
+It also contains suggestions and hints and generous helpings of code from LexManos, author of MinecraftForge.
+http://www.minecraftforge.net/
+
+Additionally, it contains an implementation of topological sort based on that 
+published at http://keithschwarz.com/interesting/code/?dir=topological-sort
+
+It also contains code from the Maven project for performing versioned dependency
+resolution. http://maven.apache.org/
+
+It also contains a partial repackaging of the javaxdelta library from http://sourceforge.net/projects/javaxdelta/
+with credit to it's authors.
+
+Forge Mod Loader downloads components from the Minecraft Coder Pack
+(http://mcp.ocean-labs.de/index.php/Main_Page) with kind permission from the MCP team.
+
Index: LICENSE.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/LICENSE.txt	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,520 @@
+Unless noted below, Minecraft Forge, Forge Mod Loader, and all 
+parts herein are licensed under the terms of the LGPL 2.1 found
+here http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt and 
+copied below.
+
+Homepage: http://minecraftforge.net/
+          https://github.com/MinecraftForge/MinecraftForge
+          
+
+A note on authorship:
+All source artifacts are property of their original author, with
+the exclusion of the contents of the patches directory and others
+copied from it from time to time. Authorship of the contents of
+the patches directory is retained by the Minecraft Forge project.
+This is because the patches are partially machine generated
+artifacts, and are changed heavily due to the way forge works.
+Individual attribution within them is impossible.
+
+Consent:
+All contributions to Forge must consent to the release of any
+patch content to the Forge project.
+
+A note on infectivity:
+The LGPL is chosen specifically so that projects may depend on Forge
+features without being infected with its license. That is the 
+purpose of the LGPL. Mods and others using this code via ordinary
+Java mechanics for referencing libraries are specifically not bound
+by Forge's license for the Mod code.
+
+
+=== MCP Data ===
+This software includes data from the Minecraft Coder Pack (MCP), with kind permission
+from them. The license to MCP data is not transitive - distribution of this data by
+third parties requires independent licensing from the MCP team. This data is not
+redistributable without permission from the MCP team.
+
+=== Sharing ===
+I grant permission for some parts of FML to be redistributed outside the terms of the LGPL, for the benefit of
+the minecraft modding community. All contributions to these parts should be licensed under the same additional grant.
+
+-- Runtime patcher --
+License is granted to redistribute the runtime patcher code (src/main/java/net/minecraftforge/fml/common/patcher
+and subdirectories) under any alternative open source license as classified by the OSI (http://opensource.org/licenses)
+
+-- ASM transformers --
+License is granted to redistribute the ASM transformer code (src/main/java/net/minecraftforge/common/asm/ and subdirectories)
+under any alternative open source license as classified by the OSI (http://opensource.org/licenses)
+
+=========================================================================
+This software includes portions from the Apache Maven project at
+http://maven.apache.org/ specifically the ComparableVersion.java code. It is
+included based on guidelines at
+http://www.softwarefreedom.org/resources/2007/gpl-non-gpl-collaboration.html
+with notices intact. The only change is a non-functional change of package name.
+
+This software contains a partial repackaging of javaxdelta, a BSD licensed program for generating
+binary differences and applying them, sourced from the subversion at http://sourceforge.net/projects/javaxdelta/
+authored by genman, heikok, pivot.
+The only changes are to replace some Trove collection types with standard Java collections, and repackaged.
+=========================================================================
+
+
+                  GNU LESSER GENERAL PUBLIC LICENSE
+                       Version 2.1, February 1999
+
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
+ 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
+
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
+  To protect your rights, we need to make restrictions that forbid
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
+
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
+
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
+
+                  GNU LESSER GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties with
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+                            NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
Index: README.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.txt b/README.txt
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/README.txt	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,46 @@
+
+Source installation information for modders
+-------------------------------------------
+This code follows the Minecraft Forge installation methodology. It will apply
+some small patches to the vanilla MCP source code, giving you and it access 
+to some of the data and functions you need to build a successful mod.
+
+Note also that the patches are built against "un-renamed" MCP source code (aka
+SRG Names) - this means that you will not be able to read them directly against
+normal code.
+
+Setup Process:
+==============================
+
+Step 1: Open your command-line and browse to the folder where you extracted the zip file.
+
+Step 2: You're left with a choice.
+If you prefer to use Eclipse:
+1. Run the following command: `gradlew genEclipseRuns` (`./gradlew genEclipseRuns` if you are on Mac/Linux)
+2. Open Eclipse, Import > Existing Gradle Project > Select Folder 
+   or run `gradlew eclipse` to generate the project.
+
+If you prefer to use IntelliJ:
+1. Open IDEA, and import project.
+2. Select your build.gradle file and have it import.
+3. Run the following command: `gradlew genIntellijRuns` (`./gradlew genIntellijRuns` if you are on Mac/Linux)
+4. Refresh the Gradle Project in IDEA if required.
+
+If at any point you are missing libraries in your IDE, or you've run into problems you can 
+run `gradlew --refresh-dependencies` to refresh the local cache. `gradlew clean` to reset everything 
+{this does not affect your code} and then start the process again.
+
+Mapping Names:
+=============================
+By default, the MDK is configured to use the official mapping names from Mojang for methods and fields 
+in the Minecraft codebase. These names are covered by a specific license. All modders should be aware of this
+license, if you do not agree with it you can change your mapping names to other crowdsourced names in your 
+build.gradle. For the latest license text, refer to the mapping file itself, or the reference copy here:
+https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
+
+Additional Resources: 
+=========================
+Community Documentation: http://mcforge.readthedocs.io/en/latest/gettingstarted/  
+LexManos' Install Video: https://www.youtube.com/watch?v=8VEdtQLuLO0  
+Forge Forum: https://forums.minecraftforge.net/  
+Forge Discord: https://discord.gg/UvedJ9m  
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/build.gradle	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,204 @@
+buildscript {
+    repositories {
+        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
+        maven { url = 'https://maven.minecraftforge.net' }
+        maven { url = 'https://repo.spongepowered.org/maven' }
+        mavenCentral()
+    }
+    dependencies {
+        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
+        classpath('org.spongepowered:mixingradle:0.7-SNAPSHOT')
+    }
+}
+apply plugin: 'net.minecraftforge.gradle'
+// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
+apply plugin: 'eclipse'
+apply plugin: 'maven-publish'
+apply plugin: 'org.spongepowered.mixin'
+
+version = '1.2.3'
+group = 'com.intro.osmium' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
+archivesBaseName = 'osmium'
+
+// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
+java.toolchain.languageVersion = JavaLanguageVersion.of(16)
+
+compileJava {
+    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
+}
+
+println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
+minecraft {
+    // The mappings can be changed at any time and must be in the following format.
+    // Channel:   Version:
+    // snapshot   YYYYMMDD   Snapshot are built nightly.
+    // stable     #          Stables are built at the discretion of the MCP team.
+    // official   MCVersion  Official field/method names from Mojang mapping files
+    //
+    // You must be aware of the Mojang license when using the 'official' mappings.
+    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
+    //
+    // Use non-default mappings at your own risk. They may not always work.
+    // Simply re-run your setup task after changing the mappings to update your workspace.
+    mappings channel: 'official', version: '1.17.1'
+
+    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
+
+    // Default run configurations.
+    // These can be tweaked, removed, or duplicated as needed.
+
+
+    runs {
+        client {
+            workingDirectory project.file('run')
+
+            // Recommended logging data for a userdev environment
+            // The markers can be added/remove as needed separated by commas.
+            // "SCAN": For mods scan.
+            // "REGISTRIES": For firing of registry events.
+            // "REGISTRYDUMP": For getting the contents of all registries.
+            property 'forge.logging.markers', 'REGISTRIES'
+
+            // Recommended logging level for the console
+            // You can set various levels here.
+            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
+            property 'forge.logging.console.level', 'debug'
+
+            arg "-mixin.config=osmium.mixins.json"
+
+            mods {
+                osmium {
+                    source sourceSets.main
+                }
+            }
+        }
+
+        server {
+            workingDirectory project.file('run')
+
+            // Recommended logging data for a userdev environment
+            // The markers can be added/remove as needed separated by commas.
+            // "SCAN": For mods scan.
+            // "REGISTRIES": For firing of registry events.
+            // "REGISTRYDUMP": For getting the contents of all registries.
+            property 'forge.logging.markers', 'REGISTRIES'
+
+            // Recommended logging level for the console
+            // You can set various levels here.
+            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
+            property 'forge.logging.console.level', 'debug'
+
+            arg "-mixin.config=osmium.mixins.json"
+
+            mods {
+                osmium {
+                    source sourceSets.main
+                }
+            }
+        }
+
+        data {
+            workingDirectory project.file('run')
+
+            // Recommended logging data for a userdev environment
+            // The markers can be added/remove as needed separated by commas.
+            // "SCAN": For mods scan.
+            // "REGISTRIES": For firing of registry events.
+            // "REGISTRYDUMP": For getting the contents of all registries.
+            property 'forge.logging.markers', 'REGISTRIES'
+
+            // Recommended logging level for the console
+            // You can set various levels here.
+            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
+            property 'forge.logging.console.level', 'debug'
+
+            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
+            args '--mod', 'osmium', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
+
+            mods {
+                examplemod {
+                    source sourceSets.main
+                }
+            }
+        }
+    }
+}
+
+
+// Include resources generated by data generators.
+sourceSets.main.resources { srcDir 'src/generated/resources' }
+
+repositories {
+    // Put repositories for dependencies here
+    // ForgeGradle automatically adds the Forge maven and Maven Central for you
+
+    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
+    // flatDir {
+    //     dir 'libs'
+    // }
+}
+
+dependencies {
+    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
+    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
+    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
+    minecraft 'net.minecraftforge:forge:1.17.1-37.0.70'
+
+    // Real mod deobf dependency examples - these get remapped to your current mappings
+    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
+    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
+    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
+
+    // Examples using mod jars from ./libs
+    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
+
+    // For more info...
+    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
+    // http://www.gradle.org/docs/current/userguide/dependency_management.html
+    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
+    testAnnotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
+
+}
+
+mixin {
+    add sourceSets.main, "osmium.refmap.json"
+}
+
+// Example for how to get properties into the manifest for reading at runtime.
+jar {
+    manifest {
+        attributes([
+                "Specification-Title"     : "osmium",
+                "Specification-Vendor"    : "Intro",
+                "Specification-Version"   : "1", // We are version 1 of ourselves
+                "Implementation-Title"    : project.name,
+                "Implementation-Version"  : project.jar.archiveVersion,
+                "Implementation-Vendor"   : "Intro",
+                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
+                "Signing-Fingerprint": project.hasProperty('fingerprint') ? project.property('fingerprint') : 'unsigned',
+                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
+                "TweakOrder"              : 0,
+                "MixinConfigs"            : "osmium.mixins.json"
+        ])
+    }
+
+}
+
+// Example configuration to allow publishing using the maven-publish plugin
+// This is the preferred method to reobfuscate your jar file
+jar.finalizedBy('reobfJar')
+// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
+// publish.dependsOn('reobfJar')
+
+publishing {
+    publications {
+        mavenJava(MavenPublication) {
+            artifact jar
+        }
+    }
+    repositories {
+        maven {
+            url "file://${project.projectDir}/mcmodsrepo"
+        }
+    }
+}
Index: changelog.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/changelog.txt b/changelog.txt
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/changelog.txt	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,423 @@
+Build: 1.17.1-37.0.70 - Sun Sep 19 23:36:14 GMT 2021
+	sciwhiz12:
+		Move ItemStack#forgeInit call earlier to allow earlier capability queries (#8096)
+
+=========
+Build: 1.17.1-37.0.69 - Sun Sep 19 02:42:47 GMT 2021
+	sciwhiz12:
+		Remove incorrect FallingBlock patch (#8092)
+		
+		The patch accidentally replaces the minimum build height (set by the
+		dimension via e.g. datapacks) with 0, causing falling blocks placed
+		below Y level 0 to never fall.
+		
+		Fixes #8091
+
+=========
+Build: 1.17.1-37.0.68 - Sat Sep 18 21:58:41 GMT 2021
+	sciwhiz12:
+		Fix inverted hooks for PermissionsChangedEvent (#8089)
+		
+		Because IEventBus#post returns true on cancellation and the patched-in
+		hooks inverts the return of the ForgeHooks method, if the player
+		whose permission level is being changed is online and the event is not
+		cancelled, the permission change _is_ cancelled.
+		
+		The fix is inverting the patched-in hooks and the default return value
+		of the ForgeHooks method, so that the permission change is cancelled
+		only if the player is online, the event is fired, and the event is cancelled.
+		
+		Fixes #8088
+
+=========
+Build: 1.17.1-37.0.67 - Fri Sep 17 20:26:19 GMT 2021
+	oriondevelopment:
+		Add the missing patch for ItemStack for last build. (#8085)
+
+=========
+Build: 1.17.1-37.0.66 - Fri Sep 17 18:23:28 GMT 2021
+	oriondevelopment:
+		Support Lazy capabilities on itemstacks, for better ItemStack copy performance. (#7945)
+
+=========
+Build: 1.17.1-37.0.65 - Fri Sep 17 00:11:21 GMT 2021
+	gigaherz:
+		Fix EntityJoinWorldEvent not firing as expected: (#8033)
+		
+		- Fix entities loaded from disk not getting the event.
+		- Fix vehicles with passengers getting the event twice.
+
+=========
+Build: 1.17.1-37.0.64 - Thu Sep 16 23:54:41 GMT 2021
+	sciwhiz12:
+		Re-add patch to release buffer in custom payload packet (#8042)
+
+	noeppi-noeppi:
+		Propagate all arguments passed to the server start scripts to the game (#8060)
+
+=========
+Build: 1.17.1-37.0.62 - Thu Sep 16 23:37:31 GMT 2021
+	ichttt:
+		Remove old Log4j thread cache invalidation (#8068)
+
+=========
+Build: 1.17.1-37.0.61 - Wed Sep 15 19:09:18 GMT 2021
+	lexmanos:
+		Fix pick-block for items that map to multiple blocks. Closes #8080
+
+=========
+Build: 1.17.1-37.0.60 - Tue Sep 14 23:54:46 GMT 2021
+	gigaherz:
+		Update nashorn to 15.3, which fixes crashing when run on Java 17.
+		Please note that due to https://bugs.mojang.com/browse/MCL-18306, the vanilla launcher will not let you use Java 17 yet without workarounds.
+
+=========
+Build: 1.17.1-37.0.59 - Sun Sep 12 05:20:54 GMT 2021
+	sizableshrimp:
+		Add mixin full release to install list. (#8076)
+
+=========
+Build: 1.17.1-37.0.58 - Wed Sep 08 20:22:44 GMT 2021
+	sciwhiz12:
+		Add new tool action for shield blocking, replacing `IForgeItem#isShield` (#8055)
+
+=========
+Build: 1.17.1-37.0.57 - Wed Sep 08 18:36:16 GMT 2021
+	sciwhiz12:
+		Add workaround for pairs of `'` being stripped (#8050)
+		
+		Fixes #7396, where if a translated string with balanced pairs of single
+		quote characters passes through ForgeI18n, the quotes are stripped
+		because of ExtendedMessageFormat. This is most notable in languages
+		where `'` is used frequently, like Canadian French from the bug report.
+		
+		Note that unbalanced pairs cause an IllegalArgumentException in
+		ExtendedMessageFormat, which means the message is not affected.
+
+=========
+Build: 1.17.1-37.0.56 - Wed Sep 08 18:20:26 GMT 2021
+	sciwhiz12:
+		Re-add missing patch for IForgeItem#getEquipmentSlot (#8041)
+
+=========
+Build: 1.17.1-37.0.55 - Wed Sep 08 17:39:41 GMT 2021
+	mysticdrew:
+		Added PlayerPermissionChangedEvent(#8023)
+
+=========
+Build: 1.17.1-37.0.54 - Wed Sep 08 17:22:41 GMT 2021
+	davidqf555:
+		Changed Monster Requirement to Mob in RangedBowAttackGoal (#7960)
+
+=========
+Build: 1.17.1-37.0.53 - Thu Sep 02 21:24:11 GMT 2021
+	noeppi-noeppi:
+		Add shebang to run.sh in server files (#8058)
+
+=========
+Build: 1.17.1-37.0.52 - Thu Sep 02 17:45:20 GMT 2021
+	lexmanos:
+		Fix incorrect parameter being sent to AbstractContainerScreen#getSlotColor.
+
+=========
+Build: 1.17.1-37.0.51 - Wed Sep 01 14:26:47 GMT 2021
+	sciwhiz12:
+		Patch ModSorter to include forge mod in forgeAndMC list (#8043)
+
+=========
+Build: 1.17.1-37.0.50 - Tue Aug 31 15:51:55 GMT 2021
+	pupnewfster:
+		Fix GuiUtils#drawContinuousTexturedBox making assumptions about what shader is currently active, and fix buttons and header not showing on LoadingErrorScreen (#8022)
+
+=========
+Build: 1.17.1-37.0.49 - Tue Aug 31 14:57:25 GMT 2021
+	ititus:
+		Fix ScrollPanel render calls and usage (#8012)
+
+=========
+Build: 1.17.1-37.0.48 - Tue Aug 31 09:33:44 GMT 2021
+	sciwhiz12:
+		Fix all layers of ItemLayerModel being fullbright (#8039)
+		
+		Fixes #8007
+
+=========
+Build: 1.17.1-37.0.47 - Mon Aug 30 23:04:51 GMT 2021
+	cyborgmas:
+		Cleanup Tag Loading, this migrates thins to more of a vanilla style.  (#7898)
+
+=========
+Build: 1.17.1-37.0.46 - Mon Aug 30 20:42:53 GMT 2021
+	cech12:
+		Add Shears ToolActions (#7997)
+		
+		Make shear interactions extend to subclasses
+		Add Shears actions for beehive harvesting, pumpkin carving and trip wire disarming
+
+=========
+Build: 1.17.1-37.0.45 - Fri Aug 27 20:44:42 GMT 2021
+	sizableshrimp:
+		Fix broken fmlonly installer and promote it to page gen (#8029)
+		
+		Update gradle wrapper to 7.2
+
+=========
+Build: 1.17.1-37.0.44 - Mon Aug 23 17:52:30 GMT 2021
+	cyborgmas:
+		Minor resource pack related fixes (#7884)
+
+=========
+Build: 1.17.1-37.0.43 - Sun Aug 22 01:30:31 GMT 2021
+	lexmanos:
+		Fix misaligned patch causing monsters to not spawn in nether fortresses correctly.
+
+=========
+Build: 1.17.1-37.0.42 - Fri Aug 20 19:38:58 GMT 2021
+	diesieben07:
+		Add RegisterCapabilitiesEvent (#8021)
+
+=========
+Build: 1.17.1-37.0.41 - Thu Aug 19 21:31:20 GMT 2021
+	commoble:
+		Move static ITEM_TIER_ORDERING_JSON resourcelocation declaration from anonymous class into outer class to work around eclipse compiler error. (#8018)
+
+=========
+Build: 1.17.1-37.0.40 - Thu Aug 19 05:44:39 GMT 2021
+	sizableshrimp:
+		Fix entities not spawning in structures (#8020)
+		
+		This affects swamp huts, pillager outposts, ocean monuments, and nether fortresses
+
+=========
+Build: 1.17.1-37.0.39 - Wed Aug 18 20:49:43 GMT 2021
+	commoble:
+		Add support for forge's "remove" list to tag datagenerators (#7911)
+
+=========
+Build: 1.17.1-37.0.38 - Wed Aug 18 20:05:33 GMT 2021
+	sirttas:
+		Add hook to allow items to customize the attack sweep range. (#7981)
+
+=========
+Build: 1.17.1-37.0.37 - Wed Aug 18 19:46:48 GMT 2021
+	git:
+		Track the active mod within DeferredWorkQueue (#7973)
+
+=========
+Build: 1.17.1-37.0.36 - Wed Aug 18 09:16:16 GMT 2021
+	28724985+strikerrocker:
+		Allow to check spawner block entity in events (#7941)
+
+=========
+Build: 1.17.1-37.0.35 - Wed Aug 18 05:02:56 GMT 2021
+	cyborgmas:
+		Remove neutral mob patches as the bug was fixed upstream. (#8001)
+
+=========
+Build: 1.17.1-37.0.34 - Sun Aug 15 14:18:49 GMT 2021
+	malte0811:
+		Ensure that all render targets in a PostChain use the same format (#7978)
+		
+		closes #6995
+
+=========
+Build: 1.17.1-37.0.33 - Thu Aug 12 08:44:46 GMT 2021
+	sizableshrimp:
+		Fix update checker to use runtime minecraft version (#8000)
+
+=========
+Build: 1.17.1-37.0.32 - Wed Aug 11 01:53:28 GMT 2021
+	67878524+vemerion:
+		Correct incorrect arguments for render hand event (#7987)
+
+=========
+Build: 1.17.1-37.0.31 - Tue Aug 10 22:45:23 GMT 2021
+	gigaherz:
+		Redesign the tool system to rely on the new vanilla tags. (#7970)
+		
+		Changed:
+		- ToolType is replaced with ToolAction, which can selectively represent which actions are supported by an item.
+		- Added a canPerformAction method to query ToolActions.
+		- Renamed canHarvestBlock to isCorrectToolForDrops to match vanilla.
+		- Added TierSortingRegistry, which can be used to add custom tiers and supports sorting between vanilla or with other mods.
+		
+		How to use:
+		
+		For the breaking system there's 2 methods:
+		- getDestroySpeed decides if an item *can* mine the block fast. Override if you have multiple tags or your item isn't a DiggerItem.
+		- isCorrectToolForDrops decides if an item will get drops. Returning false will also slow down mining, regardless of getDestroySpeed. Override if you have type-dependant tiers or your item isn't a DiggerItem.
+		
+		For the tier system mods can just call `TierSortingRegistry.registerTier(tier, "name", List.of(lesser tiers), List.of(better tiers));` to register their tiers.
+		There's helper methods to query tiers such as TierSortingRegsitry.isCorrectTierForDrops.
+		
+		The ToolActions solve 2 problems:
+		1. distinguishing which kind of digger an item can be
+		2. querying if the item can perform specific secondary actions.
+		Any item can override `canPerformAction` to customize which actions it performs.
+
+=========
+Build: 1.17.1-37.0.30 - Tue Aug 10 20:11:07 GMT 2021
+	lexmanos:
+		Fixed reference to registryAccess in dimension fix, and marked for removal in next MC version. Closes #7961
+
+=========
+Build: 1.17.1-37.0.29 - Tue Aug 10 07:11:36 GMT 2021
+	lexmanos:
+		Bump BootStrapLauncher, and make sure Capability providers call parent revive.
+
+=========
+Build: 1.17.1-37.0.28 - Mon Aug 09 19:09:40 GMT 2021
+	sirttas:
+		Fix custom ingredients not being read correctly over the network. (#7980)
+
+=========
+Build: 1.17.1-37.0.27 - Fri Aug 06 17:18:27 GMT 2021
+	djbake101:
+		Add a OnDatapackSyncEvent, useful as a notification for modders to send extra data to the client (#7912)
+
+=========
+Build: 1.17.1-37.0.26 - Fri Aug 06 16:42:42 GMT 2021
+	choonster:
+		Add access transformer to make Features.Decorators class public (#7974)
+
+=========
+Build: 1.17.1-37.0.25 - Wed Aug 04 08:44:11 GMT 2021
+	lexmanos:
+		Fix NullPointerException in DetercorRailBlock patch.
+
+=========
+Build: 1.17.1-37.0.24 - Wed Aug 04 08:08:36 GMT 2021
+	lexmanos:
+		Add forceSystemNanoTime config option to the client.
+		Normally glfwGetTime is used, but in some cases it may have performance issues.
+
+	lexmanos:
+		Remove entity.remove(keepData) functions because Mojang changed entity removal mechanics.
+		If a modder wishes to use the capabilities from a invalid entity. They must manually call reviveCaps/invalidateCaps themselves.
+
+=========
+Build: 1.17.1-37.0.22 - Mon Aug 02 22:47:24 GMT 2021
+	hycrafthd:
+		Rename potion registry fields to match the mojang names (#7939)
+
+=========
+Build: 1.17.1-37.0.21 - Mon Aug 02 21:58:21 GMT 2021
+	bl4ckscor33:
+		Fix patch issue that removed SimpleWaterloggedBlock from BaseRailBlock (#7937)
+
+=========
+Build: 1.17.1-37.0.20 - Mon Aug 02 21:34:56 GMT 2021
+	strikerrocker:
+		Fix EntityInteractSpecific Event not being fired in server (#7936)
+
+=========
+Build: 1.17.1-37.0.19 - Sun Aug 01 23:00:34 GMT 2021
+	championash5357:
+		Add BlockEntityRenderer registering to RegisterRenderers (#7975)
+
+=========
+Build: 1.17.1-37.0.18 - Sun Aug 01 05:02:57 GMT 2021
+	daemonumbra:
+		Fix installer issue with spaces in paths. (#7972)
+
+=========
+Build: 1.17.1-37.0.17 - Sat Jul 31 00:54:01 GMT 2021
+	35673674+alcatrazescapee:
+		Remove unused config entries. (#7954)
+
+=========
+Build: 1.17.1-37.0.16 - Sat Jul 31 00:43:09 GMT 2021
+	35673674+alcatrazescapee:
+		Re-add call to Ingredient#invalidateAll() (#7953)
+
+=========
+Build: 1.17.1-37.0.15 - Fri Jul 30 02:10:51 GMT 2021
+	gigaherz:
+		Introduce RegisterShadersEvent to register shaders with the proper timing (runs every client resource reload).
+		Fix ShaderInstance to allow resourcelocations with namespaces as input.
+		Fix shader parsing to respect resource domains.
+		Fix ForgeRenderTypes to use the right shader in each situation.
+		Add custom forge shader for unlit translucent entity rendering, equivalent to the vanilla entity translucent shader.
+
+	daemonumbra:
+		Remove Generic from ProjectileImpactEvent (#7959)
+		
+		Generification of this event was half-done and has been aborted, leaving the generic parameter in place just creates confusion and crashes
+
+=========
+Build: 1.17.1-37.0.13 - Wed Jul 28 05:43:57 GMT 2021
+	sizableshrimp:
+		Fix userdev mod deps on the classpath (#7919)
+
+=========
+Build: 1.17.1-37.0.12 - Mon Jul 26 22:22:53 GMT 2021
+	ititus:
+		Fix typo in FluidBlockWrapper (#7931)
+
+=========
+Build: 1.17.1-37.0.11 - Mon Jul 26 21:24:39 GMT 2021
+	lexmanos:
+		Fix rounding related errors with small entity pathfinding. Closes #7730
+
+=========
+Build: 1.17.1-37.0.10 - Mon Jul 26 08:55:12 GMT 2021
+	eerussianguy:
+		Add modder-friendly way to edit the boat model / texture in custom boats (#7897)
+
+=========
+Build: 1.17.1-37.0.9 - Sun Jul 25 20:48:45 GMT 2021
+	commoble:
+		Fix EntityRendererEventsTest crashing dedicated server when running forge_test_server in forgedev (#7930)
+
+=========
+Build: 1.17.1-37.0.8 - Sun Jul 25 10:08:29 GMT 2021
+	gigaherz:
+		Added RegisterClientReloadListenersEvent which lets you register reload listeners with appropriate timing.
+		Added new entity rendering events.
+		- EntityRenderersEvent.RegisterLayerDefinitions: Used to register layer definitions for entity models.
+		- EntityRenderersEvent.RegisterRenderers: Used to register entity renderers.
+		- EntityRenderersEvent.AddLayers: Called during resource reload after all renderers have been constructed and it's safe to add layers.
+		Removed RenderingRegistry, which is now not necessary.
+		Removed a few unused things.
+		Fixes #7920
+
+=========
+Build: 1.17.1-37.0.7 - Sat Jul 24 18:19:07 GMT 2021
+	cyborgmas:
+		remove old direct GL call (#7907)
+
+	supermartijn642:
+		Pass the 'includeName' flag to the ItemTossEvent (#7894)
+
+=========
+Build: 1.17.1-37.0.5 - Sat Jul 24 14:42:12 GMT 2021
+	supermartijn642:
+		Expose RenderStateShard inner classes (#7895)
+		
+		In 1.17, all of the inner classes of `RenderStateShard` (`RenderStateShard.OverlayStateShard`, `RenderStateShard.WriteMaskStateShard`, etc.) have been changed to protected. These classes are needed however to create new `RenderType.CompositeRenderType`'s using `RenderType.CompositeState.CompositeStateBuilder`.
+		Since these are protected inner classes, their constructors also can't be directly be obtained using `ObfuscationReflectionHelper`.
+		
+		Currently, any mod using custom `RenderType`'s will have to either:
+		- add their own access transformer for the inner classes, or
+		- extend `RenderStateShard` to access `RenderStateShard`'s inner classes, and extend `RenderType` to access `RenderType.CompositeRenderType`
+		
+		This PR changes the visibility of `RenderStateShard`'s inner classes to public in Forge's `accesstransformer.cfg`.
+
+	cyborgmas:
+		1.17 Fix InitGuiEvent (#7906)
+
+=========
+Build: 1.17.1-37.0.3 - Sat Jul 24 14:30:37 GMT 2021
+	cyborgmas:
+		added back attribute patches (#7886)
+
+=========
+Build: 1.17.1-37.0.2 - Sat Jul 24 00:26:10 GMT 2021
+	lexmanos:
+		Bump SecureJarHandler, and fix life cycle event's deferred work being on the incorrect thread/boot classloader.
+
+=========
+Build: 1.17.1-37.0.1 - Thu Jul 22 21:52:37 GMT 2021
+	lexmanos:
+		Bump SecureJarHandler to fix package meta issue. Closes #7881
+		Fix version.json having duplicate libraries.
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/gradle.properties	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,4 @@
+# Sets default memory used for gradle commands. Can be overridden by user or command line properties.
+# This is required to provide enough memory for the Minecraft decompilation process.
+org.gradle.jvmargs=-Xmx3G
+org.gradle.daemon=false
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/gradle/wrapper/gradle-wrapper.properties	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/gradlew	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,183 @@
+#!/usr/bin/env bash
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MSYS* | MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+ARGV=("$@")
+eval set -- $DEFAULT_JVM_OPTS
+
+IFS=$'
+' read -rd '' -a JAVA_OPTS_ARR <<< "$(echo $JAVA_OPTS | xargs -n1)"
+IFS=$'
+' read -rd '' -a GRADLE_OPTS_ARR <<< "$(echo $GRADLE_OPTS | xargs -n1)"
+
+exec "$JAVACMD" "$@" "${JAVA_OPTS_ARR[@]}" "${GRADLE_OPTS_ARR[@]}" "-Dorg.gradle.appname=$APP_BASE_NAME" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "${ARGV[@]}"
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/gradlew.bat	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: src/main/java/com/intro/client/OsmiumClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/OsmiumClient.java b/src/main/java/com/intro/client/OsmiumClient.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/OsmiumClient.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,122 @@
+package com.intro.client;
+
+import com.intro.client.module.EventListenerSupplier;
+import com.intro.client.module.FullBright;
+import com.intro.client.module.Gui;
+import com.intro.client.module.ToggleSneak;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventType;
+import com.intro.client.network.ClientNetworkHandler;
+import com.intro.client.render.RenderManager;
+import com.intro.client.render.cape.CosmeticManager;
+import com.intro.client.render.drawables.PingDisplay;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.intro.common.util.Util;
+import com.mojang.blaze3d.platform.InputConstants;
+import net.minecraft.client.KeyMapping;
+import net.minecraft.client.Minecraft;
+import net.minecraftforge.fml.common.Mod;
+import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.lwjgl.glfw.GLFW;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+@Mod("osmium")
+public class OsmiumClient {
+
+    public static final String MOD_ID = "osmium";
+
+    public static final Logger LOGGER = LogManager.getLogger("OsmiumClient");
+
+    public static KeyMapping menuKey;
+
+    public static final Options options = new Options();
+
+    public static boolean runningLatestVersion = true;
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+    public OsmiumClient() {
+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::onInitializeClient);
+    }
+
+
+    public static void registerCallbacks() {
+        ToggleSneak toggleSneak = new ToggleSneak();
+        FullBright fullbright = new FullBright();
+        Gui gui = new Gui();
+        CosmeticManager cosmeticManager = new CosmeticManager();
+
+        EVENT_BUS.registerCallback(toggleSneak::onEvent, EventType.EVENT_TICK);
+        EVENT_BUS.registerCallback(fullbright::onEvent, EventType.EVENT_TICK);
+        EVENT_BUS.registerCallback(gui::onEvent, EventType.EVENT_TICK);
+        EVENT_BUS.registerCallback(cosmeticManager::handleEvents, new EventType[] { EventType.EVENT_ADD_PLAYER, EventType.EVENT_REMOVE_PLAYER } );
+        EVENT_BUS.registerCallback(PingDisplay.getInstance()::onEvent, EventType.EVENT_TICK);
+        EVENT_BUS.registerCallback(cosmeticManager::tickCapes, EventType.EVENT_TICK);
+        EVENT_BUS.registerCallback(ClientNetworkHandler::handlePacketEvent, EventType.EVENT_CUSTOM_PACKET);
+    }
+
+    public void registerKeyBindings() {
+        menuKey = new KeyMapping("keys.osmium.MenuKey", InputConstants.Type.KEYSYM, GLFW.GLFW_KEY_RIGHT_SHIFT, "keys.category.osmium.keys");
+        registerKeyBinding(menuKey);
+    }
+
+    public void registerKeyBinding(KeyMapping mapping) {
+        List<KeyMapping> mappings = new ArrayList<>(List.of(mc.options.keyMappings));
+        mappings.add(mapping);
+        mc.options.keyMappings = mappings.toArray(new KeyMapping[0]);
+    }
+
+
+    public void onInitializeClient(final FMLCommonSetupEvent event) {
+        OptionUtil.Options.init();
+        OptionUtil.load();
+        EVENT_BUS.initListenerMap();
+        registerCallbacks();
+        registerKeyBindings();
+        ClientNetworkHandler.registerPackets();
+        RenderManager.initDrawables();
+        runningLatestVersion = Util.isRunningLatestVersion();
+        System.out.println("Osmium Initialized");
+
+    }
+
+
+    public static class EVENT_BUS {
+
+        public static final HashMap<Integer, ArrayList<EventListenerSupplier>> mappedListeners = new HashMap<>();
+
+        public static void initListenerMap() {
+            for(EventType eventType : EventType.values()) {
+                mappedListeners.put(eventType.getIntVal(), new ArrayList<>());
+            }
+        }
+
+        public static void registerCallback(EventListenerSupplier supplier, EventType event) {
+            ArrayList<EventListenerSupplier> list = mappedListeners.get(event.getIntVal());
+            list.add(supplier);
+            mappedListeners.put(event.getIntVal(), list);
+        }
+
+        public static void registerCallback(EventListenerSupplier supplier, EventType[] events) {
+            for(EventType event : events) {
+                ArrayList<EventListenerSupplier> list = mappedListeners.get(event.getIntVal());
+                list.add(supplier);
+                mappedListeners.put(event.getIntVal(), list);
+            }
+        }
+
+        public static void postEvent(Event event, EventType type) {
+           for(EventListenerSupplier supplier : mappedListeners.get(type.getIntVal())) {
+               supplier.run(event);
+           }
+        }
+
+    }
+}
\ No newline at end of file
Index: src/main/java/com/intro/client/module/EventListenerSupplier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/EventListenerSupplier.java b/src/main/java/com/intro/client/module/EventListenerSupplier.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/EventListenerSupplier.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,10 @@
+package com.intro.client.module;
+
+import com.intro.client.module.event.Event;
+
+@FunctionalInterface
+public interface EventListenerSupplier {
+
+    void run(Event event);
+
+}
Index: src/main/java/com/intro/client/module/FullBright.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/FullBright.java b/src/main/java/com/intro/client/module/FullBright.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/FullBright.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,19 @@
+package com.intro.client.module;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventTick;
+import com.intro.common.config.Options;
+import net.minecraft.client.Minecraft;
+
+public class FullBright {
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public void onEvent(Event event) {
+        if(event instanceof EventTick && event.isPost()) {
+            if(OsmiumClient.options.getBooleanOption(Options.FullbrightEnabled).variable)
+                mc.options.gamma = 100d;
+        }
+    }
+}
Index: src/main/java/com/intro/client/module/Gui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/Gui.java b/src/main/java/com/intro/client/module/Gui.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/Gui.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,27 @@
+package com.intro.client.module;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventTick;
+import com.intro.client.render.screen.OsmiumCapeOptionsScreen;
+import com.intro.client.render.screen.OsmiumOptionsScreen;
+import net.minecraft.client.Minecraft;
+
+public class Gui {
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public void onEvent(Event event) {
+        if(mc.player != null) {
+            if(event instanceof EventTick && event.isPre()) {
+                if(OsmiumClient.menuKey.consumeClick()) {
+                    if(mc.screen instanceof OsmiumOptionsScreen) {
+                        mc.screen.onClose();
+                    } else {
+                        mc.setScreen(new OsmiumCapeOptionsScreen(null));
+                    }
+                }
+            }
+        }
+    }
+}
Index: src/main/java/com/intro/client/module/ToggleSneak.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/ToggleSneak.java b/src/main/java/com/intro/client/module/ToggleSneak.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/ToggleSneak.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,69 @@
+package com.intro.client.module;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventTick;
+import com.intro.client.render.color.Colors;
+import com.intro.client.render.drawables.Text;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import net.minecraft.client.Minecraft;
+
+public class ToggleSneak {
+
+    private boolean sprinting = false;
+
+    public static boolean sneaking = false;
+
+    private final Text sprintingText;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public ToggleSneak() {
+        sprintingText = new Text(5, 5, "", Colors.WHITE.getColor().getInt());
+        OsmiumClient.options.getElementPositionOption(Options.ToggleSprintPosition).elementPosition.loadToDrawable(sprintingText);
+    }
+
+    public void onEvent(Event event) {
+        if(mc.player != null) {
+            if(OsmiumClient.options.getBooleanOption(Options.ToggleSprintEnabled).variable || OsmiumClient.options.getBooleanOption(Options.ToggleSneakEnabled).variable) {
+                boolean toggleSprintEnabled = OsmiumClient.options.getBooleanOption(Options.ToggleSprintEnabled).variable;
+                boolean toggleSneakEnabled = OsmiumClient.options.getBooleanOption(Options.ToggleSneakEnabled).variable;
+                if(event instanceof EventTick && event.isPre()) {
+                    OsmiumClient.options.put(Options.ToggleSprintPosition, new ElementPositionOption(Options.ToggleSprintPosition, sprintingText.posX, sprintingText.posY));
+                    if(mc.player.zza > 0 && !mc.player.isUsingItem() && !mc.player.isShiftKeyDown() && !mc.player.horizontalCollision && this.sprinting)
+                        mc.player.setSprinting(true);
+
+                    // why is sneak called keyShift?
+                    // the world may never know
+                    if(mc.options.keyShift.consumeClick() && toggleSneakEnabled) {
+                        sneaking = !sneaking;
+                    }
+                    if(mc.options.keySprint.consumeClick() && toggleSprintEnabled) {
+                        this.sprinting = !this.sprinting;
+                    }
+
+                    if((this.sprinting && toggleSprintEnabled) && (!sneaking)) {
+                        sprintingText.visible = true;
+                        sprintingText.text = "Sprinting(Toggled)";
+                    } else if (mc.options.keySprint.isDown() && toggleSprintEnabled) {
+                        sprintingText.visible = true;
+                        sprintingText.text = "Sprinting(Key Down)";
+                    } else if(sneaking && toggleSneakEnabled) {
+                        sprintingText.visible = true;
+                        sprintingText.text = "Sneaking(Toggled)";
+                    } else if (mc.options.keyShift.isDown() && toggleSneakEnabled) {
+                        sprintingText.visible = true;
+                        sprintingText.text = "Sneaking(Key Down)";
+                    } else {
+                        sprintingText.text = "";
+                        sprintingText.visible = false;
+                    }
+                }
+            } else if(sprintingText.visible) {
+                sprintingText.text = "";
+                sprintingText.visible = false;
+            }
+        }
+    }
+}
Index: src/main/java/com/intro/client/module/event/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/Event.java b/src/main/java/com/intro/client/module/event/Event.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/Event.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,32 @@
+package com.intro.client.module.event;
+
+import com.intro.client.OsmiumClient;
+
+/**
+<p>The core of the event system, all events extend this class</p>
+ <p>When an event is posted, the {@link OsmiumClient.EVENT_BUS#postEvent(Event, EventType)} is called and passed
+ the event object and an EventType. This is then used to post to all registered callbacks for that event type.</p>
+
+ @see com.intro.client.module.EventListenerSupplier
+ @see EventType
+ @see OsmiumClient.EVENT_BUS
+ @since 1.0.0
+ @author Intro
+ */
+public class Event {
+    public Event(EventDirection direction) {
+        this.direction = direction;
+    }
+
+    public final EventDirection direction;
+
+
+    public boolean isPre() {
+        return this.direction == EventDirection.PRE;
+    }
+
+    public boolean isPost() {
+        return this.direction == EventDirection.POST;
+    }
+
+}
Index: src/main/java/com/intro/client/module/event/EventAddPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventAddPlayer.java b/src/main/java/com/intro/client/module/event/EventAddPlayer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventAddPlayer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.client.module.event;
+
+import net.minecraft.client.player.AbstractClientPlayer;
+
+public class EventAddPlayer extends Event {
+
+    public final AbstractClientPlayer entity;
+
+    public EventAddPlayer(AbstractClientPlayer entity) {
+        super(EventDirection.POST);
+        this.entity = entity;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventCustomPacket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventCustomPacket.java b/src/main/java/com/intro/client/module/event/EventCustomPacket.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventCustomPacket.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,17 @@
+package com.intro.client.module.event;
+
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+
+public class EventCustomPacket extends Event {
+
+    private final ClientboundCustomPayloadPacket payload;
+
+    public ClientboundCustomPayloadPacket getPayload() {
+        return payload;
+    }
+
+    public EventCustomPacket(EventDirection direction, ClientboundCustomPayloadPacket payload) {
+        super(direction);
+        this.payload = payload;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventDirection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventDirection.java b/src/main/java/com/intro/client/module/event/EventDirection.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventDirection.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,6 @@
+package com.intro.client.module.event;
+
+public enum EventDirection {
+    PRE,
+    POST
+}
Index: src/main/java/com/intro/client/module/event/EventDisconnect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventDisconnect.java b/src/main/java/com/intro/client/module/event/EventDisconnect.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventDisconnect.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,7 @@
+package com.intro.client.module.event;
+
+public class EventDisconnect extends Event {
+    public EventDisconnect(EventDirection direction) {
+        super(direction);
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventJoinWorld.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventJoinWorld.java b/src/main/java/com/intro/client/module/event/EventJoinWorld.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventJoinWorld.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.client.module.event;
+
+import net.minecraft.network.protocol.game.ClientboundLoginPacket;
+
+public class EventJoinWorld extends Event{
+
+    public final ClientboundLoginPacket packet;
+
+    public EventJoinWorld(ClientboundLoginPacket packet) {
+        super(EventDirection.POST);
+        this.packet = packet;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventRemovePlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventRemovePlayer.java b/src/main/java/com/intro/client/module/event/EventRemovePlayer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventRemovePlayer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.client.module.event;
+
+import net.minecraft.client.player.AbstractClientPlayer;
+
+public class EventRemovePlayer extends Event {
+
+    public final AbstractClientPlayer entity;
+
+    public EventRemovePlayer(AbstractClientPlayer entity) {
+        super(EventDirection.POST);
+        this.entity = entity;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventRender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventRender.java b/src/main/java/com/intro/client/module/event/EventRender.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventRender.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,22 @@
+package com.intro.client.module.event;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+
+public class EventRender extends Event{
+
+    public PoseStack getPoseStack() {
+        return poseStack;
+    }
+
+
+    public final float tickDelta;
+    public final long limitTime;
+    public final PoseStack poseStack;
+
+    public EventRender(EventDirection direction, float tickDelta, long limitTime, PoseStack stack) {
+        super(direction);
+        this.limitTime = limitTime;
+        this.poseStack = stack;
+        this.tickDelta = tickDelta;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventRenderPostTick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventRenderPostTick.java b/src/main/java/com/intro/client/module/event/EventRenderPostTick.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventRenderPostTick.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,8 @@
+package com.intro.client.module.event;
+
+public class EventRenderPostTick extends Event{
+
+    public EventRenderPostTick(EventDirection direction) {
+        super(direction);
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventSettingsChange.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventSettingsChange.java b/src/main/java/com/intro/client/module/event/EventSettingsChange.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventSettingsChange.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,8 @@
+package com.intro.client.module.event;
+
+public class EventSettingsChange extends Event{
+
+    public EventSettingsChange(EventDirection direction) {
+        super(direction);
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventSpawnEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventSpawnEntity.java b/src/main/java/com/intro/client/module/event/EventSpawnEntity.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventSpawnEntity.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.client.module.event;
+
+import net.minecraft.world.entity.Entity;
+
+public class EventSpawnEntity extends Event {
+
+    public final Entity entity;
+
+    public EventSpawnEntity(EventDirection direction, Entity entity) {
+        super(direction);
+        this.entity = entity;
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventStartGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventStartGame.java b/src/main/java/com/intro/client/module/event/EventStartGame.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventStartGame.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,8 @@
+package com.intro.client.module.event;
+
+public class EventStartGame extends Event{
+
+    public EventStartGame() {
+        super(EventDirection.POST);
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventTick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventTick.java b/src/main/java/com/intro/client/module/event/EventTick.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventTick.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,8 @@
+package com.intro.client.module.event;
+
+public class EventTick extends Event{
+
+    public EventTick(EventDirection eventDirection) {
+        super(eventDirection);
+    }
+}
Index: src/main/java/com/intro/client/module/event/EventType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/module/event/EventType.java b/src/main/java/com/intro/client/module/event/EventType.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/module/event/EventType.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,25 @@
+package com.intro.client.module.event;
+
+public enum EventType {
+    EVENT_ADD_PLAYER(0),
+    EVENT_JOIN_WORLD(1),
+    EVENT_REMOVE_PLAYER(2),
+    EVENT_RENDER(3),
+    EVENT_RENDER_POST_TICK(4),
+    EVENT_SETTINGS_CHANGE(5),
+    EVENT_SPAWN_ENTITY(6),
+    EVENT_START_GAME(7),
+    EVENT_TICK(8),
+    EVENT_CUSTOM_PACKET(9),
+    EVENT_DISCONNECT(10);
+
+    private final int value;
+
+    public int getIntVal() {
+        return value;
+    }
+
+    EventType(int value) {
+        this.value = value;
+    }
+}
Index: src/main/java/com/intro/client/network/ClientNetworkHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/network/ClientNetworkHandler.java b/src/main/java/com/intro/client/network/ClientNetworkHandler.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/network/ClientNetworkHandler.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,145 @@
+package com.intro.client.network;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventCustomPacket;
+import com.intro.client.module.event.EventType;
+import com.intro.client.render.cape.Cape;
+import com.intro.client.render.cape.CosmeticManager;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.OptionDeserializer;
+import com.intro.common.config.OptionSerializer;
+import com.intro.common.config.options.Option;
+import com.intro.common.network.NetworkingConstants;
+import io.netty.buffer.Unpooled;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.toasts.SystemToast;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
+import net.minecraft.resources.ResourceLocation;
+import org.apache.logging.log4j.Level;
+
+import java.io.IOException;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class ClientNetworkHandler {
+
+    public static boolean isRunningOsmiumServer = false;
+
+    private static HashMap<ResourceLocation, ArrayList<PacketListener>> listeners = new HashMap<>();
+
+    public static void registerPacketListener(ResourceLocation channel, PacketListener listener) {
+        listeners.computeIfAbsent(channel, k -> new ArrayList<>());
+        listeners.get(channel).add(listener);
+    }
+
+    public static void handlePacketEvent(Event event) {
+        EventCustomPacket customPacket = (EventCustomPacket) event;
+        listeners.get(customPacket.getPayload().getIdentifier()).forEach(listener -> listener.onPacket(Minecraft.getInstance(), customPacket.getPayload().getData()));
+    }
+
+    private static void sendToast(Minecraft client, Component title, Component description) {
+        client.getToasts().addToast(SystemToast.multiline(client, SystemToast.SystemToastIds.TUTORIAL_HINT, title, description));
+    }
+
+    private static void send(ResourceLocation channel, FriendlyByteBuf byteBuf) {
+        Minecraft.getInstance().getConnection().send(new ServerboundCustomPayloadPacket(channel, byteBuf));
+    }
+
+    private static final Gson GSON = new GsonBuilder()
+            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+            .setPrettyPrinting()
+            .excludeFieldsWithModifiers(Modifier.PRIVATE)
+            .registerTypeAdapter(Option.class, new OptionSerializer())
+            .registerTypeAdapter(Option.class, new OptionDeserializer())
+            .create();
+
+    public static void registerPackets() {
+        registerPacketListener(NetworkingConstants.SET_SETTING_PACKET_ID, (client, buf) -> {
+            OptionUtil.setNormalOptions();
+            int setCount = buf.readInt();
+            for(int i = 0; i < setCount; i++) {
+                try {
+                    String utf = buf.readUtf();
+                    Option option = GSON.fromJson(utf, Option.class);
+                    OsmiumClient.options.putOverwrittenOption(option.identifier, OsmiumClient.options.get(option.identifier));
+                    OsmiumClient.options.put(option.identifier, option);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    OsmiumClient.LOGGER.log(Level.WARN, "Received invalid option data from server!");
+                }
+            }
+        });
+
+        registerPacketListener(NetworkingConstants.RUNNING_OSMIUM_SERVER_PACKET_ID, (client, buf) -> {
+            isRunningOsmiumServer = true;
+            sendToast(Minecraft.getInstance(), new TranslatableComponent("osmium.toast.running_osmium_server"), new TranslatableComponent("osmium.toast.settings_change"));
+
+        });
+
+        OsmiumClient.EVENT_BUS.registerCallback(((event) -> {
+            if(isRunningOsmiumServer) {
+                send(NetworkingConstants.RUNNING_OSMIUM_CLIENT_PACKET_ID, create());
+                try {
+                    if(CosmeticManager.getPreLoadedPlayerCape() != null) {
+                        CosmeticManager.playerCapes.put(Minecraft.getInstance().player.getStringUUID(), CosmeticManager.getPreLoadedPlayerCape());
+                        sendCapeSetPacket(CosmeticManager.playerCapes.get(Minecraft.getInstance().player.getStringUUID()));
+                    }
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }), EventType.EVENT_JOIN_WORLD);
+
+        OsmiumClient.EVENT_BUS.registerCallback(((event) -> {
+            isRunningOsmiumServer = false;
+            for(Option option : OsmiumClient.options.getOverwrittenOptions().values()) {
+                OsmiumClient.options.put(option.identifier, option);
+            }
+            OsmiumClient.options.clearOverwrittenOptions();
+        }), EventType.EVENT_DISCONNECT);
+
+        registerPacketListener(NetworkingConstants.SET_PLAYER_CAPE_CLIENT_BOUND, (client, buf) -> {
+            try {
+                String uuid = buf.readUtf();
+                Cape playerCape = CosmeticManager.readCapeFromByteBuf(buf);
+                CosmeticManager.playerCapes.put(uuid, playerCape);
+            } catch (Exception e) {
+                e.printStackTrace();
+                sendToast(Minecraft.getInstance(), new TranslatableComponent("osmium_failed_cape_load_title"), new TranslatableComponent("osmium_failed_cape_load"));
+            }
+        });
+    }
+
+        public static void sendCapeSetPacket(Cape cape) throws IOException {
+        FriendlyByteBuf byteBuf = create();
+        byteBuf.writeUtf(cape.creator);
+        byteBuf.writeUtf(cape.registryName);
+        byteBuf.writeBoolean(cape.isAnimated);
+        byteBuf.writeInt(cape.getTexture().getFrameDelay());
+
+        byte[] imageData = cape.getTexture().image.asByteArray();
+
+        byteBuf.writeBytes(imageData);
+        send(NetworkingConstants.SET_PLAYER_CAPE_SERVER_BOUND, byteBuf);
+    }
+
+    public static FriendlyByteBuf create() {
+        return new FriendlyByteBuf(Unpooled.buffer());
+    }
+
+    @FunctionalInterface
+    private interface PacketListener {
+
+        void onPacket(Minecraft client, FriendlyByteBuf buf);
+
+    }
+
+}
Index: src/main/java/com/intro/client/render/RenderManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/RenderManager.java b/src/main/java/com/intro/client/render/RenderManager.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/RenderManager.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,60 @@
+package com.intro.client.render;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.EventDirection;
+import com.intro.client.module.event.EventRender;
+import com.intro.client.module.event.EventType;
+import com.intro.client.render.drawables.*;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+import java.util.ArrayList;
+
+public class RenderManager {
+
+    public static final ArrayList<Drawable> drawables = new ArrayList<>();
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+    public static void initDrawables() {
+         addDrawable(ArmorDisplay.getInstance());
+         addDrawable(StatusEffectDisplay.getInstance());
+         addDrawable(PingDisplay.getInstance());
+         addDrawable(CpsDisplay.getInstance());
+         addDrawable(FpsDisplay.getInstance());
+         addDrawable(Keystrokes.getInstance());
+         addDrawable(DebugDisplay.getInstance());
+    }
+
+    public static void renderHud(PoseStack stack) {
+        mc.getProfiler().push("OsmiumHudRenderer");
+        if(!mc.options.renderDebug) {
+            for(Drawable element : drawables) {
+                if(element instanceof Scalable scalable) {
+                    stack.pushPose();
+                    scalable.scaleWithPositionIntact(stack);
+                    scalable.render(stack);
+                    stack.popPose();
+                } else {
+                    element.render(stack);
+                }
+            }
+        }
+        mc.getProfiler().pop();
+    }
+
+    public static void postRenderEvents(float tickDelta, long limitTime, PoseStack stack) {
+        mc.getProfiler().push("OsmiumRenderer");
+        EventRender EventRenderPre = new EventRender(EventDirection.PRE, tickDelta, limitTime, stack);
+        OsmiumClient.EVENT_BUS.postEvent(EventRenderPre, EventType.EVENT_RENDER);
+        mc.getProfiler().pop();
+    }
+
+    public static void addDrawable(Drawable drawable) {
+        drawables.add(drawable);
+    }
+
+
+}
+
+
Index: src/main/java/com/intro/client/render/cape/Cape.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/cape/Cape.java b/src/main/java/com/intro/client/render/cape/Cape.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/cape/Cape.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,56 @@
+package com.intro.client.render.cape;
+
+import com.intro.client.render.texture.DynamicAnimation;
+import net.minecraft.resources.ResourceLocation;
+
+public class Cape implements Cloneable {
+
+    private final DynamicAnimation texture;
+    public boolean isOptifine;
+    public boolean isAnimated;
+
+    public String source;
+    public String registryName;
+
+    public String creator = "unknown";
+
+
+    public Cape(DynamicAnimation texture, boolean isOptifine, boolean isAnimated, String source, String registryName, String creator) {
+        this.registryName = registryName;
+        this.texture = texture;
+        this.isOptifine = isOptifine;
+        this.isAnimated = isAnimated;
+        this.source = source;
+        this.creator = creator;
+    }
+
+    public DynamicAnimation getTexture() {
+        return texture;
+    }
+
+    public ResourceLocation getFrameTexture() {
+        return texture.getCurrentFrameLocation();
+    }
+
+    public ResourceLocation getFirstFrameTexture() {
+        return texture.getFrameLocation(0);
+    }
+
+    public void nextFrame() {
+        texture.tick();
+    }
+
+    public void free() {
+        texture.free();
+    }
+
+
+    @Override
+    public Cape clone() {
+        try {
+            return (Cape) super.clone();
+        } catch (CloneNotSupportedException e) {
+            throw new AssertionError();
+        }
+    }
+}
Index: src/main/java/com/intro/client/render/cape/CapeRenderer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/cape/CapeRenderer.java b/src/main/java/com/intro/client/render/cape/CapeRenderer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/cape/CapeRenderer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,101 @@
+package com.intro.client.render.cape;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.CapeRenderingMode;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.math.Vector3f;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.model.PlayerModel;
+import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.renderer.entity.RenderLayerParent;
+import net.minecraft.client.renderer.entity.layers.RenderLayer;
+import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.player.PlayerModelPart;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+
+import java.util.Objects;
+
+public class CapeRenderer extends RenderLayer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>> {
+
+    public CapeRenderer(RenderLayerParent<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>> parent) {
+        super(parent);
+    }
+
+        public void render(PoseStack stack, MultiBufferSource multiBuffer, int light, AbstractClientPlayer entity, float limbAngle, float limbDistance, float tickDelta, float animationProgress, float headYaw, float headPitch) {
+        try {
+            ItemStack itemStack = entity.getItemBySlot(EquipmentSlot.CHEST);
+            if(OsmiumClient.options.getBooleanOption(Options.ShowOtherPlayersCapes).variable && !Objects.equals(entity.getStringUUID(), Minecraft.getInstance().player.getStringUUID())) {
+                return;
+            }
+
+            if(!itemStack.is(Items.ELYTRA) && !entity.isInvisible() && entity.isCapeLoaded() && entity.isModelPartShown(PlayerModelPart.CAPE) && OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.ALL || OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.OPTIFINE){
+                Minecraft.getInstance().getProfiler().push("OsmiumCapeRendering");
+                stack.pushPose();
+                stack.translate(0.0D, 0.0D, 0.125D);
+                double d = Mth.lerp(tickDelta, entity.xCloakO, entity.xCloak) - Mth.lerp(tickDelta, entity.xo, entity.getX());
+                double e = Mth.lerp(tickDelta, entity.yCloakO, entity.yCloak) - Mth.lerp(tickDelta, entity.yo, entity.getY());
+                double m = Mth.lerp(tickDelta, entity.zCloakO, entity.zCloak) - Mth.lerp(tickDelta, entity.zo, entity.getZ());
+                float n = entity.yBodyRotO + (entity.yBodyRot - entity.yBodyRotO);
+                double o = Mth.sin(n * 0.017453292F);
+                double p = -Mth.cos(n * 0.017453292F);
+                float q = (float)e * 10.0F;
+                q = Mth.clamp(q, -6.0F, 32.0F);
+                float r = (float)(d * o + m * p) * 100.0F;
+                r = Mth.clamp(r, 0.0F, 150.0F);
+                float s = (float)(d * p - m * o) * 100.0F;
+                s = Mth.clamp(s, -20.0F, 20.0F);
+                if (r < 0.0F) {
+                    r = 0.0F;
+                }
+
+                float t = Mth.lerp(tickDelta, entity.oBob, entity.bob);
+                q += Mth.sin(Mth.lerp(tickDelta, entity.walkDistO, entity.walkDist) * 6.0F) * 32.0F * t;
+                if (entity.isCrouching()) {
+                    q += 25.0F;
+                }
+
+                stack.mulPose(Vector3f.XP.rotationDegrees(6.0F + r / 2.0F + q));
+                stack.mulPose(Vector3f.ZP.rotationDegrees(s / 2.0F));
+                stack.mulPose(Vector3f.YP.rotationDegrees(180.0F - s / 2.0F));
+
+
+                if(CosmeticManager.playerCapes.get(entity.getStringUUID()) != null) {
+                    RenderSystem.enableDepthTest();
+                    RenderSystem.setShader(GameRenderer::getPositionTexShader);
+                    Cape playerCape = CosmeticManager.playerCapes.get(entity.getStringUUID());
+                    ResourceLocation capeTexture = playerCape.getFrameTexture();
+                    RenderType capeRenderType = RenderType.entitySolid(capeTexture);
+                    if (OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.OPTIFINE && playerCape.isOptifine) {
+                        final VertexConsumer vertexConsumer = multiBuffer.getBuffer(capeRenderType);
+                        // the way mojang renders capes is horrifically inefficient
+                        // and the thing is it would require a custom implementation of half the rendering engine to do it any other way
+                        this.getParentModel().renderCloak(stack, vertexConsumer, light, OverlayTexture.NO_OVERLAY);
+                    } else if(OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.ALL) {
+                        final VertexConsumer vertexConsumer = multiBuffer.getBuffer(capeRenderType);
+                        this.getParentModel().renderCloak(stack, vertexConsumer, light, OverlayTexture.NO_OVERLAY);
+                    }
+                    RenderSystem.disableDepthTest();
+                }
+
+                stack.popPose();
+                Minecraft.getInstance().getProfiler().pop();
+        }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+
+}
+
Index: src/main/java/com/intro/client/render/cape/CosmeticManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/cape/CosmeticManager.java b/src/main/java/com/intro/client/render/cape/CosmeticManager.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/cape/CosmeticManager.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,288 @@
+package com.intro.client.render.cape;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.stream.JsonReader;
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventAddPlayer;
+import com.intro.client.module.event.EventRemovePlayer;
+import com.intro.client.render.texture.DynamicAnimation;
+import com.intro.client.util.TextureUtil;
+import com.intro.common.ModConstants;
+import com.intro.common.config.Options;
+import com.intro.common.util.Util;
+import com.mojang.blaze3d.platform.NativeImage;
+import io.netty.buffer.ByteBufInputStream;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.toasts.SystemToast;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraftforge.fml.loading.FMLPaths;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.file.Files;
+import java.util.*;
+import java.util.zip.ZipFile;
+
+/**
+ * <p>This class contains all code for managing cosmetics</p>
+ * <p>Previously done by CapeHandler</p>
+ *
+ * @since 1.2.3
+ * @author Intro
+ * @see Cape
+ * @see CapeRenderer
+ */
+public class CosmeticManager {
+
+    // contains a map of all loaded capes
+    private static final HashMap<String, Cape> capes = new HashMap<>();
+
+    // map of all players capes
+    public static final HashMap<String, Cape> playerCapes = new HashMap<>();
+
+
+
+    private static Cape preLoadedPlayerCape;
+
+    public static Cape getPreLoadedPlayerCape() {
+        return preLoadedPlayerCape;
+    }
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+    private static void sendToast(Minecraft client, Component title, Component description) {
+        client.getToasts().addToast(SystemToast.multiline(client, SystemToast.SystemToastIds.PACK_LOAD_FAILURE, title, description));
+    }
+
+    public static void put(String id, Cape cape) {
+        capes.put(id, cape);
+    }
+
+    public static Cape get(String id) {
+        return capes.get(id);
+    }
+
+    public static void refresh() {
+        capes.clear();
+        genCapes();
+    }
+
+    public static Cape readCapeFromByteBuf(FriendlyByteBuf byteBuf) throws IOException {
+        String creator = byteBuf.readUtf();
+        String identifier = byteBuf.readUtf();
+
+        // check if cape is already downloaded, and if it is skip the rest of the reading
+        if(get(identifier) != null) {
+            return get(identifier);
+        }
+
+        boolean animated = byteBuf.readBoolean();
+        int frameDelay = byteBuf.readInt();
+
+        NativeImage capeImage = NativeImage.read(new ByteBufInputStream(byteBuf));
+
+        return new Cape(new DynamicAnimation(capeImage, creator + "-" + identifier, 64 ,32, frameDelay), false, animated, "Server", creator + "-" + identifier, creator);
+    }
+
+    public static void preLoadPlayerCape() {
+        preLoadedPlayerCape = capes.get(OsmiumClient.options.getStringOption(Options.SetCape).variable);
+    }
+
+    public static void genCapes() {
+        putCape(new Cape(genCapeAnimation(new ResourceLocation("osmium", "textures/cape/osmium_logo_cape.png"), "osmium_logo_cape", 1), false, true, "local", "osmium_logo_cape", "Intro"));
+
+        try {
+            File cosmeticsDir = FMLPaths.GAMEDIR.get().getParent().resolve("cosmetics").toFile();
+            if(!Files.exists(cosmeticsDir.toPath())) {
+                Files.createDirectory(cosmeticsDir.toPath());
+            }
+            for(File file : Objects.requireNonNull(cosmeticsDir.listFiles())) {
+                if(!file.isDirectory() && file.toString().endsWith(".zip")) {
+                    List<Cape> loaded = loadCapesFromZip(new ZipFile(file, ZipFile.OPEN_READ));
+                    loaded.forEach((cape) -> capes.put(cape.registryName, cape));
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            sendToast(mc, new TranslatableComponent("osmium_failed_cape_load_title"), new TranslatableComponent("osmium_failed_cape_load"));
+        }
+    }
+
+    public static void loadCapes() {
+        genCapes();
+        preLoadPlayerCape();
+    }
+
+    public static List<Cape> loadCapesFromZip(ZipFile file) throws IOException {
+        InputStream manifestFile = file.getInputStream(file.getEntry(Util.getZipFileSystemPrefix(file) + "/manifest.json"));
+
+        JsonReader reader = new JsonReader(new InputStreamReader(manifestFile));
+        JsonParser parser = new JsonParser();
+        JsonObject manifest = (JsonObject) parser.parse(reader);
+
+        List<Cape> returns = new ArrayList<>();
+
+        for(JsonElement element : manifest.get("capes").getAsJsonArray()) {
+            try {
+                JsonObject object = (JsonObject) element;
+
+                InputStream capeImage = file.getInputStream(file.getEntry(Util.getZipFileSystemPrefix(file) + object.get("path").getAsString()));
+                boolean animated = object.get("animated").getAsBoolean();
+                String creator = object.get("creator").getAsString().toLowerCase();
+                int frameDelay = object.get("frame_delay").getAsInt();
+                String identifier = object.get("identifier").getAsString().toLowerCase();
+                returns.add(new Cape(new DynamicAnimation(NativeImage.read(capeImage), creator + "-" + identifier, 64 ,32, frameDelay), false, animated, "cape pack", creator + "-" + identifier, creator));
+            } catch (Exception e) {
+                e.printStackTrace();
+                sendToast(mc, new TranslatableComponent("osmium_failed_cape_load_title"), new TranslatableComponent("osmium_failed_cape_load"));
+            }
+        }
+
+
+        return returns;
+    }
+
+    public static Cape getCape(String location) {
+        return capes.get(location);
+    }
+
+    private static void putCape(Cape cape) {
+        capes.put(cape.registryName, cape);
+    }
+
+    public static DynamicAnimation genCapeAnimation(ResourceLocation location, String registryName, int frameDelay) {
+        return new DynamicAnimation(TextureUtil.getImageAtLocation(location), registryName, 64, 32, frameDelay);
+    }
+
+    public static Collection<Cape> getAllCapes() {
+        return capes.values();
+    }
+
+    public void handleEvents(Event event) {
+        if (event instanceof EventAddPlayer) {
+            if(Objects.equals(((EventAddPlayer) event).entity.getStringUUID(), Minecraft.getInstance().player.getStringUUID())) {
+                if(CosmeticManager.getPreLoadedPlayerCape() != null) {
+                    CosmeticManager.playerCapes.put(Minecraft.getInstance().player.getStringUUID(), CosmeticManager.getPreLoadedPlayerCape());
+                }
+            }
+            Thread CapeDownloaderThread = new Thread(new StandardCapeDownloader((EventAddPlayer) event));
+            CapeDownloaderThread.start();
+        }
+        if (event instanceof EventRemovePlayer) {
+            playerCapes.remove(((EventRemovePlayer) event).entity.getStringUUID());
+        }
+    }
+
+    public void tickCapes(Event event) {
+        if(event.isPost() && OsmiumClient.options.getBooleanOption(Options.AnimateCapes).variable) {
+            for (Cape cape : playerCapes.values()) {
+                if(cape.isAnimated) {
+                    cape.nextFrame();
+                }
+            }
+        }
+    }
+
+
+    public static void setCape(String uuid, String url, boolean animated) {
+        try {
+            URL capeUrl = new URL(url);
+            HttpURLConnection connection = (HttpURLConnection) capeUrl.openConnection();
+            connection.setRequestMethod("HEAD");
+
+            if(connection.getResponseCode() == 404) {
+                return;
+            }
+
+            if(url.startsWith("http://s.optifine.net/capes/")) {
+                playerCapes.put(uuid, new Cape(new DynamicAnimation(parseOptifineCape(NativeImage.read(capeUrl.openStream())), uuid.replace("-", ""), 64, 32, 1), true, animated, "optifine", uuid.replace("-", ""), "unknown"));
+            } else {
+                playerCapes.put(uuid, new Cape(new DynamicAnimation(NativeImage.read(capeUrl.openStream()), uuid.replace("-", ""), 64, 32, 1), false, animated, url, uuid.replace("-", ""), "unknown"));
+            }
+        } catch (Exception e) {
+            OsmiumClient.LOGGER.error("Failed setting player cape!");
+            e.printStackTrace();
+        }
+    }
+
+    public static void setCapeThreaded(String uuid, String url, boolean animated) {
+        Thread customDownloader = new Thread(new CustomCapeDownloader(uuid, url, animated));
+        customDownloader.start();
+    }
+
+    /**
+     * <p>Used to parse optifine capes to a usable format</p>
+     * <p>Has to be like this because optifine uses a different cape uv format</p>
+     * <p>adapted from of-capes</p>
+     * @param image Source image
+     * @return Parsed Image
+     */
+    public static NativeImage parseOptifineCape(NativeImage image) {
+        int imageWidth = 64;
+        int imageHeight = 32;
+        int imageSrcWidth = image.getWidth();
+        int srcHeight = image.getHeight();
+
+        for (int imageSrcHeight = image.getHeight(); imageWidth < imageSrcWidth || imageHeight < imageSrcHeight; imageHeight *= 2) {
+            imageWidth *= 2;
+        }
+
+        NativeImage parsedImage = new NativeImage(imageWidth, imageHeight, true);
+
+        for (int x = 0; x < imageSrcWidth; x++) {
+            for (int y = 0; y < srcHeight; y++) {
+                parsedImage.setPixelRGBA(x, y, image.getPixelRGBA(x, y));
+            }
+        }
+
+        image.close();
+
+        return parsedImage;
+
+    }
+
+
+    public static void setCapeFromIdentifier(String uuid, String identifier) {
+        try {
+            playerCapes.put(uuid, CosmeticManager.getCape(identifier).clone());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static void setCapeFromResourceLocation(String uuid, String identifier) {
+        Thread multiThreaded = new Thread(() -> playerCapes.put(uuid, CosmeticManager.getCape(identifier).clone()));
+        multiThreaded.start();
+    }
+
+    private record StandardCapeDownloader(EventAddPlayer playerJoin) implements Runnable {
+
+        public void run() {
+            if(ModConstants.DEVELOPER_UUIDS.contains(playerJoin.entity.getStringUUID())) {
+                setCapeFromIdentifier(playerJoin.entity.getStringUUID(), "osmium_logo_cape");
+            }
+            setCape(playerJoin.entity.getStringUUID(), "http://s.optifine.net/capes/" + playerJoin.entity.getName().getString() + ".png", false);
+            if(playerCapes.get(playerJoin.entity.getStringUUID()) == null) {
+                setCape(playerJoin.entity.getStringUUID(), "https://minecraftcapes.net/profile/" + playerJoin.entity.getStringUUID().replace("-", "") + "/cape/map", false);
+            }
+        }
+    }
+
+    private record CustomCapeDownloader(String uuid, String url, boolean animated) implements Runnable {
+
+        public void run() {
+            setCape(uuid, url, animated);
+        }
+    }
+
+}
Index: src/main/java/com/intro/client/render/cape/ElytraRenderer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/cape/ElytraRenderer.java b/src/main/java/com/intro/client/render/cape/ElytraRenderer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/cape/ElytraRenderer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,75 @@
+package com.intro.client.render.cape;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.CapeRenderingMode;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import net.minecraft.client.model.ElytraModel;
+import net.minecraft.client.model.EntityModel;
+import net.minecraft.client.model.geom.EntityModelSet;
+import net.minecraft.client.model.geom.ModelLayers;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.renderer.entity.ItemRenderer;
+import net.minecraft.client.renderer.entity.RenderLayerParent;
+import net.minecraft.client.renderer.entity.layers.RenderLayer;
+import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+
+public class ElytraRenderer<T extends LivingEntity, M extends EntityModel<T>> extends RenderLayer<T, M> {
+
+
+    private final ElytraModel<T> elytra;
+    private static final ResourceLocation DEFAULT_TEXTURE = new ResourceLocation("textures/entity/elytra.png");
+
+    public ElytraRenderer(RenderLayerParent<T, M> renderLayerParent, EntityModelSet entityModelSet) {
+        super(renderLayerParent);
+        this.elytra = new ElytraModel<>(entityModelSet.bakeLayer(ModelLayers.ELYTRA));
+
+    }
+
+    @Override
+    public void render(PoseStack stack, MultiBufferSource vertexConsumers, int light, T entity, float limbAngle, float limbDistance, float tickDelta, float animationProgress, float headYaw, float headPitch) {
+        try {
+            ItemStack itemStack = entity.getItemBySlot(EquipmentSlot.CHEST);
+            if (itemStack.is(Items.ELYTRA)) {
+
+                stack.pushPose();
+                stack.translate(0.0D, 0.0D, 0.125D);
+                this.getParentModel().copyPropertiesTo(this.elytra);
+                this.elytra.setupAnim(entity, limbAngle, tickDelta, animationProgress, headYaw, headPitch);
+                if(entity.getStringUUID() != null) {
+                    if((CosmeticManager.playerCapes.get(entity.getStringUUID()) != null)) {
+                        RenderSystem.enableDepthTest();
+                        RenderSystem.setShader(GameRenderer::getPositionTexShader);
+                        Cape playerCape = CosmeticManager.playerCapes.get(entity.getStringUUID());
+                        ResourceLocation capeTexture = playerCape.getFrameTexture();
+                        if(OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.OPTIFINE && playerCape.isOptifine) {
+                            final VertexConsumer vertexConsumer = ItemRenderer.getArmorFoilBuffer(vertexConsumers, RenderType.armorCutoutNoCull(capeTexture), false, itemStack.hasFoil());
+                            this.elytra.renderToBuffer(stack, vertexConsumer, light, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F, 1.0F);
+                        } else if(OsmiumClient.options.getEnumOption(Options.CustomCapeMode).variable == CapeRenderingMode.ALL) {
+                            final VertexConsumer vertexConsumer = ItemRenderer.getArmorFoilBuffer(vertexConsumers, RenderType.armorCutoutNoCull(capeTexture), false, itemStack.hasFoil());
+                            this.elytra.renderToBuffer(stack, vertexConsumer, light, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F, 1.0F);
+                        }
+                    } else {
+                        final VertexConsumer vertexConsumer = ItemRenderer.getArmorFoilBuffer(vertexConsumers, RenderType.armorCutoutNoCull(DEFAULT_TEXTURE), false, itemStack.hasFoil());
+                        this.elytra.renderToBuffer(stack, vertexConsumer, light, OverlayTexture.NO_OVERLAY, 1.0F, 1.0F, 1.0F, 1.0F);
+                    }
+
+                }
+                stack.popPose();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+}
+
Index: src/main/java/com/intro/client/render/color/Color.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/color/Color.java b/src/main/java/com/intro/client/render/color/Color.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/color/Color.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,150 @@
+package com.intro.client.render.color;
+
+public class Color {
+
+    private int r;
+    private int g;
+    private int b;
+    private int a;
+
+    public Color(int color) {
+        this.r = toRGBAR(color);
+        this.g = toRGBAG(color);
+        this.b = toRGBAB(color);
+        this.a = toRGBAA(color);
+    }
+
+    public Color(int r, int g, int b, int a) {
+        this.r = r;
+        this.g = g;
+        this.b = b;
+        this.a = a;
+    }
+
+    public Color(byte b) {
+        this.r = toRGBAR(b);
+        this.g = toRGBAG(b);
+        this.b = toRGBAB(b);
+        this.a = toRGBAA(b);
+    }
+
+    public Color(byte r, byte g, byte b, byte a) {
+        this.r = r;
+        this.g = g;
+        this.b = b;
+        this.a = a;
+    }
+
+    public Color(float r, float g, float b, float a) {
+        Color c = fromFloatRGBA(r, g, b, a);
+        copy(c);
+    }
+
+    public int getR() {
+        return r;
+    }
+
+    public void setR(int r) {
+        this.r = r;
+    }
+
+    public int getG() {
+        return g;
+    }
+
+    public void setG(int g) {
+        this.g = g;
+    }
+
+    public int getB() {
+        return b;
+    }
+
+    public void setB(int b) {
+        this.b = b;
+    }
+
+    public int getA() {
+        return a;
+    }
+
+    public void setA(int a) {
+        this.a = a;
+    }
+
+    public static int fromRGBA(int r, int g, int b, int a) {
+        return (r << 16) + (g << 8) + (b) + (a << 24);
+    }
+
+    public static int toRGBAR(int color) {
+        return (color >> 16) & 0x000000FF;
+    }
+
+    public static int toRGBAG(int color) {
+        return (color >> 8) & 0x000000FF;
+    }
+
+    public static int toRGBAB(int color) {
+        return (color) & 0x000000FF;
+    }
+
+    public static int toRGBAA(int color) {
+        return (color >> 24) & 0x000000FF;
+    }
+
+    public static int getDefaultAlpha() {
+        return 0;
+    }
+
+    public int getInt() {
+        return fromRGBA(this.getR(), this.getG(), this.getB(), this.getA());
+    }
+
+    public float getFloatR() {
+        return (this.r / 255f);
+    }
+
+    public float getFloatG() {
+        return (this.g / 255f);
+    }
+
+    public float getFloatB() {
+        return (this.b / 255f);
+    }
+
+    public float getFloatA() {
+        return (this.a / 255f);
+    }
+
+    public static Color fromFloatRGBA(float r, float g, float b, float a) {
+        return new Color((int) ((r * 255) + 0.5), (int) ((g * 255) + 0.5), (int) ((b * 255) + 0.5), (int) ((a * 255) + 0.5));
+    }
+
+
+    public static Color fromFloatArray(float[] arr) {
+        return fromFloatRGBA(arr[0], arr[1], arr[2], arr[3]);
+    }
+
+    public String toString() {
+        return this.getR() + ", " + this.getG() + ", " + this.getB() + ", " + this.getA();
+    }
+
+    public String toStringNoAlpha() {
+        return this.getR() + ", " + this.getG() + ", " + this.getB();
+    }
+
+    public void copy(Color color) {
+        this.r = color.getR();
+        this.g = color.getG();
+        this.b = color.getB();
+        this.a = color.getA();
+    }
+
+    public void multiply(double value) {
+        this.r = (int) (r * value);
+        this.g = (int) (g * value);
+        this.b = (int) (b * value);
+        this.a = (int) (a * value);
+    }
+
+}
Index: src/main/java/com/intro/client/render/color/Colors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/color/Colors.java b/src/main/java/com/intro/client/render/color/Colors.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/color/Colors.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,27 @@
+package com.intro.client.render.color;
+
+public enum Colors {
+    RED(0xff, 0, 0, 0xff),
+    GREEN(0, 0xff, 0, 0xff),
+    BLUE(0, 0, 0xff, 0xff),
+    TRANSPARENT(0, 0, 0, 0),
+    BLACK(0, 0, 0, 0xff),
+    WHITE(0xff, 0xff, 0xff, 0xff),
+    ORANGE(0xff, 0xa5, 0, 0xff),
+    BACKGROUND_GRAY(26, 26, 26, 52),
+    DARK_GRAY(15, 15, 15, 52);
+
+    private final Color color;
+
+    Colors(Color color) {
+        this.color = color;
+    }
+
+    Colors(int r, int g, int b, int a) {
+        this.color = new Color(r, g, b, a);
+    }
+
+    public Color getColor() {
+        return this.color;
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/ArmorDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/ArmorDisplay.java b/src/main/java/com/intro/client/render/drawables/ArmorDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/ArmorDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,142 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.RenderManager;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.renderer.texture.TextureAtlas;
+import net.minecraft.client.resources.model.BakedModel;
+import net.minecraft.util.Mth;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.StreamSupport;
+
+public class ArmorDisplay extends Scalable {
+
+    public ArmorDisplay() {
+        OsmiumClient.options.getElementPositionOption(Options.ArmorDisplayPosition).elementPosition.loadToScalable(this);
+        this.width = 20;
+        this.height = 190;
+    }
+
+    private final Minecraft mc = Minecraft.getInstance();
+    private static ArmorDisplay instance;
+
+    @Override
+    public void render(PoseStack stack) {
+        if(mc.player != null && OsmiumClient.options.getBooleanOption(Options.ArmorDisplayEnabled).variable) {
+            this.visible = true;
+
+            int offY = 0;
+
+            List<ItemStack> stacks = StreamSupport.stream(mc.player.getArmorSlots().spliterator(), false).collect(Collectors.toList());
+            stacks.addAll(StreamSupport.stream(mc.player.getHandSlots().spliterator(), false).collect(Collectors.toList()));
+
+            fill(stack, this.posX - 2, this.posY, this.posX + width + 2, this.posY + height, Colors.BACKGROUND_GRAY.getColor().getInt());
+
+            for(ItemStack itemStack : stacks) {
+                if(itemStack.getMaxDamage() != 0 && itemStack.isDamageableItem()) {
+                    renderStatusBar(stack, itemStack, this.posX + 2, this.posX + width - 2, this.posY + offY + 16);
+                }
+                offY += 32;
+            }
+
+            offY = 0;
+            for(ItemStack itemStack : stacks) {
+                renderScaledItemStack(itemStack, this.posX + 2, this.posY + offY);
+                if(itemStack.isDamageableItem()) {
+                    if(itemStack.getMaxDamage() != 0) {
+                        drawCenteredString(stack, mc.font, String.valueOf(itemStack.getMaxDamage() - itemStack.getDamageValue()), (this.posX + this.width / 2), this.posY + offY + 20, Colors.WHITE.getColor().getInt());
+                    }
+                } else {
+                    if(!itemStack.is(Items.AIR))
+                        drawCenteredString(stack, mc.font, String.valueOf(itemStack.getCount()), (this.posX + this.width / 2), this.posY + offY + 20, Colors.WHITE.getColor().getInt());
+                }
+                offY += 32;
+            }
+        } else {
+            this.visible = false;
+        }
+    }
+
+    private void renderStatusBar(PoseStack stack, ItemStack itemStack, int x, int width, int y) {
+        int j = itemStack.getBarColor();
+        int barSize = itemStack.getBarWidth();
+        int color = Color.fromRGBA(j >> 16 & 255, j >> 8 & 255, j & 255, 255);
+        barSize = Mth.clamp(barSize, 0, width);
+        hLine(stack, x, x + barSize + 1, y, color);
+    }
+
+    private void renderScaledItemStack(ItemStack item, int x, int y) {
+        BakedModel model = mc.getItemRenderer().getModel(item, null, null, 0);
+        mc.getTextureManager().getTexture(TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
+        RenderSystem.setShaderTexture(0, TextureAtlas.LOCATION_BLOCKS);
+        RenderSystem.enableBlend();
+        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+        PoseStack poseStack = RenderSystem.getModelViewStack();
+        poseStack.pushPose();
+        scaleWithPositionIntact(poseStack);
+        poseStack.translate(x, y, 100.0F + this.getBlitOffset());
+        poseStack.translate(8.0D, 8.0D, 0.0D);
+        poseStack.scale(1.0F, -1.0F, 1.0F);
+        poseStack.scale(16.0F, 16.0F, 16.0F);
+        RenderSystem.applyModelViewMatrix();
+        PoseStack poseStack2 = new PoseStack();
+        MultiBufferSource.BufferSource bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();
+        boolean bl = !model.usesBlockLight();
+        if (bl) {
+            Lighting.setupForFlatItems();
+        }
+
+        mc.getItemRenderer().render(item, ItemTransforms.TransformType.GUI, false, poseStack2, bufferSource, 15728880, OverlayTexture.NO_OVERLAY, model);
+        bufferSource.endBatch();
+        RenderSystem.enableDepthTest();
+        if (bl) {
+            Lighting.setupFor3DItems();
+        }
+
+        poseStack.popPose();
+        RenderSystem.applyModelViewMatrix();
+    }
+
+
+
+
+    @Override
+    public void destroySelf() {
+        RenderManager.drawables.remove(this);
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.ArmorDisplayPosition, new ElementPositionOption(Options.ArmorDisplayPosition, newX, newY, this.scale));
+
+    }
+
+    public static ArmorDisplay getInstance() {
+        if(instance == null) {
+            instance = new ArmorDisplay();
+            return instance;
+        }
+        return instance;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.ArmorDisplayPosition, new ElementPositionOption(Options.ArmorDisplayPosition, this.posX, this.posY, newScale));
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/CpsDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/CpsDisplay.java b/src/main/java/com/intro/client/render/drawables/CpsDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/CpsDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,90 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class CpsDisplay extends Scalable {
+
+    private static CpsDisplay INSTANCE;
+
+    private int cps;
+
+    private boolean firstRun = true;
+
+    private final int color;
+
+    private final int BG_COLOR = new Color(0.1f, 0.1f, 0.1f, 0.2f).getInt();
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public void onClick() {
+        cps++;
+        new RemoveClicksTask().schedule(1000);
+    }
+
+    protected CpsDisplay(int color) {
+        OsmiumClient.options.getElementPositionOption(Options.CpsDisplayPosition).elementPosition.loadToScalable(this);
+        this.color = color;
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+        if(OsmiumClient.options.getBooleanOption(Options.CpsDisplayEnabled).variable) {
+            this.visible = true;
+            if(firstRun) {
+                this.width = 40;
+                this.height = mc.font.lineHeight * 2;
+                firstRun = false;
+            }
+            fill(stack, posX, posY, posX + width, posY + height, BG_COLOR);
+            drawCenteredString(stack, mc.font, cps + " cps", posX + (width / 2), posY + (height / 4), color);
+        } else {
+            this.visible = false;
+        }
+    }
+
+    @Override
+    public void destroySelf() {
+
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.CpsDisplayPosition, new ElementPositionOption(Options.CpsDisplayPosition, newX, newY, this.scale));
+    }
+
+    public static CpsDisplay getInstance() {
+        if(INSTANCE == null) {
+            INSTANCE = new CpsDisplay(Colors.WHITE.getColor().getInt());
+        }
+        return INSTANCE;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.CpsDisplayPosition, new ElementPositionOption(Options.CpsDisplayPosition, this.posX, this.posY, newScale));
+    }
+
+    private class RemoveClicksTask extends TimerTask {
+
+        private final Timer timer = new Timer();
+
+        public void schedule(long delay) {
+            timer.schedule(this, delay);
+        }
+
+        @Override
+        public void run() {
+            cps--;
+            timer.cancel();
+        }
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/DebugDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/DebugDisplay.java b/src/main/java/com/intro/client/render/drawables/DebugDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/DebugDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,53 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.client.render.texture.DynamicAnimation;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+public class DebugDisplay extends Scalable {
+
+    private static DebugDisplay INSTANCE;
+
+    private boolean firstRun = true;
+
+    private DynamicAnimation animation;
+
+    private final int BG_COLOR = new Color(0.1f, 0.1f, 0.1f, 0.2f).getInt();
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    protected DebugDisplay(int color) {
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+
+    }
+
+    @Override
+    public void destroySelf() {
+
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.FpsDisplayPosition, new ElementPositionOption(Options.FpsDisplayPosition, newX, newY, this.scale));
+    }
+
+    public static DebugDisplay getInstance() {
+        if(INSTANCE == null) {
+            INSTANCE = new DebugDisplay(Colors.WHITE.getColor().getInt());
+        }
+        return INSTANCE;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.FpsDisplayPosition, new ElementPositionOption(Options.FpsDisplayPosition, this.posX, this.posY, newScale));
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/Drawable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/Drawable.java b/src/main/java/com/intro/client/render/drawables/Drawable.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/Drawable.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,56 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.render.RenderManager;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.components.Widget;
+import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+
+/**
+ * <p>Generic class for gui drawables</p>
+ *
+ * @see RenderManager
+ * @see Text
+ * @author Intro
+ * @since 1.1.1
+ */
+public abstract class Drawable extends GuiComponent implements Widget, GuiEventListener, NarratableEntry {
+    
+    public int posX = 0, posY = 0;
+    public int width = 0, height = 0;
+
+    public static final int HITBOX_PADDING = 40;
+    public boolean visible = true;
+    
+    public abstract void render(PoseStack stack);
+
+    public abstract void destroySelf();
+
+    public abstract void onPositionChange(int newX, int newY, int oldX, int oldY);
+
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.render(matrices);
+    }
+
+    @Override
+    public NarrationPriority narrationPriority() {
+        return NarrationPriority.NONE;
+    }
+
+    @Override
+    public void updateNarration(NarrationElementOutput builder) {
+
+    }
+
+    public boolean isPositionWithinBounds(int x, int y) {
+        return x > this.posX - HITBOX_PADDING && x < this.posX + this.width + HITBOX_PADDING && y > this.posY - HITBOX_PADDING && y < this.posY + height + HITBOX_PADDING;
+    }
+
+
+
+
+}
Index: src/main/java/com/intro/client/render/drawables/FpsDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/FpsDisplay.java b/src/main/java/com/intro/client/render/drawables/FpsDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/FpsDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,68 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.intro.common.mixin.client.MinecraftAccessor;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+public class FpsDisplay extends Scalable {
+
+    private static FpsDisplay INSTANCE;
+
+    private boolean firstRun = true;
+
+    private final int color;
+
+    private final int BG_COLOR = new Color(0.1f, 0.1f, 0.1f, 0.2f).getInt();
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    protected FpsDisplay(int color) {
+        OsmiumClient.options.getElementPositionOption(Options.FpsDisplayPosition).elementPosition.loadToScalable(this);
+        this.color = color;
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+        if(OsmiumClient.options.getBooleanOption(Options.FpsEnabled).variable) {
+
+            this.visible = true;
+
+            if(firstRun) {
+                this.width = 60;
+                this.height = mc.font.lineHeight * 2;
+                firstRun = false;
+            }
+            fill(stack, posX, posY, posX + width, posY + height, BG_COLOR);
+            drawCenteredString(stack, mc.font, ((MinecraftAccessor) Minecraft.getInstance()).getFps() + " fps", posX + (width / 2), posY + (height / 4), color);
+        } else {
+            this.visible = false;
+        }
+    }
+
+    @Override
+    public void destroySelf() {
+
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.FpsDisplayPosition, new ElementPositionOption(Options.FpsDisplayPosition, newX, newY, this.scale));
+    }
+
+    public static FpsDisplay getInstance() {
+        if(INSTANCE == null) {
+            INSTANCE = new FpsDisplay(Colors.WHITE.getColor().getInt());
+        }
+        return INSTANCE;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.FpsDisplayPosition, new ElementPositionOption(Options.FpsDisplayPosition, this.posX, this.posY, newScale));
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/Keystrokes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/Keystrokes.java b/src/main/java/com/intro/client/render/drawables/Keystrokes.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/Keystrokes.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,131 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.client.util.*;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+public class Keystrokes extends Scalable {
+
+    private static Keystrokes INSTANCE;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private ElementPosition wKeyPos;
+    private ElementPosition aKeyPos;
+    private ElementPosition sKeyPos;
+    private ElementPosition dKeyPos;
+
+    private Vector2d wKeyTextPos;
+    private Vector2d aKeyTextPos;
+    private Vector2d sKeyTextPos;
+    private Vector2d dKeyTextPos;
+
+    private final int ELEMENT_OFFSET = 10;
+
+    private final int trueWidth, trueHeight;
+
+    private int sectionWidth;
+    private int sectionHeight;
+
+    private final RgbColorGenerator colorGenerator = new RgbColorGenerator(128);
+
+
+    protected Keystrokes() {
+        OsmiumClient.options.getElementPositionOption(Options.KeystrokesPosition).elementPosition.loadToScalable(this);
+        this.width = 212;
+        this.height = 138;
+
+        this.trueWidth = 192;
+        this.trueHeight = 128;
+
+        sectionWidth = trueWidth / 3;
+        sectionHeight = trueHeight / 2;
+        wKeyPos = new ElementPosition(this.posX + sectionWidth + ELEMENT_OFFSET, this.posY, 1);
+        aKeyPos = new ElementPosition(this.posX, this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        sKeyPos = new ElementPosition(this.posX + sectionWidth + ELEMENT_OFFSET, this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        dKeyPos = new ElementPosition(this.posX + sectionWidth * 2 + (ELEMENT_OFFSET * 2), this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        wKeyTextPos = new Vector2d(wKeyPos.x + (sectionWidth / 2f), wKeyPos.y + (sectionHeight / 4f));
+        aKeyTextPos = new Vector2d(aKeyPos.x + (sectionWidth / 2f), aKeyPos.y + (sectionHeight / 4f));
+        sKeyTextPos = new Vector2d(sKeyPos.x + (sectionWidth / 2f), sKeyPos.y + (sectionHeight / 4f));
+        dKeyTextPos = new Vector2d(dKeyPos.x + (sectionWidth / 2f), dKeyPos.y + (sectionHeight / 4f));
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+        if(OsmiumClient.options.getBooleanOption(Options.KeystrokesEnabled).variable) {
+            this.visible = true;
+
+            Color temp = OsmiumClient.options.getColorOption(Options.KeystrokesColor).color;
+            temp.setA((int) (OsmiumClient.options.getDoubleOption(Options.KeystrokesAlpha).variable * 255));
+            int BG_COLOR = temp.getInt();
+
+            int KEY_DOWN_COLOR;
+
+            if(OsmiumClient.options.getBooleanOption(Options.KeystrokesRgb).variable) {
+                colorGenerator.tick();
+                colorGenerator.setAlpha((int) (OsmiumClient.options.getDoubleOption(Options.KeystrokesAlpha).variable * 255));
+
+                int rgbColorStart = colorGenerator.getStartColor();
+                int rgbColorEnd = colorGenerator.getEndColor();
+                KEY_DOWN_COLOR = ColorUtil.getContrastColor(rgbColorStart);
+
+                fillGradient(stack, wKeyPos.x, wKeyPos.y, wKeyPos.x + sectionWidth, wKeyPos.y + sectionHeight, (mc.options.keyUp.isDown() ? KEY_DOWN_COLOR : rgbColorStart), rgbColorEnd);
+                fillGradient(stack, aKeyPos.x, aKeyPos.y, aKeyPos.x + sectionWidth, aKeyPos.y + sectionHeight, (mc.options.keyLeft.isDown() ? KEY_DOWN_COLOR : rgbColorStart), rgbColorEnd);
+                fillGradient(stack, sKeyPos.x, sKeyPos.y, sKeyPos.x + sectionWidth, sKeyPos.y + sectionHeight, (mc.options.keyDown.isDown() ? KEY_DOWN_COLOR : rgbColorStart), rgbColorEnd);
+                fillGradient(stack, dKeyPos.x, dKeyPos.y, dKeyPos.x + sectionWidth, dKeyPos.y + sectionHeight, (mc.options.keyRight.isDown() ? KEY_DOWN_COLOR : rgbColorStart), rgbColorEnd);
+            } else {
+
+                KEY_DOWN_COLOR = new Color(0.6f, 0.2f, 0.2f, 0.4f).getInt();
+                fill(stack, wKeyPos.x, wKeyPos.y, wKeyPos.x + sectionWidth, wKeyPos.y + sectionHeight, (mc.options.keyUp.isDown() ? KEY_DOWN_COLOR : BG_COLOR));
+                fill(stack, aKeyPos.x, aKeyPos.y, aKeyPos.x + sectionWidth, aKeyPos.y + sectionHeight, (mc.options.keyLeft.isDown() ? KEY_DOWN_COLOR : BG_COLOR));
+                fill(stack, sKeyPos.x, sKeyPos.y, sKeyPos.x + sectionWidth, sKeyPos.y + sectionHeight, (mc.options.keyDown.isDown() ? KEY_DOWN_COLOR : BG_COLOR));
+                fill(stack, dKeyPos.x, dKeyPos.y, dKeyPos.x + sectionWidth, dKeyPos.y + sectionHeight, (mc.options.keyRight.isDown() ? KEY_DOWN_COLOR : BG_COLOR));
+            }
+
+            RenderUtil.renderCenteredScaledText(stack, mc.font, mc.options.keyUp.getTranslatedKeyMessage().getString().toUpperCase(), ((int) wKeyTextPos.getX()), ((int) wKeyTextPos.getY()), Colors.WHITE.getColor().getInt(), 3f);
+            RenderUtil.renderCenteredScaledText(stack, mc.font, mc.options.keyLeft.getTranslatedKeyMessage().getString().toUpperCase(), ((int) aKeyTextPos.getX()), ((int) aKeyTextPos.getY()), Colors.WHITE.getColor().getInt(), 3f);
+            RenderUtil.renderCenteredScaledText(stack, mc.font, mc.options.keyDown.getTranslatedKeyMessage().getString().toUpperCase(), ((int) sKeyTextPos.getX()), ((int) sKeyTextPos.getY()), Colors.WHITE.getColor().getInt(), 3f);
+            RenderUtil.renderCenteredScaledText(stack, mc.font, mc.options.keyRight.getTranslatedKeyMessage().getString().toUpperCase(), ((int) dKeyTextPos.getX()), ((int) dKeyTextPos.getY()), Colors.WHITE.getColor().getInt(), 3f);
+        } else {
+            this.visible = false;
+        }
+    }
+
+    @Override
+    public void destroySelf() {
+
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        sectionWidth = trueWidth / 3;
+        sectionHeight = trueHeight / 2;
+        wKeyPos = new ElementPosition(this.posX + sectionWidth + ELEMENT_OFFSET, this.posY, 1);
+        aKeyPos = new ElementPosition(this.posX, this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        sKeyPos = new ElementPosition(this.posX + sectionWidth + ELEMENT_OFFSET, this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        dKeyPos = new ElementPosition(this.posX + sectionWidth * 2 + (ELEMENT_OFFSET * 2), this.posY + sectionHeight + ELEMENT_OFFSET, 1);
+        wKeyTextPos = new Vector2d(wKeyPos.x + (sectionWidth / 2f), wKeyPos.y + (sectionHeight / 4f));
+        aKeyTextPos = new Vector2d(aKeyPos.x + (sectionWidth / 2f), aKeyPos.y + (sectionHeight / 4f));
+        sKeyTextPos = new Vector2d(sKeyPos.x + (sectionWidth / 2f), sKeyPos.y + (sectionHeight / 4f));
+        dKeyTextPos = new Vector2d(dKeyPos.x + (sectionWidth / 2f), dKeyPos.y + (sectionHeight / 4f));
+
+        OsmiumClient.options.put(Options.KeystrokesPosition, new ElementPositionOption(Options.KeystrokesPosition, newX, newY, this.scale));
+    }
+
+    public static Keystrokes getInstance() {
+        if(INSTANCE == null) {
+            INSTANCE = new Keystrokes();
+        }
+        return INSTANCE;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.KeystrokesPosition, new ElementPositionOption(Options.KeystrokesPosition, this.posX, this.posY, newScale));
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/PingDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/PingDisplay.java b/src/main/java/com/intro/client/render/drawables/PingDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/PingDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,80 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.Event;
+import com.intro.client.module.event.EventTick;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+
+public class PingDisplay extends Scalable {
+
+    private static PingDisplay INSTANCE;
+
+    private int currentPing;
+
+    private boolean firstRun = true;
+
+    private final int color;
+
+    private final int BG_COLOR = new Color(0.1f, 0.1f, 0.1f, 0.2f).getInt();
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public void onEvent(Event event) {
+        if(event instanceof EventTick && mc.player != null) {
+            if((mc.getCurrentServer() != null)) {
+                currentPing = (int) mc.getCurrentServer().ping;
+            } else {
+                currentPing = 0;
+            }
+        }
+    }
+
+    protected PingDisplay(int color) {
+        OsmiumClient.options.getElementPositionOption(Options.PingDisplayPosition).elementPosition.loadToScalable(this);
+        this.color = color;
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+        if(OsmiumClient.options.getBooleanOption(Options.PingDisplayEnabled).variable) {
+            this.visible = true;
+            if(firstRun) {
+                this.width = 40;
+                this.height = mc.font.lineHeight * 2;
+                firstRun = false;
+            }
+            fill(stack, posX, posY, posX + width, posY + height, BG_COLOR);
+            drawCenteredString(stack, mc.font, currentPing + " ms", posX + (width / 2), posY + (height / 4), color);
+        } else {
+            this.visible = false;
+        }
+    }
+
+    @Override
+    public void destroySelf() {
+
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.PingDisplayPosition, new ElementPositionOption(Options.PingDisplayPosition, newX, newY, this.scale));
+
+    }
+
+    public static PingDisplay getInstance() {
+        if(INSTANCE == null) {
+            INSTANCE = new PingDisplay(Colors.WHITE.getColor().getInt());
+        }
+        return INSTANCE;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.PingDisplayPosition, new ElementPositionOption(Options.PingDisplayPosition, this.posX, this.posY, newScale));
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/Scalable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/Scalable.java b/src/main/java/com/intro/client/render/drawables/Scalable.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/Scalable.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,69 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.util.RenderUtil;
+import com.mojang.blaze3d.vertex.PoseStack;
+
+/**
+ * Indicates a drawable can be scaled
+ */
+public abstract class Scalable extends Drawable {
+
+    public double scale = 1f;
+
+    public int getScaledWidth() {
+        return (int) (this.width * scale);
+    }
+
+    public int getScaledHeight() {
+        return (int) (this.height * scale);
+    }
+
+    /**
+     * <p>Gets the scale accounted x value</p>
+     * <p>Only to be used to gui editing</p>
+     */
+    // position accurate scaling
+    // very fun
+    // this algorithm was not fun to make
+    // probably online somewhere, but I can't find it, so I had to make it myself
+    // x: scaledX, y: x, z: scaledHeight, a: scale
+    // x = y + (z / (2 * a)) - z / 2;
+    public int getScaledX() {
+        return (int) (posX + (this.getScaledWidth() / (2 * scale)) - this.getScaledWidth() / 2);
+    }
+
+    /**
+     * <p>Gets the scale accounted y value</p>
+     * <p>Only to be used to gui editing</p>
+     */
+    public int getScaledY() {
+        return (int) (posY + (this.getScaledHeight() / (2 * scale)) - this.getScaledHeight() / 2);
+    }
+
+    // x: scaledX, y: x, z: scaledWidth, a: scale
+    // -y = -x + (z / (2 * a)) - z / 2;
+    // y = x + -(z / (2 * a)) + (z / 2)
+
+    public void setScaledX(int x) {
+        this.posX = (int) -((-x + this.getScaledWidth() / (2 * scale)) - this.getScaledWidth() / 2);
+    }
+
+    public void setScaledY(int y) {
+        this.posY = (int) -((-y + this.getScaledHeight() / (2 * scale)) - this.getScaledHeight() / 2);
+    }
+
+
+
+    public abstract void onScaleChange(double oldScale, double newScale);
+
+    // transformation matrices are fun
+    // right?
+    public void scaleWithPositionIntact(PoseStack stack) {
+        RenderUtil.positionAccurateScale(stack, (float) scale, posX, posY, width, height);
+    }
+
+    @Override
+    public boolean isPositionWithinBounds(int x, int y) {
+        return x > this.getScaledX() - HITBOX_PADDING && x < this.getScaledX() + this.getScaledWidth() + HITBOX_PADDING && y > this.getScaledY() - HITBOX_PADDING && y < this.getScaledY() + getScaledHeight() + HITBOX_PADDING;
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/StatusEffectDisplay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/StatusEffectDisplay.java b/src/main/java/com/intro/client/render/drawables/StatusEffectDisplay.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/StatusEffectDisplay.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,119 @@
+package com.intro.client.render.drawables;
+
+import com.google.common.collect.Ordering;
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.RenderManager;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ElementPositionOption;
+import com.intro.common.config.options.StatusEffectDisplayMode;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.client.resources.MobEffectTextureManager;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.world.effect.MobEffectInstance;
+
+import java.util.List;
+
+public class StatusEffectDisplay extends Scalable {
+
+    public StatusEffectDisplay() {
+        OsmiumClient.options.getElementPositionOption(Options.StatusEffectDisplayPosition).elementPosition.loadToScalable(this);
+        this.maxEffectsDisplayed = (int) OsmiumClient.options.getDoubleOption(Options.MaxStatusEffectsDisplayed).variable;
+    }
+
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private static StatusEffectDisplay instance;
+
+    public int maxEffectsDisplayed;
+
+    @Override
+    public void render(PoseStack stack) {
+        if(mc.player != null && (OsmiumClient.options.getEnumOption(Options.StatusEffectDisplayMode).variable == StatusEffectDisplayMode.CUSTOM || OsmiumClient.options.getEnumOption(Options.StatusEffectDisplayMode).variable == StatusEffectDisplayMode.BOTH)) {
+            this.visible = true;
+
+            MobEffectTextureManager spriteManager = mc.getMobEffectTextures();
+            stack.pushPose();
+            {
+                int offY = 0;
+                List<MobEffectInstance> effects = mc.player.getActiveEffects().stream().toList();
+                effects = Ordering.natural().reverse().sortedCopy(effects);
+
+                this.width = 32;
+                this.height = (effects.size() * 56) + (40);
+                this.maxEffectsDisplayed = (int) OsmiumClient.options.getDoubleOption(Options.MaxStatusEffectsDisplayed).variable;
+
+                if(effects.size() != 0) {
+                    for(int i = 0; i < effects.size() && i < maxEffectsDisplayed; i++) {
+
+                        MobEffectInstance effect = effects.get(i);
+                        TextureAtlasSprite sprite = spriteManager.get(effect.getEffect());
+
+                        int duration = effect.getDuration() / 20;
+                        int mins = duration / 60;
+                        int seconds = duration % 60;
+
+                        String formattedSeconds;
+                        if(seconds < 10) {
+                            formattedSeconds = "0" + seconds;
+                        } else {
+                            formattedSeconds = String.valueOf(seconds);
+                        }
+
+                        String formattedTime;
+                        if (effect.isNoCounter()) {
+                            formattedTime = "∞";
+                        } else {
+                            formattedTime = mins + ":" + formattedSeconds;
+                        }
+
+                        String messageText = new TranslatableComponent(effect.getEffect().getDescriptionId()).getString() + (" " + (effect.getAmplifier() + 1) + ", " + formattedTime);
+
+                        stack.pushPose();
+                        {
+                            RenderSystem.setShaderTexture(0, sprite.atlas().getId());
+                            blit(stack, this.posX, this.posY + offY,this.getBlitOffset(), 32,32, sprite);
+                            drawCenteredString(stack, mc.font, messageText, this.posX + width / 2, this.posY + offY + 40, Colors.WHITE.getColor().getInt());
+                        }
+                        stack.popPose();
+
+                        offY += 56;
+                    }
+                }
+            }
+            stack.popPose();
+        } else {
+            this.visible = false;
+        }
+
+    }
+
+    @Override
+    public void destroySelf() {
+        RenderManager.drawables.remove(this);
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+        OsmiumClient.options.put(Options.StatusEffectDisplayPosition, new ElementPositionOption(Options.StatusEffectDisplayPosition, newX, newY, this.scale));
+
+    }
+
+    public static StatusEffectDisplay getInstance() {
+        if(instance == null) {
+            instance = new StatusEffectDisplay();
+            return instance;
+        }
+        return instance;
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+        OsmiumClient.options.put(Options.StatusEffectDisplayPosition, new ElementPositionOption(Options.StatusEffectDisplayPosition, this.posX, this.posY, newScale));
+
+    }
+}
Index: src/main/java/com/intro/client/render/drawables/Text.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/drawables/Text.java b/src/main/java/com/intro/client/render/drawables/Text.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/drawables/Text.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,53 @@
+package com.intro.client.render.drawables;
+
+import com.intro.client.render.RenderManager;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Font;
+import net.minecraft.network.chat.TextComponent;
+
+public class Text extends Scalable {
+    public String text;
+    public int color;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public Text(int posX, int posY, String text, int color) {
+        this.posX = posX;
+        this.posY = posY;
+        this.text = text;
+        this.color = color;
+        RenderManager.drawables.add(this);
+    }
+
+    public int getColor() {
+        return color;
+    }
+
+    public void setColor(int color) {
+        this.color = color;
+    }
+
+    public void destroySelf() {
+        RenderManager.drawables.remove(this);
+    }
+
+    @Override
+    public void onPositionChange(int newX, int newY, int oldX, int oldY) {
+
+    }
+
+    @Override
+    public void render(PoseStack stack) {
+        this.width = mc.font.width(this.text);
+        this.height = mc.font.lineHeight;
+
+        Font renderer = mc.font;
+        renderer.drawShadow(stack, new TextComponent(this.text), this.posX, this.posY, this.color);
+    }
+
+    @Override
+    public void onScaleChange(double oldScale, double newScale) {
+
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumBlockOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumBlockOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumBlockOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumBlockOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,62 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.widget.ColorOptionWidget;
+import com.intro.client.render.widget.DoubleSliderWidget;
+import com.intro.client.render.widget.EnumSelectWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+
+public class OsmiumBlockOptionsScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public OsmiumBlockOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.block_option_settings"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+        Button backButton;
+        ColorOptionWidget colorSelectWidget;
+        if(mc.options.guiScale > 4) {
+            backButton = new Button(this.width / 2 - 175, this.height / 4 + 120, 150, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+            colorSelectWidget = new ColorOptionWidget(this.width / 2 + 25, this.height / 4, 128, 128, Options.BlockOutlineColor);
+        } else {
+            backButton = new Button(this.width / 2 - 100, this.height / 4 + 225, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+            colorSelectWidget = new ColorOptionWidget(this.width / 2 + 25, this.height / 4 - 60, 256, 256, Options.BlockOutlineColor);
+
+        }
+
+
+        EnumSelectWidget toggleOverlayButton = new EnumSelectWidget(this.width / 2 - 175, this.height / 4 + 40, 150, 20, Options.BlockOutlineMode, "osmium.options.overlay_");
+
+        DoubleSliderWidget alphaSelectWidget = new DoubleSliderWidget(mc, this.width / 2 - 175, this.height / 4 + 80, 150, 20, Options.BlockOutlineAlpha, "osmium.options.block_overlay_alpha", 0, 1, 10);
+
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(toggleOverlayButton);
+        this.addRenderableWidget(colorSelectWidget);
+        this.addRenderableWidget(alphaSelectWidget);
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.options.block_option_settings"), this.width / 2, 15, 0xffffff);
+        drawString(matrices, mc.font, new TranslatableComponent("osmium.version"), 20, this.height - 20, 0xffffff);
+
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumCapeOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumCapeOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumCapeOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumCapeOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,265 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.network.ClientNetworkHandler;
+import com.intro.client.render.cape.Cape;
+import com.intro.client.render.cape.CosmeticManager;
+import com.intro.client.render.color.Colors;
+import com.intro.client.render.widget.BackAndForwardWidget;
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.render.widget.EnumSelectWidget;
+import com.intro.client.util.MathUtil;
+import com.intro.client.util.RenderUtil;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.StringOption;
+import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.math.Quaternion;
+import com.mojang.math.Vector3f;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.entity.EntityRenderDispatcher;
+import net.minecraft.client.resources.sounds.SimpleSoundInstance;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.LivingEntity;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class OsmiumCapeOptionsScreen extends Screen {
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private final Screen parent;
+
+    private float playerXRot = 0;
+    private float zoomInScale = 0f;
+
+    private final AtomicInteger currentPage = new AtomicInteger(0);
+    private List<List<Cape>> capePages;
+
+    private int bgStartHeight = 0;
+    private BackAndForwardWidget forwardWidget;
+
+    public OsmiumCapeOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.cape_options"));
+        this.parent = parent;
+    }
+
+
+    @Override
+    protected void init() {
+
+        // set width and height to proper values
+        // this is to make it ignore gui scale;
+        this.width = 1280;
+        this.height = 720;
+
+        bgStartHeight = this.height / 2 - 256;
+
+        List<Cape> rawCapes = CosmeticManager.getAllCapes().stream().toList();
+        capePages = new ArrayList<>();
+
+        int numOps = rawCapes.size() / 6;
+        int extraOps = rawCapes.size() % 6;
+
+        int i = 0;
+
+        while (i < numOps) {
+            capePages.add(rawCapes.subList(i * 6, i * 6 + 6));
+            i++;
+        }
+
+        // account for remainder
+        capePages.add(rawCapes.subList(i * 6, i * 6 + extraOps));
+
+        Button refreshButton = new Button(this.width / 2 - 250, bgStartHeight + 350, 200, 20, new TranslatableComponent("osmium.refresh_capes"), this::refresh);
+        EnumSelectWidget toggleCapeWidget = new EnumSelectWidget(this.width / 2 - 250, bgStartHeight + 375 , 200, 20, Options.CustomCapeMode,"osmium.options.video_options.cape_");
+        BooleanButtonWidget toggleAnimationWidget = new BooleanButtonWidget(this.width / 2 - 250, bgStartHeight + 400 , 200, 20, Options.AnimateCapes, "osmium.options.animate_capes_");
+        BooleanButtonWidget toggleShowOtherCapesWidget = new BooleanButtonWidget(this.width / 2 - 250, bgStartHeight + 425 , 200, 20, Options.ShowOtherPlayersCapes, "osmium.options.show_other_capes_");
+
+
+        Button backButton = new Button(this.width / 2 - 250, bgStartHeight + 475, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), button -> mc.setScreen(this.parent));
+
+        // this widget is 1 pixel off center
+        // :)
+        forwardWidget = new BackAndForwardWidget(this.width / 2 + 184, bgStartHeight + 475, 30,  currentPage, 0, capePages.size() - 1);
+
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(toggleShowOtherCapesWidget);
+        this.addRenderableWidget(toggleAnimationWidget);
+        this.addRenderableWidget(forwardWidget);
+        this.addRenderableWidget(toggleCapeWidget);
+        this.addRenderableWidget(refreshButton);
+        super.init();
+    }
+
+    public void render(PoseStack stack, int mouseX, int mouseY, float delta) {
+        PoseStack entityRenderStack = RenderSystem.getModelViewStack();
+        entityRenderStack.pushPose();
+        stack.pushPose();
+
+
+        // System.out.println(this.width);
+
+
+        zoomInScale += 0.25 * delta;
+        zoomInScale = Mth.clamp(zoomInScale, 0, 1);
+        entityRenderStack.scale(zoomInScale, zoomInScale, zoomInScale);
+        stack.scale(zoomInScale, zoomInScale, 0);
+
+        fill(stack, this.width / 2 - 312, bgStartHeight,this.width / 2 + 312, this.height   / 2 + 256, Colors.BACKGROUND_GRAY.getColor().getInt());
+        drawCenteredString(stack, mc.font, new TranslatableComponent("osmium.cape_select"), this.width / 2 + 200, bgStartHeight + 10, Colors.WHITE.getColor().getInt());
+
+        List<Cape> pageCapes = capePages.get(currentPage.get());
+
+        for(int i = 0; i < pageCapes.size(); i++) {
+            Cape cape = pageCapes.get(i);
+
+            if(CosmeticManager.playerCapes.get(mc.player.getStringUUID()) != null && CosmeticManager.playerCapes.get(mc.player.getStringUUID()).registryName.equals(cape.registryName)) {
+                fill(stack, this.width / 2 + 100, bgStartHeight + 40 + (i * 70), this.width / 2 + 300, bgStartHeight + 100 + (i * 70), Colors.DARK_GRAY.getColor().getInt());
+            }
+
+            drawOutlinedBox(stack, this.width / 2 + 100, bgStartHeight + 40 + (i * 70), 200, 60, Colors.WHITE.getColor().getInt());
+            stack.pushPose();
+            RenderUtil.positionAccurateScale(stack, 0.5f, this.width / 2 + 70, bgStartHeight + 40 + (i * 70) - 10, 160, 80);
+            // something wacky going on here
+            // view stack scaling is slightly off, so we have to change pos a bit
+            RenderSystem.setShaderTexture(0, cape.getFrameTexture());
+            blit(stack, this.width / 2 + 70, bgStartHeight + 40 + (i * 70) - 10, 0, 0 , 160, 80, 160, 80);
+            stack.popPose();
+
+            //  these coordinates are just insane
+            drawString(stack, mc.font,"Source: " + cape.source, this.width / 2 + 200, bgStartHeight + 40 + (i * 70) + 15, Colors.WHITE.getColor().getInt());
+            drawString(stack, mc.font, "Animated: " + cape.isAnimated, this.width / 2 + 200, bgStartHeight + 40 + (i * 70) + 25, Colors.WHITE.getColor().getInt());
+            drawString(stack, mc.font, "Creator: " + cape.creator, this.width / 2 + 200, bgStartHeight + 40 + (i * 70) + 35, Colors.WHITE.getColor().getInt());
+        }
+
+        drawCenteredString(stack, mc.font, currentPage.get() + 1 + "/" +  capePages.size(), this.width / 2 + 200, bgStartHeight + 475, Colors.WHITE.getColor().getInt());
+
+        playerXRot -= 0.15 * delta;
+        if(playerXRot <= -179.85) {
+            playerXRot = 180;
+        }
+
+        // spent 2 hours fixing depth testing issues because I forgot to scale the ModelViewStack properly
+        // please help
+        renderEntityInInventory( this.width / 2 - 150, bgStartHeight + 300, 140, playerXRot, 0, mc.player);
+        stack.popPose();
+        entityRenderStack.popPose();
+        super.render(stack, mouseX, mouseY, delta);
+    }
+
+    public void drawOutlinedBox(PoseStack stack, int x, int y, int width, int height, int color) {
+        vLine(stack, x, y, y + height, color);
+        vLine(stack, x + width, y, y + height, color);
+        hLine(stack, x, x + width, y, color);
+        hLine(stack, x, x + width, y + height, color);
+    }
+
+    @Override
+    public boolean mouseClicked(double mouseX, double mouseY, int mouseCode) {
+        List<Cape> pageCapes = capePages.get(currentPage.get());
+
+        // yes I know this is the worst method of 2d hitbox detection
+        // but its only 7 checks, and I can't be bothered over a micro optimization
+
+        System.out.println(this.width);
+
+        for(int i = 0; i < pageCapes.size(); i++) {
+            if(MathUtil.isPositionWithinBounds((int) mouseX, (int) mouseY, this.width / 2 + 100, bgStartHeight + 40 + (i * 70), 200, 60)) {
+                CosmeticManager.playerCapes.put(mc.player.getStringUUID(), pageCapes.get(i));
+                Minecraft.getInstance().getSoundManager().play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
+                OsmiumClient.options.put(Options.SetCape, new StringOption(Options.SetCape, pageCapes.get(i).registryName));
+                try {
+                    ClientNetworkHandler.sendCapeSetPacket(pageCapes.get(i));
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+                return super.mouseClicked(mouseX, mouseY, mouseCode);
+            }
+        }
+        return super.mouseClicked(mouseX, mouseY, mouseCode);
+    }
+
+    protected void refresh(Button button) {
+        CosmeticManager.refresh();
+
+        List<Cape> rawCapes = CosmeticManager.getAllCapes().stream().toList();
+        capePages = new ArrayList<>();
+
+        int numOps = rawCapes.size() / 6;
+        int extraOps = rawCapes.size() % 6;
+
+        int i = 0;
+
+        while (i < numOps) {
+            capePages.add(rawCapes.subList(i * 6, i * 6 + 6));
+            i++;
+        }
+
+        // account for remainder
+        capePages.add(rawCapes.subList(i * 6, i * 6 + extraOps));
+
+        forwardWidget = new BackAndForwardWidget(this.width / 2 + 180, bgStartHeight + 475, 30,  currentPage, 0, capePages.size() - 1);
+    }
+
+
+    public static void renderEntityInInventory(int x, int y, int scale, float xRot, float yRot, LivingEntity livingEntity) {
+        float xRotClamped = Mth.clamp(xRot, -180, 180);
+        float yRotClamped = Mth.clamp(yRot, -180, 180);
+        PoseStack poseStack = RenderSystem.getModelViewStack();
+        poseStack.pushPose();
+        // translate far from screen
+        poseStack.translate(x, y, 1050.0D);
+        poseStack.scale(1.0F, 1.0F, -1.0F);
+        RenderSystem.applyModelViewMatrix();
+        PoseStack poseStack2 = new PoseStack();
+        // translate far from screen
+        poseStack2.translate(0.0D, 0.0D, 1000.0D);
+        poseStack2.scale((float)scale, (float)scale, (float)scale);
+        // flip to right side
+        Quaternion zRotationQuaternion = Vector3f.ZP.rotationDegrees(180.0F);
+        Quaternion yRotationQuaternion = Vector3f.XP.rotationDegrees(yRotClamped * 20.0F);
+        zRotationQuaternion.mul(yRotationQuaternion);
+        poseStack2.mulPose(zRotationQuaternion);
+        // set entity rotations
+        float m = livingEntity.yBodyRot;
+        float n = livingEntity.getYRot();
+        float o = livingEntity.getXRot();
+        float p = livingEntity.yHeadRotO;
+        float q = livingEntity.yHeadRot;
+        livingEntity.yBodyRot = 180.0F + xRotClamped * 20.0F;
+        livingEntity.setYRot(180.0F + xRotClamped * 20.0f);
+        livingEntity.setXRot(-yRotClamped * 20.0F);
+        livingEntity.yHeadRot = livingEntity.getYRot();
+        livingEntity.yHeadRotO = livingEntity.getYRot();
+        // setup for rendering
+        Lighting.setupForEntityInInventory();
+        EntityRenderDispatcher entityRenderDispatcher = Minecraft.getInstance().getEntityRenderDispatcher();
+        yRotationQuaternion.conj();
+        entityRenderDispatcher.overrideCameraOrientation(yRotationQuaternion);
+        entityRenderDispatcher.setRenderShadow(false);
+        MultiBufferSource.BufferSource bufferSource = Minecraft.getInstance().renderBuffers().bufferSource();
+        RenderSystem.runAsFancy(() -> entityRenderDispatcher.render(livingEntity, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F, poseStack2, bufferSource, 15728880));
+        bufferSource.endBatch();
+        // undo changes
+        entityRenderDispatcher.setRenderShadow(true);
+        livingEntity.yBodyRot = m;
+        livingEntity.setYRot(n);
+        livingEntity.setXRot(o);
+        livingEntity.yHeadRotO = p;
+        livingEntity.yHeadRot = q;
+        poseStack.popPose();
+        RenderSystem.applyModelViewMatrix();
+        Lighting.setupFor3DItems();
+    }
+
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumGuiEditScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumGuiEditScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumGuiEditScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumGuiEditScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,91 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.RenderManager;
+import com.intro.client.render.drawables.Drawable;
+import com.intro.client.render.drawables.Scalable;
+import com.intro.client.util.OptionUtil;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.util.Mth;
+
+public class OsmiumGuiEditScreen extends Screen {
+
+    public OsmiumGuiEditScreen() {
+        super(new TranslatableComponent("osmium.gui_edit.title"));
+    }
+
+    @Override
+    protected void init() {
+    }
+
+    @Override
+    public void onClose() {
+        OptionUtil.save();
+        super.onClose();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        RenderManager.renderHud(matrices);
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+
+    @Override
+    public void mouseMoved(double mouseX, double mouseY) {
+        super.mouseMoved(mouseX, mouseY);
+    }
+
+    @Override
+    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
+
+        return super.keyPressed(keyCode, scanCode, modifiers);
+    }
+
+
+    @Override
+    public boolean mouseDragged(double mouseX, double mouseY, int button, double deltaX, double deltaY) {
+        for(Drawable drawable : RenderManager.drawables) {
+            if(drawable.isPositionWithinBounds((int) mouseX, (int) mouseY) && drawable.visible) {
+                if(drawable instanceof Scalable scalable) {
+                    if(mouseX + scalable.getScaledWidth() < this.width || mouseX - scalable.getScaledHeight() < 0) {
+                        scalable.onPositionChange(drawable.posX, drawable.posY, (int) mouseX, drawable.posY);
+                        scalable.setScaledX((int) mouseX);
+                    }
+                    if(mouseY + scalable.getScaledHeight() < this.height || mouseY - scalable.getScaledHeight() < 0) {
+                        scalable.onPositionChange(drawable.posX, drawable.posY, drawable.posX, (int) mouseY);
+                        scalable.setScaledY((int) mouseY);
+                    }
+                } else {
+                    if(mouseX + drawable.width < this.width || mouseX - drawable.width < 0) {
+                        drawable.onPositionChange(drawable.posX, drawable.posY, (int) mouseX, drawable.posY);
+                        drawable.posX = (int) mouseX;
+                    }
+                    if(mouseY + drawable.height < this.height || mouseY - drawable.height < 0) {
+                        drawable.onPositionChange(drawable.posX, drawable.posY, drawable.posX, (int) mouseY);
+                        drawable.posY = (int) mouseY;
+                    }
+                }
+                return super.mouseDragged(mouseX, mouseX, button, deltaX, deltaY);
+            }
+        }
+        return super.mouseDragged(mouseX, mouseY, button, deltaX, deltaY);
+    }
+
+    @Override
+    public boolean mouseScrolled(double mouseX, double mouseY, double scrollDelta) {
+        for(Drawable drawable : RenderManager.drawables) {
+            if(drawable instanceof Scalable scalable) {
+                if(scalable.isPositionWithinBounds((int) mouseX, (int) mouseY) && drawable.visible) {
+                    scalable.onScaleChange(scalable.scale, (float) (scalable.scale + (scrollDelta * 0.1)));
+                    scalable.scale += scrollDelta * 0.1;
+                    scalable.scale = (float) Mth.clamp(scalable.scale, 0.5, 10);
+                    return super.mouseScrolled(mouseX, mouseY, scrollDelta);
+                }
+            }
+        }
+
+        return super.mouseScrolled(mouseX, mouseY, scrollDelta);
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumKeystrokesScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumKeystrokesScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumKeystrokesScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumKeystrokesScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,66 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.render.widget.ColorOptionWidget;
+import com.intro.client.render.widget.DoubleSliderWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.ColorOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+
+public class OsmiumKeystrokesScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public OsmiumKeystrokesScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.keystrokes_settings"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+        Button backButton;
+        ColorOptionWidget colorSelectWidget;
+        if(mc.options.guiScale > 4) {
+            backButton = new Button(this.width / 2 - 175, this.height / 4 + 120, 150, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+            colorSelectWidget = new ColorOptionWidget(this.width / 2 + 25, this.height / 4, 128, 128, Options.KeystrokesColor);
+        } else {
+            backButton = new Button(this.width / 2 - 100, this.height / 4 + 225, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+            colorSelectWidget = new ColorOptionWidget(this.width / 2 + 25, this.height / 4 - 60, 256, 256, Options.KeystrokesColor);
+        }
+
+        Button resetColorWidget = new Button(this.width / 2 - 175, this.height / 4 + 120, 150, 20, new TranslatableComponent("osmium.options.reset_color"), (buttonWidget) -> OsmiumClient.options.put(Options.KeystrokesColor, new ColorOption(Options.KeystrokesColor, new Color(0.1f, 0.1f, 0.1f, 0.2f))));
+        BooleanButtonWidget enabledWidget = new BooleanButtonWidget(this.width / 2 - 175, this.height / 4, 150, 20, Options.KeystrokesEnabled, "osmium.options.keystrokes_");
+        BooleanButtonWidget rgbSelectWidget = new BooleanButtonWidget(this.width / 2 - 175, this.height / 4 + 40, 150, 20, Options.KeystrokesRgb, "osmium.options.rgb_");
+        DoubleSliderWidget alphaSelectWidget = new DoubleSliderWidget(mc, this.width / 2 - 175, this.height / 4 + 80, 150, 20, Options.KeystrokesAlpha, "osmium.options.transparency", 0, 1, 10);
+
+        this.addRenderableWidget(resetColorWidget);
+        this.addRenderableWidget(enabledWidget);
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(rgbSelectWidget);
+        this.addRenderableWidget(colorSelectWidget);
+        this.addRenderableWidget(alphaSelectWidget);
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.options.keystrokes_settings"), this.width / 2, 15, 0xffffff);
+        drawString(matrices, mc.font, new TranslatableComponent("osmium.version"), 20, this.height - 20, 0xffffff);
+
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,151 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.render.widget.EnumSelectWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.Util;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+
+
+public class OsmiumOptionsScreen extends Screen {
+
+    private static boolean shownUpdateScreen = false;
+
+    private final Screen parent;
+
+    private float animationProgress = 0;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private int globalOffset = 0;
+    private int logoOffset = 0;
+    private boolean shouldRenderLogo = true;
+    private int bakedMaxAnim = 0;
+
+    private final ResourceLocation LOGO_TEXTURE = new ResourceLocation("osmium", "icon.png");
+
+    public OsmiumOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.title"));
+        this.parent = parent;
+    }
+
+
+    @Override
+    protected void init() {
+
+        if(!OsmiumClient.runningLatestVersion && !shownUpdateScreen) {
+             shownUpdateScreen = true;
+             mc.setScreen(new OsmiumUpdateScreen(this));
+        }
+
+        // offset because of weird scaling at high gui scales
+        if(mc.options.guiScale > 2) {
+            logoOffset = -40;
+        }
+        if(mc.options.guiScale > 4) {
+            shouldRenderLogo = false;
+            logoOffset = -80;
+            globalOffset = -64;
+
+        }
+        bakedMaxAnim = 57 / mc.options.guiScale;
+
+        BooleanButtonWidget fullBrightWidget = new BooleanButtonWidget(this.width / 2 - 275, this.height / 4 + 80 + globalOffset, 150, 20, Options.FullbrightEnabled, "osmium.options.full_bright_");
+        BooleanButtonWidget hurtBobWidget = new BooleanButtonWidget(this.width / 2 + 125, this.height / 4 + 80 + globalOffset, 150, 20, Options.HurtbobbingEnabled, "osmium.options.hurt_bobbing_");
+        BooleanButtonWidget noFireWidget = new BooleanButtonWidget(this.width / 2 - 275, this.height / 4 + 120 + globalOffset, 150, 20, Options.NoFireEnabled, "osmium.options.no_fire_");
+        Button openWidgetScreen = new Button(this.width / 2 - 75, this.height / 4 + 160 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.widgets_screen"), button -> mc.setScreen(new OsmiumWidgetsScreen(this)));
+        EnumSelectWidget smoothSneakWidget = new EnumSelectWidget(this.width / 2 + 125, this.height / 4 + 120 + globalOffset, 150, 20, Options.SneakMode, "osmium.options.sneak_");
+
+        Button openVideoOptions = new Button(this.width / 2 - 75, this.height / 4 + 120 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.video_options"), (Button) -> mc.setScreen(new OsmiumVideoOptionsScreen(this)));
+
+        Button backButton = new Button(this.width / 2 - 100, this.height / 4 + 225 + globalOffset, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (Button) -> mc.setScreen(parent));
+
+        Button openGuiEditing = new Button(this.width / 2 - 275, this.height / 4 + 160 + globalOffset, 150, 20, new TranslatableComponent("osmium.gui_edit.title"), (Button) -> mc.setScreen(new OsmiumGuiEditScreen()));
+
+        if(mc.level == null) {
+            openGuiEditing.active = false;
+        }
+
+        Button toggleSneakToggleWidget = new Button(this.width / 2 - 75, this.height / 4 + 80 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.toggle_sneak_settings"), (Button) -> mc.setScreen(new OsmiumToggleSneakOptionsScreen(this)));
+
+        Button openGithubWidget = new Button(this.width / 2 + 125, this.height / 4 + 160 + globalOffset, 150, 20, new TranslatableComponent("osmium.open_credits"), this::openCredits);
+
+
+        this.addRenderableWidget(fullBrightWidget);
+        this.addRenderableWidget(toggleSneakToggleWidget);
+        this.addRenderableWidget(hurtBobWidget);
+        this.addRenderableWidget(noFireWidget);
+        this.addRenderableWidget(smoothSneakWidget);
+        this.addRenderableWidget(openVideoOptions);
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(openGuiEditing);
+        this.addRenderableWidget(openWidgetScreen);
+        this.addRenderableWidget(openGithubWidget);
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    private void openCredits(Button widget) {
+        try {
+            Util.getPlatform().openUri(new URI("https://modrinth.com/mod/osmium"));
+        } catch (URISyntaxException exception) {
+            OsmiumClient.LOGGER.warn("Failed in opening modrinth link. How did this even happen?");
+        }
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        // set proper shaders
+        RenderSystem.setShader(GameRenderer::getPositionColorTexShader);
+        RenderSystem.setShaderTexture(0, LOGO_TEXTURE);
+        // gets the current shader color
+        Color shaderColor = Color.fromFloatArray(RenderSystem.getShaderColor());
+        RenderSystem.enableBlend();
+        // renders osmium logo to screen with fade in
+        matrices.pushPose();
+        // sets the current shader color to itself, but with a modified alpha for fade in effect
+        float floatColor = Mth.clamp((animationProgress * 4) - 1 / 255f, 0, 1);
+        RenderSystem.setShaderColor(shaderColor.getFloatR(), shaderColor.getFloatG(), shaderColor.getFloatB(), floatColor);
+        // scale image down to a good size
+        matrices.scale(0.5f, 0.5f, 0.5f);
+        // account for scaling difference
+        // its width / 2 - 128 because we are scaling by 0.5, and 128 is the scaled dimensions of the image
+        matrices.translate(this.width / 2f - 128, animationProgress,0);
+        if(shouldRenderLogo)
+            blit(matrices, this.width / 2, this.height / 8 + globalOffset + logoOffset, 0, 0, 256, 256);
+        matrices.popPose();
+
+        matrices.pushPose();
+        RenderSystem.setShaderColor(shaderColor.getFloatR(), shaderColor.getFloatG(), shaderColor.getFloatB(), ((animationProgress * 4) - 1) / 255f);
+        matrices.translate(0, animationProgress,0);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.version"), this.width / 2, this.height / 8 + 100 + globalOffset + (logoOffset / 4), 0xffffff);
+        matrices.popPose();
+        super.render(matrices, mouseX, mouseY, delta);
+        // 57 is the max because of animation progress looking good at 3
+        animationProgress += 10 * delta;
+        animationProgress = Mth.clamp(animationProgress, 0, bakedMaxAnim);
+        RenderSystem.disableBlend();
+    }
+
+
+
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumStatusEffectDisplayOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumStatusEffectDisplayOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumStatusEffectDisplayOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumStatusEffectDisplayOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,52 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.widget.DoubleSliderWidget;
+import com.intro.client.render.widget.EnumSelectWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+
+// the name, I know
+public class OsmiumStatusEffectDisplayOptionsScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+
+    public OsmiumStatusEffectDisplayOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.status_effect_display_settings"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+        Button backButton = new Button(this.width / 2 - 100, this.height / 4 + 220, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+
+        EnumSelectWidget displayModeWidget = new EnumSelectWidget(this.width / 2 - 175, this.height / 4 + 80, 150, 20, Options.StatusEffectDisplayMode, "osmium.options.status_effect_display_");
+        DoubleSliderWidget maxDisplayedWidget = new DoubleSliderWidget(mc, this.width / 2 + 25, this.height / 4 + 80, 150, 20, Options.MaxStatusEffectsDisplayed, "osmium.options.max_status_display", 0, 10, 1);
+
+
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(displayModeWidget);
+        this.addRenderableWidget(maxDisplayedWidget);
+
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.options.status_effect_display_settings"), this.width / 2, this.height / 4 - 50, 0xffffff);
+        drawString(matrices, mc.font, new TranslatableComponent("osmium.version"), 20, this.height - 20, 0xffffff);
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumToggleSneakOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumToggleSneakOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumToggleSneakOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumToggleSneakOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,62 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.render.widget.DoubleSliderWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+
+public class OsmiumToggleSneakOptionsScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private int globalOffset = 0;
+
+
+    public OsmiumToggleSneakOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.toggle_sneak_settings"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+
+        if(mc.options.guiScale > 4) {
+            globalOffset = -64;
+        }
+
+        Button backButton = new Button(this.width / 2 - 100, this.height / 4 + 225 + globalOffset, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+
+
+        BooleanButtonWidget toggleSprintToggleWidget = new BooleanButtonWidget(this.width / 2 - 175, this.height / 4 + 40, 150, 20, Options.ToggleSprintEnabled, "osmium.options.toggle_sprint_");
+        BooleanButtonWidget toggleSneakToggleWidget = new BooleanButtonWidget(this.width / 2 + 25, this.height / 4 + 40, 150, 20, Options.ToggleSneakEnabled, "osmium.options.toggle_sneak_");
+        BooleanButtonWidget flyBoostEnabledWidget = new BooleanButtonWidget(this.width / 2 - 175, this.height / 4 + 80, 150, 20, Options.FlyBoostEnabled, "osmium.options.fly_boost_");
+        DoubleSliderWidget flyBoostAmountWidget = new DoubleSliderWidget(mc, this.width / 2 + 25, this.height / 4 + 80, 150, 20, Options.FlyBoostAmount, "osmium.options.fly_boost_amount", 0, 10, 10);
+
+
+        this.addRenderableWidget(toggleSneakToggleWidget);
+        this.addRenderableWidget(toggleSprintToggleWidget);
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(flyBoostAmountWidget);
+        this.addRenderableWidget(flyBoostEnabledWidget);
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.options.toggle_sneak_settings"), this.width / 2, this.height / 4 - 50, 0xffffff);
+        drawString(matrices, mc.font, new TranslatableComponent("osmium.version"), 20, this.height - 20, 0xffffff);
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumUpdateScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumUpdateScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumUpdateScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumUpdateScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,148 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Colors;
+import com.intro.client.render.widget.ProgressBarWidget;
+import com.intro.common.ModConstants;
+import com.intro.common.util.Util;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraftforge.fml.loading.FMLPaths;
+import org.apache.logging.log4j.Level;
+
+import java.io.BufferedInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.file.Path;
+
+public class OsmiumUpdateScreen extends Screen  {
+
+    private final Screen parent;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private Button acceptButton;
+    private ProgressBarWidget progressBar;
+    private Button declineButton;
+    private Button retryButton;
+    private Button continueButton;
+
+    private final String latestReleaseName = Util.getLatestReleaseName();
+    private final String latestReleaseTag = Util.getLatestGithubReleaseTag();
+
+    private Thread modDownloadThread = new Thread(new ModDownloader());
+
+    private String errorText = "";
+
+    public static Path OLD_MOD_JAR_PATH;
+
+    public OsmiumUpdateScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.update_screen.title"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+        acceptButton = new Button(this.width / 2 - 175, this.height / 4 + 160, 150, 20, new TranslatableComponent("osmium.download_update"), this::startDownload);
+        declineButton = new Button(this.width / 2 + 25, this.height / 4 + 160, 150, 20, new TranslatableComponent("osmium.decline_update"), (button -> mc.setScreen(parent)));
+        progressBar = new ProgressBarWidget(this.width / 2 - 100, this.height / 4 + 110, 200);
+        progressBar.visible = false;
+        retryButton = new Button(this.width / 2 - 100, this.height / 4 + 160, 200, 20, new TranslatableComponent("osmium.retry"), this::startDownload);
+        retryButton.visible = false;
+        continueButton = new Button(this.width / 2 - 100, this.height / 4 + 160, 200, 20, new TranslatableComponent("osmium.decline_update"),button -> mc.setScreen(parent));
+        continueButton.visible = false;
+
+
+        this.addRenderableWidget(continueButton);
+        this.addRenderableWidget(acceptButton);
+        this.addRenderableWidget(declineButton);
+        this.addRenderableWidget(progressBar);
+        this.addRenderableWidget(retryButton);
+    }
+
+    private void startDownload(Button button) {
+        this.acceptButton.visible = false;
+        this.declineButton.visible = false;
+        this.progressBar.visible = true;
+        this.retryButton.visible = true;
+        progressBar.setProgress(0d);
+        if(modDownloadThread.isAlive()) {
+            modDownloadThread.interrupt();
+        }
+        modDownloadThread = new Thread(new ModDownloader());
+        modDownloadThread.start();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.renderBackground(matrices);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.update_available"), this.width / 2, this.height / 4, Colors.WHITE.getColor().getInt());
+        drawCenteredString(matrices, mc.font, errorText, this.width / 2, this.height / 4 + 250, Colors.RED.getColor().getInt());
+        drawCenteredString(matrices, mc.font, new TextComponent("Current version: " + ModConstants.UPDATE_STRING + "-" + ModConstants.MINECRAFT_VERSION_STRING + ", New version: " + latestReleaseTag), this.width / 2, this.height / 4 + 50, Colors.WHITE.getColor().getInt());
+
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+
+
+    private class ModDownloader implements Runnable {
+
+        @Override
+        public void run() {
+            try {
+                Path oldJarPath = Util.getModJarPath("osmium", "Osmium");
+                Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+                    try {
+                        Util.forceDelete(oldJarPath.toFile());
+                    } catch (IOException | InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }));
+
+                URL fileUrl = new URL(Util.getLatestReleaseDownloadString());
+                long fileSize = getFileSize(fileUrl);
+                HttpURLConnection connection = (HttpURLConnection) fileUrl.openConnection();
+
+                BufferedInputStream stream = new BufferedInputStream(connection.getInputStream());
+                FileOutputStream fileOutputStream = new FileOutputStream(FMLPaths.MODSDIR.get().toString() + latestReleaseName);
+
+                double bytesDownloaded = 0;
+
+                // buffer data
+                byte[] dataBuffer = new byte[1024];
+                double bytesRead;
+
+                errorText = "Downloading jar...";
+                while((bytesRead = stream.read(dataBuffer, 0, 1024)) >= 0) {
+                    bytesDownloaded += bytesRead;
+                    fileOutputStream.write(dataBuffer, 0, (int) bytesRead);
+                    final double currentProgress = (bytesDownloaded / fileSize);
+                    progressBar.setProgress(currentProgress);
+                }
+
+                fileOutputStream.close();
+                connection.disconnect();
+
+
+                errorText = "Update successful! Update will be applied on game restart.";
+                retryButton.visible = false;
+                continueButton.visible = true;
+            } catch (Exception e) {
+                OsmiumClient.LOGGER.log(Level.ERROR, "Update Error: " + e + ", Try manually updating if this issue persists");
+                errorText = "Update Error: " + e + ", Try manually updating if this issue persists";
+            }
+        }
+
+        private long getFileSize(URL url) throws IOException {
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod("HEAD");
+            return connection.getContentLengthLong();
+        }
+    }
+
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumVideoOptionsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumVideoOptionsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumVideoOptionsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumVideoOptionsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,105 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+
+public class OsmiumVideoOptionsScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private int globalOffset = 0;
+    private int logoOffset = 0;
+    private boolean shouldRenderLogo = true;
+    private int finalOffset = 0;
+
+
+
+    private final ResourceLocation LOGO_TEXTURE = new ResourceLocation("osmium", "icon.png");
+
+    public OsmiumVideoOptionsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.video_options.title"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+
+        // offset because of weird scaling at high gui scales
+        if(mc.options.guiScale > 2) {
+            logoOffset = -40;
+        }
+        if(mc.options.guiScale > 4) {
+            shouldRenderLogo = false;
+            logoOffset = -80;
+            globalOffset = -64;
+        }
+
+        // this wonderful bit of code is very inefficient
+        // but, it's only called on init, and it makes a very annoying rendering offset bug go away
+        // so who's laughing
+        finalOffset = 57 / mc.options.guiScale;
+
+        Button backButton = new Button(this.width / 2 - 100, this.height / 4 + 225 + globalOffset, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (Button) -> mc.setScreen(parent));
+
+        Button blockOptionScreenButton = new Button(this.width / 2 - 75, this.height / 4 + 120 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.block_option_settings"), (buttonWidget) -> mc.setScreen(new OsmiumBlockOptionsScreen(this)));
+
+        Button openCapeWidget = new Button(this.width / 2 - 275, this.height / 4 + 80 + globalOffset, 150, 20, new TranslatableComponent("osmium.cape_options"), button -> mc.setScreen(new OsmiumCapeOptionsScreen(this)));
+        BooleanButtonWidget toggleRainWidget = new BooleanButtonWidget(this.width / 2 - 75, this.height / 4 + 80 + globalOffset, 150, 20, Options.NoRainEnabled, "osmium.options.rain_");
+        BooleanButtonWidget toggleFireworksWidget = new BooleanButtonWidget(this.width / 2 + 125, this.height / 4 + 80 + globalOffset, 150, 20, Options.FireworksDisabled, "osmium.options.fireworks_");
+        BooleanButtonWidget toggleNetherParticlesWidget = new BooleanButtonWidget(this.width / 2 - 275, this.height / 4 + 120 + globalOffset, 150, 20, Options.DecreaseNetherParticles, "osmium.options.nether_particles_");
+
+
+        if(mc.level == null) {
+            openCapeWidget.active = false;
+        }
+
+        this.addRenderableWidget(backButton);
+        this.addRenderableWidget(openCapeWidget);
+        this.addRenderableWidget(toggleRainWidget);
+        this.addRenderableWidget(toggleFireworksWidget);
+        this.addRenderableWidget(toggleNetherParticlesWidget);
+        this.addRenderableWidget(blockOptionScreenButton);
+    }
+
+    @Override
+    public void onClose() {
+        OptionUtil.save();
+        super.onClose();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        // haha magic number go brrrr
+        this.renderBackground(matrices);
+        // set proper shaders
+        RenderSystem.setShader(GameRenderer::getPositionColorTexShader);
+        RenderSystem.setShaderTexture(0, LOGO_TEXTURE);
+        RenderSystem.enableBlend();
+        matrices.pushPose();
+        // scale image down to a good size
+        matrices.scale(0.5f, 0.5f, 0.5f);
+        // account for scaling difference
+        // its width / 2 - 128 because we are scaling by 0.5, and 128 is the scaled dimensions of the image
+        matrices.translate(this.width / 2f - 128, finalOffset,0);
+        if(shouldRenderLogo)
+            blit(matrices, this.width / 2, this.height / 8 + globalOffset + logoOffset, 0, 0, 256, 256);
+        matrices.popPose();
+
+        matrices.pushPose();
+        matrices.translate(0, finalOffset,0);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.version"), this.width / 2, this.height / 8 + 100 + globalOffset + (logoOffset / 4), 0xffffff);
+        matrices.popPose();
+        super.render(matrices, mouseX, mouseY, delta);
+        RenderSystem.disableBlend();
+    }
+}
Index: src/main/java/com/intro/client/render/screen/OsmiumWidgetsScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/screen/OsmiumWidgetsScreen.java b/src/main/java/com/intro/client/render/screen/OsmiumWidgetsScreen.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/screen/OsmiumWidgetsScreen.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,106 @@
+package com.intro.client.render.screen;
+
+import com.intro.client.render.widget.BooleanButtonWidget;
+import com.intro.client.util.OptionUtil;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.Mth;
+
+public class OsmiumWidgetsScreen extends Screen {
+
+    private final Screen parent;
+    private final Minecraft mc = Minecraft.getInstance();
+
+    private int globalOffset = 0;
+    private int logoOffset = 0;
+    private boolean shouldRenderLogo = true;
+    private int finalOffset = 0;
+
+    private final ResourceLocation LOGO_TEXTURE = new ResourceLocation("osmium", "icon.png");
+
+
+    public OsmiumWidgetsScreen(Screen parent) {
+        super(new TranslatableComponent("osmium.options.widgets_screen"));
+        this.parent = parent;
+    }
+
+    @Override
+    protected void init() {
+        Button backButton = new Button(this.width / 2 - 100, this.height / 4 + 220, 200, 20, new TranslatableComponent("osmium.options.video_options.back"), (buttonWidget) -> mc.setScreen(this.parent));
+
+
+        // offset because of weird scaling at high gui scales
+        if(mc.options.guiScale > 2) {
+            logoOffset = -40;
+        }
+        if(mc.options.guiScale > 4) {
+            shouldRenderLogo = false;
+            logoOffset = -80;
+            globalOffset = -64;
+        }
+
+        // this wonderful bit of code is very inefficient
+        // but, it's only called on init, and it makes a very annoying rendering offset bug go away
+        // so who's laughing
+        while(!(finalOffset > (57 / mc.options.guiScale))) {
+            finalOffset = Mth.clamp(finalOffset, 0, 57 / mc.options.guiScale);
+            finalOffset += 3;
+        }
+
+        BooleanButtonWidget pingDisplayEnabled = new BooleanButtonWidget(this.width / 2 - 275, this.height / 4 + 80 + globalOffset, 150, 20, Options.PingDisplayEnabled, "osmium.options.ping_display_");
+        BooleanButtonWidget cpsDisplayEnabled = new BooleanButtonWidget(this.width / 2 - 75, this.height / 4 + 80 + globalOffset, 150, 20, Options.CpsDisplayEnabled, "osmium.options.cps_");
+        BooleanButtonWidget fpsDisplayEnabled = new BooleanButtonWidget(this.width / 2 + 125, this.height / 4 + 80 + globalOffset, 150, 20, Options.FpsEnabled, "osmium.options.fps_");
+        BooleanButtonWidget armorDisplayEnabled = new BooleanButtonWidget(this.width / 2 - 275, this.height / 4 + 120 + globalOffset, 150, 20, Options.ArmorDisplayEnabled, "osmium.options.armor_display_");
+        Button openKeystrokesWidget = new Button(this.width / 2 - 75, this.height / 4 + 120 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.keystrokes_settings"), button -> mc.setScreen(new OsmiumKeystrokesScreen(this)));
+        Button statusEffectScreenButton = new Button(this.width / 2 + 125, this.height / 4 + 120 + globalOffset, 150, 20, new TranslatableComponent("osmium.options.status_effect_display_settings"), (buttonWidget) -> mc.setScreen(new OsmiumStatusEffectDisplayOptionsScreen(this)));
+
+        this.addRenderableWidget(statusEffectScreenButton);
+        this.addRenderableWidget(openKeystrokesWidget);
+        this.addRenderableWidget(pingDisplayEnabled);
+        this.addRenderableWidget(cpsDisplayEnabled);
+        this.addRenderableWidget(fpsDisplayEnabled);
+        this.addRenderableWidget(armorDisplayEnabled);
+        this.addRenderableWidget(backButton);
+
+
+    }
+
+    @Override
+    public void onClose() {
+        super.onClose();
+        OptionUtil.save();
+    }
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        // haha magic number go brrrr
+        this.renderBackground(matrices);
+        // set proper shaders
+        RenderSystem.setShader(GameRenderer::getPositionColorTexShader);
+        RenderSystem.setShaderTexture(0, LOGO_TEXTURE);
+        RenderSystem.enableBlend();
+        matrices.pushPose();
+        // scale image down to a good size
+        matrices.scale(0.5f, 0.5f, 0.5f);
+        // account for scaling difference
+        // its width / 2 - 128 because we are scaling by 0.5, and 128 is the scaled dimensions of the image
+        matrices.translate(this.width / 2f - 128, finalOffset,0);
+        if(shouldRenderLogo)
+            blit(matrices, this.width / 2, this.height / 8 + globalOffset + logoOffset, 0, 0, 256, 256);
+        matrices.popPose();
+
+        matrices.pushPose();
+        matrices.translate(0, finalOffset,0);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.version"), this.width / 2, this.height / 8 + 100 + globalOffset + (logoOffset / 4), 0xffffff);
+        matrices.popPose();
+        super.render(matrices, mouseX, mouseY, delta);
+        RenderSystem.disableBlend();
+    }
+}
Index: src/main/java/com/intro/client/render/texture/DynamicAnimation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/texture/DynamicAnimation.java b/src/main/java/com/intro/client/render/texture/DynamicAnimation.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/texture/DynamicAnimation.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,96 @@
+package com.intro.client.render.texture;
+
+import com.intro.client.util.TextureUtil;
+import com.mojang.blaze3d.platform.NativeImage;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.texture.AbstractTexture;
+import net.minecraft.client.renderer.texture.DynamicTexture;
+import net.minecraft.resources.ResourceLocation;
+
+import java.util.HashMap;
+
+// the way this is done is really not the best, but minecraft rendering code has forced my hand
+// it registers individual frames and doesn't use UV coordinates
+public class DynamicAnimation implements Cloneable {
+
+    public int maxAnimationFrames;
+    public int frameWidth, frameHeight;
+
+    public int getFrameDelay() {
+        return frameDelay;
+    }
+
+    private final int frameDelay;
+    private int frameDelayTicker = 0;
+
+    private int currentFrame = 0;
+
+    public String getRegistryName() {
+        return registryName;
+    }
+
+    private final String registryName;
+
+    private final HashMap<Integer, ResourceLocation> frames = new HashMap<>();
+    public final NativeImage image;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    public DynamicAnimation(NativeImage image, String registryName, int frameWidth, int frameHeight, int frameDelay) {
+        this.image = image;
+        this.frameWidth = frameWidth;
+        this.frameHeight = frameHeight;
+        this.frameDelay = frameDelay;
+        // offset by 1 to account for the fact that frames start at 0
+        this.maxAnimationFrames = (image.getWidth() / frameWidth) - 1;
+
+        this.registryName = registryName;
+
+        for(int i = 0; i <= maxAnimationFrames; i++) {
+            frames.put(i, mc.getTextureManager().register(registryName + "i", new DynamicTexture(TextureUtil.subImage(image, i * frameWidth, 0, frameWidth, frameHeight))));
+        }
+    }
+
+    public ResourceLocation getFrameLocation(int frame) {
+        return frames.get(frame);
+    }
+
+
+    public AbstractTexture getTexture() {
+        return mc.getTextureManager().getTexture(getCurrentFrameLocation());
+    }
+
+    public ResourceLocation getCurrentFrameLocation()    {
+        return frames.get(this.currentFrame);
+    }
+
+
+    public void tick() {
+        if(frameDelayTicker > frameDelay) {
+            frameDelayTicker = 0;
+            currentFrame++;
+            if(currentFrame > this.maxAnimationFrames) {
+                currentFrame = 0;
+            }
+        } else {
+            frameDelayTicker++;
+        }
+
+    }
+
+
+    public void free() {
+        for(ResourceLocation location : frames.values()) {
+            mc.getTextureManager().release(location);
+        }
+    }
+
+    @Override
+    public DynamicAnimation clone() {
+        try {
+            return (DynamicAnimation) super.clone();
+        } catch (CloneNotSupportedException e) {
+            throw new AssertionError();
+        }
+    }
+}
Index: src/main/java/com/intro/client/render/widget/BackAndForwardWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/BackAndForwardWidget.java b/src/main/java/com/intro/client/render/widget/BackAndForwardWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/BackAndForwardWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,81 @@
+package com.intro.client.render.widget;
+
+import com.intro.client.util.MathUtil;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.components.Widget;
+import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.resources.sounds.SimpleSoundInstance;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.util.Mth;
+import org.lwjgl.glfw.GLFW;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class BackAndForwardWidget extends GuiComponent implements Widget, GuiEventListener, NarratableEntry {
+
+    private static final ResourceLocation FORWARD_BUTTON_LOCATION = new ResourceLocation("osmium", "/textures/gui/forward_button.png");
+    private static final ResourceLocation BACK_BUTTON_LOCATION = new ResourceLocation("osmium", "/textures/gui/back_button.png");
+
+
+    private final int textureGap;
+    private int x, y;
+    private AtomicInteger value;
+
+    private int min, max;
+
+
+    public BackAndForwardWidget(int centerX, int y, int textureGap, AtomicInteger value, int min, int max) {
+        this.textureGap = textureGap;
+        this.x = centerX;
+        this.y = y;
+        this.value = value;
+        this.min = min;
+        this.max = max;
+    }
+
+
+
+    @Override
+    public void render(PoseStack stack, int mouseX, int mouseY, float delta) {
+        RenderSystem.setShader(GameRenderer::getPositionTexShader);
+        RenderSystem.setShaderTexture(0, BACK_BUTTON_LOCATION);
+        blit(stack, x - textureGap, y, 0, 0, 32, 32, 32, 32);
+        RenderSystem.setShaderTexture(0, FORWARD_BUTTON_LOCATION);
+        blit(stack, x + textureGap, y, 0, 0, 32, 32, 32, 32);
+    }
+
+    @Override
+    public NarrationPriority narrationPriority() {
+        return NarrationPriority.NONE;
+    }
+
+
+    @Override
+    public void updateNarration(NarrationElementOutput narrationElementOutput) {
+
+    }
+
+    @Override
+    public boolean mouseClicked(double mouseX, double mouseY, int code) {
+        if(code == GLFW.GLFW_MOUSE_BUTTON_1) {
+            if(MathUtil.isPositionWithinBounds((int) mouseX, (int) mouseY, x - 32, y, 32, 32)) {
+                Minecraft.getInstance().getSoundManager().play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
+                value.decrementAndGet();
+                value.set(Mth.clamp(value.get(), min, max));
+            }
+            if(MathUtil.isPositionWithinBounds((int) mouseX, (int) mouseY, x + textureGap, y, 32, 32)) {
+                Minecraft.getInstance().getSoundManager().play(SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F));
+                value.incrementAndGet();
+                value.set(Mth.clamp(value.get(), min, max));
+            }
+        }
+        return GuiEventListener.super.mouseClicked(mouseX, mouseY, code);
+    }
+}
Index: src/main/java/com/intro/client/render/widget/BooleanButtonWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/BooleanButtonWidget.java b/src/main/java/com/intro/client/render/widget/BooleanButtonWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/BooleanButtonWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,47 @@
+package com.intro.client.render.widget;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.options.BooleanOption;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+
+public class BooleanButtonWidget extends Button {
+
+    public final String optionId;
+    public final String key;
+
+    public BooleanButtonWidget(int x, int y, int width, int height, String optionId, String key) {
+        super(x, y, width, height, new TextComponent(""), button -> {
+            if(!OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+                ((BooleanOption) OsmiumClient.options.get(optionId)).variable = !((BooleanOption) OsmiumClient.options.get(optionId)).variable;
+            } else {
+                button.active = false;
+            }
+            if(((BooleanOption) OsmiumClient.options.get(optionId)).variable) {
+                button.setMessage(new TranslatableComponent(key + "enabled"));
+            } else {
+                button.setMessage(new TranslatableComponent(key + "disabled"));
+            }
+
+        });
+        this.optionId = optionId;
+        this.key = key;
+        if(OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+            this.active = false;
+        }
+        if(((BooleanOption) OsmiumClient.options.get(optionId)).variable) {
+            super.setMessage(new TranslatableComponent(key + "enabled"));
+        } else {
+            super.setMessage(new TranslatableComponent(key + "disabled"));
+        }
+    }
+
+
+
+    @Override
+    public NarrationPriority narrationPriority() {
+        return NarrationPriority.HOVERED;
+    }
+
+}
Index: src/main/java/com/intro/client/render/widget/ColorOptionWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/ColorOptionWidget.java b/src/main/java/com/intro/client/render/widget/ColorOptionWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/ColorOptionWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,152 @@
+package com.intro.client.render.widget;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.util.TextureUtil;
+import com.intro.client.util.Vector2d;
+import com.mojang.blaze3d.platform.NativeImage;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.components.Widget;
+import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.resources.ResourceLocation;
+
+
+/**
+ * <h1>ye who enter here abandon all hope</h1>
+ * <p>This is by far the wost class I have ever had the torment of writing.</p>
+ * <p>Nothing here makes sense, please don't look into it.</p>
+ * <p>But if you do, see the comments to avoid wasting 8 hours of your life</p>
+ *
+ * @author Intro
+ * @since 1.0.7
+ * @see Color
+ * @see com.intro.common.config.Options
+ * @see com.intro.client.render.screen.OsmiumBlockOptionsScreen
+ */
+public class ColorOptionWidget extends GuiComponent implements Widget, GuiEventListener, NarratableEntry {
+
+    private final String optionId;
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+    private final ResourceLocation BAKED_TEXTURE = new ResourceLocation("osmium", "/textures/gui/gradient.png");
+
+    private final NativeImage TEXTURE;
+
+    private final int x;
+    private final int y;
+
+    // width and height are always the same as baked image
+    private final int width;
+    private final int height;
+
+
+    /*
+    I have no idea how this works
+    On class init it loads a NativeImage object
+    from an identifier, but after that you have to load the image
+    again from a shader on the first render.
+    you have to do both, or it won't work
+    please help me
+
+    edit: turns out im stupid, and it doesn't do all that
+    */
+    public ColorOptionWidget(int x, int y, int width, int height, String optionId) {
+        this.optionId = optionId;
+        this.x = x;
+        this.y = y;
+        this.width = width;
+        this.height = height;
+        this.TEXTURE = TextureUtil.getImageAtLocation(BAKED_TEXTURE);
+    }
+
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        RenderSystem.setShader(GameRenderer::getPositionTexShader);
+        RenderSystem.setShaderTexture(0, BAKED_TEXTURE);
+        blit(matrices, x, y, 0, 0, width, height, width, height);
+        drawCenteredString(matrices, mc.font, OsmiumClient.options.getColorOption(this.optionId).color.toStringNoAlpha(), x + (width / 2), y + height + 20, 0xffffff);
+        drawCenteredString(matrices, mc.font, new TranslatableComponent("osmium.widget.color_picker"), x + (width / 2), y - 20, 0xffffff);
+    }
+
+    @Override
+    @SuppressWarnings("deprecated")
+    public boolean mouseClicked(double mouseX, double mouseY, int button) {
+        if(this.isPositionWithinBounds((int) mouseX, ((int) mouseY))) {
+            Vector2d vec2 = this.getImagePixels((int) mouseX, (int) mouseY);
+            int color;
+            // for some reason NativeImage isn't reading color data properly.
+            // so we have to get the base pixel data
+            int[] bytes;
+            bytes = TEXTURE.makePixelArray();
+            color = getColorAtLocation(bytes, TEXTURE, (int) vec2.getX(), (int) vec2.getY());
+
+            OsmiumClient.options.getColorOption(this.optionId).color = new Color(color);
+        }
+        return GuiEventListener.super.mouseClicked(mouseX, mouseY, button);
+    }
+
+
+    // gets image coordinates from screen coordinates
+    public Vector2d getImagePixels(int screenX, int screenY) {
+        Screen screen = mc.screen;
+        // compute scale
+        double imageScale = Math.min(screen.width / width, screen.height / height);
+
+        // compute image offset
+        double scaledWidth = width * imageScale;
+        double scaledHeight = height * imageScale;
+
+        // clamp image coordinates
+        if(screenX < this.x || this.x + scaledWidth < screenX) {
+            return null;
+        }
+        if(screenY < this.y || this.y + scaledHeight < screenY) {
+            return null;
+        }
+
+        // normalize output
+        double x = (screenX - this.x) / imageScale;
+        double y = (screenY - this.y) / imageScale;
+
+        // de-scale output
+        x *= 2;
+        y *= 2;
+
+        return new Vector2d(x, y);
+    }
+
+    public boolean isPositionWithinBounds(int x, int y) {
+        return x > this.x  && x < this.x + this.width && y > this.y && y < this.y + height;
+    }
+
+    
+    public int getColorAtLocation(int [] arr, NativeImage texture, int x, int y) {
+        float scale = texture.getWidth() / width;
+        int scaledX = (int) (x * scale);
+        int scaledY = (int) (y * scale);
+
+        int index = (texture.getWidth() * scaledY) + scaledX;
+        return arr[index];
+    }
+
+
+    @Override
+    public NarrationPriority narrationPriority() {
+        return NarrationPriority.HOVERED;
+    }
+
+    @Override
+    public void updateNarration(NarrationElementOutput narrationElementOutput) {
+
+    }
+}
Index: src/main/java/com/intro/client/render/widget/DoubleSliderWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/DoubleSliderWidget.java b/src/main/java/com/intro/client/render/widget/DoubleSliderWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/DoubleSliderWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,57 @@
+package com.intro.client.render.widget;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.options.DoubleOption;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.AbstractOptionSliderButton;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.util.Mth;
+
+public class DoubleSliderWidget extends AbstractOptionSliderButton {
+
+    private final String optionId;
+    public final String key;
+    private final double minVal;
+    private final double maxVal;
+
+    private final double roundTo;
+
+    public DoubleSliderWidget(Minecraft mc, int x, int y, int width, int height, String optionId, String key, double minVal, double maxVal, double roundTo) {
+        super(mc.options, x, y, width, height, OsmiumClient.options.getDoubleOption(optionId).variable);
+        this.optionId = optionId;
+        this.key = key;
+        this.minVal = minVal;
+        this.maxVal = maxVal;
+        this.roundTo = roundTo;
+        this.updateMessage();
+        this.applyValue();
+    }
+
+    @Override
+    protected void updateMessage() {
+        if(OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+            this.active = false;
+        }
+        double scaledVal = (maxVal - minVal) * this.value;
+        scaledVal = Mth.clamp(scaledVal, minVal, maxVal);
+        this.setMessage(new TextComponent(new TranslatableComponent(key).getString() + (Math.round(scaledVal * roundTo) / roundTo)));
+    }
+
+    @Override
+    protected void applyValue() {
+        if(!OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+            double scaledVal = (maxVal - minVal) * this.value;
+            scaledVal = Mth.clamp(scaledVal, minVal, maxVal);
+            ((DoubleOption) OsmiumClient.options.get(optionId)).variable = Math.round(scaledVal * roundTo) / roundTo;
+        }
+    }
+
+
+    @Override
+    public void render(PoseStack matrices, int mouseX, int mouseY, float delta) {
+        this.value = Mth.clamp(value, 0, 1);
+        super.render(matrices, mouseX, mouseY, delta);
+    }
+}
Index: src/main/java/com/intro/client/render/widget/EnumSelectWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/EnumSelectWidget.java b/src/main/java/com/intro/client/render/widget/EnumSelectWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/EnumSelectWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,41 @@
+package com.intro.client.render.widget;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.util.EnumUtil;
+import com.intro.common.config.options.EnumOption;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
+
+public class EnumSelectWidget extends Button {
+
+    public final String optionId;
+    public final String key;
+
+    @SuppressWarnings("unsafe")
+    public EnumSelectWidget(int x, int y, int width, int height, String optionId, String key) {
+        super(x, y, width, height, new TextComponent(""), button -> {
+            if(!OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+                Enum<?> attachedEnum;
+                attachedEnum = EnumUtil.nextEnum(OsmiumClient.options.getEnumOption(optionId).variable);
+                OsmiumClient.options.put(optionId, new EnumOption(optionId, attachedEnum));
+                button.setMessage(new TranslatableComponent(key + attachedEnum.name().toLowerCase()));
+            } else {
+                System.out.println("inactive");
+                button.active = false;
+            }
+        });
+
+
+        if(OsmiumClient.options.getOverwrittenOptions().containsKey(optionId)) {
+            this.active = false;
+        }
+        Enum<?> attachedEnum = OsmiumClient.options.getEnumOption(optionId).variable;
+        this.setMessage(new TranslatableComponent(key + attachedEnum.name().toLowerCase()));
+
+        this.optionId = optionId;
+        this.key = key;
+    }
+
+
+}
Index: src/main/java/com/intro/client/render/widget/ProgressBarWidget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/ProgressBarWidget.java b/src/main/java/com/intro/client/render/widget/ProgressBarWidget.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/ProgressBarWidget.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,53 @@
+package com.intro.client.render.widget;
+
+import com.google.common.util.concurrent.AtomicDouble;
+import com.intro.client.render.color.Colors;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiComponent;
+import net.minecraft.client.gui.components.Widget;
+import net.minecraft.client.gui.components.events.GuiEventListener;
+import net.minecraft.client.gui.narration.NarratableEntry;
+import net.minecraft.client.gui.narration.NarrationElementOutput;
+import net.minecraft.util.Mth;
+
+public class ProgressBarWidget extends GuiComponent implements Widget, GuiEventListener, NarratableEntry {
+
+    public final int x, y, width;
+
+    public boolean visible = true;
+
+    private final AtomicDouble progress = new AtomicDouble(0d);
+
+    public ProgressBarWidget(int x, int y, int width) {
+        this.x = x;
+        this.y = y;
+        this.width = width;
+    }
+
+    public void setProgress(double d) {
+        d = Mth.clamp(d, 0, 1d);
+        this.progress.set(d);
+    }
+
+    @Override
+    public void render(PoseStack poseStack, int mouseX, int mouseY, float partialTicks) {
+        if(visible) {
+            // fill bar
+            int height = 15;
+            fill(poseStack, this.x - 2, this.y - 2, this.x + width + 2, this.y + height + 2, Colors.BLACK.getColor().getInt());
+            fill(poseStack, this.x, this.y, (int) (this.x + (width * progress.get())), this.y + height, Colors.GREEN.getColor().getInt());
+            drawCenteredString(poseStack, Minecraft.getInstance().font, Math.round(progress.get() * 100) + "%", this.x + (width / 2), this.y + (height / 4), Colors.WHITE.getColor().getInt());
+        }
+    }
+
+    @Override
+    public NarrationPriority narrationPriority() {
+        return NarrationPriority.NONE;
+    }
+
+    @Override
+    public void updateNarration(NarrationElementOutput narrationElementOutput) {
+
+    }
+}
Index: src/main/java/com/intro/client/render/widget/ScalableButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/render/widget/ScalableButton.java b/src/main/java/com/intro/client/render/widget/ScalableButton.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/render/widget/ScalableButton.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,60 @@
+package com.intro.client.render.widget;
+
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.network.chat.Component;
+
+public class ScalableButton extends Button {
+
+    private float scale;
+
+    public ScalableButton(int i, int j, int k, int l, Component component, OnPress onPress, float scale) {
+        super(i, j, k, l, component, onPress);
+        this.scale = scale;
+    }
+
+    public ScalableButton(int i, int j, int k, int l, Component component, OnPress onPress, OnTooltip onTooltip) {
+        super(i, j, k, l, component, onPress, onTooltip);
+    }
+
+    public int getScaledX() {
+        return (int) (x + (this.getScaledWidth() / (2 * scale)) - this.getScaledWidth() / 2);
+    }
+
+
+    public int getScaledY() {
+        return (int) (x + (this.getScaledHeight() / (2 * scale)) - this.getScaledHeight() / 2);
+    }
+
+    public int getScaledWidth() {
+        return (int) (this.width * scale);
+    }
+
+    public int getScaledHeight() {
+        return (int) (this.height * scale);
+    }
+
+    @Override
+    public void render(PoseStack poseStack, int i, int j, float f) {
+        if (this.visible) {
+            this.isHovered = i >= this.getScaledX() && j >= this.getScaledY() && i < this.getScaledX() + this.getScaledWidth() && j < this.getScaledY() + this.getScaledHeight();
+            this.renderButton(poseStack, i, j, f);
+        }
+    }
+
+    @Override
+    public void renderButton(PoseStack poseStack, int i, int j, float f) {
+        super.renderButton(poseStack, i, j, f);
+        if (this.isHovered()) {
+            this.renderToolTip(poseStack, i, j);
+        }
+    }
+
+    @Override
+    public boolean keyPressed(int i, int j, int k) {
+        i *= scale;
+        j *= scale;
+        return super.keyPressed(i, j, k);
+    }
+
+}
Index: src/main/java/com/intro/client/util/ColorUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/ColorUtil.java b/src/main/java/com/intro/client/util/ColorUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/ColorUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,65 @@
+package com.intro.client.util;
+
+import com.intro.client.render.color.Color;
+
+public class ColorUtil {
+
+    public static Color generateRandomColor(int alpha) {
+        int r = (int) (Math.random() * (254 - 1 + 1) + 1);
+        int g = (int) (Math.random() * (254 - 1 + 1) + 1);
+        int b = (int) (Math.random() * (254 - 1 + 1) + 1);
+        return new Color(r, g, b, alpha);
+    }
+
+    // if else gore
+    // this is probably the worst possible solution, but it doesn't really matter
+    public static int nextColor(int color) {
+        Color c = new Color(color);
+        if(c.getR() >= 255) {
+            if(c.getG() >= 255) {
+                if(c.getB() >= 255) {
+                    return new Color(0, 0, 0, c.getA()).getInt();
+                } else {
+                    c.setB(c.getB() + 1);
+                }
+            } else {
+                c.setG(c.getG() + 1);
+            }
+        } else {
+            c.setR(c.getR() + 1);
+        }
+        return c.getInt();
+    }
+
+    public static int previousColor(int color) {
+        Color c = new Color(color);
+        if(c.getR() <= 1) {
+            if(c.getG() <= 1) {
+                if(c.getB() <= 1) {
+                    return new Color(0, 0, 0, c.getA()).getInt();
+                } else {
+                    c.setB(c.getB() - 1);
+                }
+            } else {
+                c.setG(c.getG() - 1);
+            }
+        } else {
+            c.setR(c.getR() - 1);
+        }
+        return c.getInt();
+    }
+
+    public static int offsetColor(int color, int amount, boolean offsetAlpha) {
+        Color c = new Color(color);
+        c.setR(c.getR() + amount);
+        c.setG(c.getG() + amount);
+        c.setB(c.getB() + amount);
+        if(offsetAlpha)
+            c.setA(c.getA() + amount);
+        return c.getInt();
+    }
+
+    public static int getContrastColor(int color) {
+        return new Color(255-Color.toRGBAR(color), 255-Color.toRGBAG(color), 255 - Color.toRGBAB(color), Color.toRGBAA(color)).getInt();
+    }
+}
Index: src/main/java/com/intro/client/util/ElementPosition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/ElementPosition.java b/src/main/java/com/intro/client/util/ElementPosition.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/ElementPosition.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,27 @@
+package com.intro.client.util;
+
+import com.intro.client.render.drawables.Drawable;
+import com.intro.client.render.drawables.Scalable;
+
+public class ElementPosition {
+
+    public int x, y;
+    public double scale;
+
+    public ElementPosition(int x, int y, double scale) {
+        this.x = x;
+        this.y = y;
+        this.scale = scale;
+    }
+
+    public void loadToDrawable(Drawable drawable) {
+        drawable.posX = x;
+        drawable.posY = y;
+    }
+
+    public void loadToScalable(Scalable scalable) {
+        scalable.posX = x;
+        scalable.posY = y;
+        scalable.scale = scale;
+    }
+}
Index: src/main/java/com/intro/client/util/EnumUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/EnumUtil.java b/src/main/java/com/intro/client/util/EnumUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/EnumUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,23 @@
+package com.intro.client.util;
+
+public class EnumUtil {
+
+    public static <T extends Enum<T>> T loadEnumState(ClassLoader loader, String classBinaryName, String instanceName) throws ClassNotFoundException {
+        @SuppressWarnings("unchecked")
+        Class<T> eClass = (Class<T>)loader.loadClass(classBinaryName);
+        return Enum.valueOf(eClass, instanceName);
+    }
+
+    public static <T extends Enum<T>> Class<T> loadEnum(ClassLoader loader, String classBinaryName) throws ClassNotFoundException {
+        @SuppressWarnings("unchecked")
+        Class<T> eClass = (Class<T>)loader.loadClass(classBinaryName);
+        return eClass;
+    }
+
+    public static <T extends Enum<T>> T nextEnum(Enum<T> tEnum) {
+        Class<T> tClass = tEnum.getDeclaringClass();
+        T[] values = tClass.getEnumConstants();
+        return values[(tEnum.ordinal()+1) % values.length];
+    }
+
+}
Index: src/main/java/com/intro/client/util/FileUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/FileUtil.java b/src/main/java/com/intro/client/util/FileUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/FileUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,19 @@
+package com.intro.client.util;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.resources.ResourceLocation;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+public class FileUtil {
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+    public static InputStream getResourceLocationStream(ResourceLocation location) throws IOException {
+
+        return mc.getResourceManager().getResource(location).getInputStream();
+    }
+
+
+}
Index: src/main/java/com/intro/client/util/MathUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/MathUtil.java b/src/main/java/com/intro/client/util/MathUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/MathUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,9 @@
+package com.intro.client.util;
+
+public class MathUtil {
+
+    public static boolean isPositionWithinBounds(int x, int y, int posX, int posY, int width, int height) {
+        return x > posX && x < posX + width && y > posY && y < posY + height;
+    }
+
+}
Index: src/main/java/com/intro/client/util/OptionUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/OptionUtil.java b/src/main/java/com/intro/client/util/OptionUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/OptionUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,156 @@
+package com.intro.client.util;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonSyntaxException;
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.OptionDeserializer;
+import com.intro.common.config.OptionSerializer;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.Option;
+import net.minecraftforge.fml.loading.FMLPaths;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.lang.reflect.Modifier;
+import java.nio.file.Paths;
+import java.util.Scanner;
+
+
+/**
+ * <p>This class contains the functions to load a config file into an {@link com.intro.common.config.Options} object</p>
+ * @since 1.0
+ * @author Intro
+ */
+public class OptionUtil {
+
+    public static final Logger LOGGER = LogManager.getLogger();
+
+    public static final Options Options = OsmiumClient.options;
+
+    private static final Gson GSON = new GsonBuilder()
+            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+            .setPrettyPrinting()
+            .excludeFieldsWithModifiers(Modifier.PRIVATE)
+            .registerTypeAdapter(Option.class, new OptionSerializer())
+            .registerTypeAdapter(Option.class, new OptionDeserializer())
+            .create();
+
+    /**
+     * <p>Loads a {@link Options} object from a config file</p>
+     * @param path The path of the config file
+     */
+    public static void loadConfig(String path) {
+        try {
+            File file = Paths.get(path).toFile();
+            StringBuilder builder = new StringBuilder();
+
+            boolean createdFile = file.createNewFile();
+
+            Scanner reader = new Scanner(file);
+
+            while(reader.hasNextLine()) {
+                builder.append(reader.nextLine());
+            }
+
+            reader.close();
+            if(createdFile || !isJSONValid(builder.toString())) {
+                LOGGER.log(Level.WARN, "Config file either didn't exist or is corrupted, creating new one using default settings.");
+                Options o = new Options();
+                o.init();
+                save();
+                return;
+            }
+            Option[] arr = GSON.fromJson(builder.toString(), Option[].class);
+            OsmiumClient.options.setDefaults();
+            if(arr.length != 0) {
+                for(Option o : arr)  {
+                    OsmiumClient.options.put(o.identifier, o);
+                }
+            }
+        } catch (Exception e) {
+            LOGGER.warn("Error in loading osmium config, resetting config to avoid crash!");
+            resetOptionsFile();
+            com.intro.common.config.Options options = new Options();
+            options.init();
+
+        }
+    }
+
+    public static void resetOptionsFile() {
+        File file = Paths.get(FMLPaths.CONFIGDIR.get().resolve("osmium-options.json").toString()).toFile();
+        boolean deleted = file.delete();
+        if(!deleted) {
+            LOGGER.error("Error in resetting osmium config file. If this issue persists file an issue report at https://github.com/Intro-Dev/Osmium/issues");
+        }
+    }
+
+    /**
+     * <p>Saves the current {@link Options} object in the {@link OsmiumClient} class</p>
+     * @param path The path of the config file
+     */
+    public static void saveConfig(String path) {
+        try {
+            File file = Paths.get(path).toFile();
+            if(file.createNewFile()) {
+                System.out.println("Couldn't find already existing config file, creating new one.");
+                LOGGER.log(Level.ALL, "Couldn't find already existing config file, creating new one.");
+            }
+            FileWriter writer = new FileWriter(file);
+            Option[] arr = OsmiumClient.options.getOptions().values().toArray(new Option[0]);
+            writer.write(GSON.toJson(arr));
+            writer.close();
+        } catch (Exception e) {
+            LOGGER.warn("Error in saving osmium config!");
+        }
+    }
+
+    /**
+     * <p>A method to quickly save to the default config file</p>
+     */
+    public static void save() {
+        setNormalOptions();
+        saveConfig(FMLPaths.CONFIGDIR.get().resolve("osmium-options.json").toString());
+    }
+
+    /**
+     * <p>Sets the options back to their player set values</p>
+     */
+    public static void setNormalOptions() {
+        for(Option option : OsmiumClient.options.getOverwrittenOptions().values()) {
+            if(option != null) {
+                OsmiumClient.options.put(option.identifier, option);
+            } else {
+                LOGGER.log(Level.ERROR, "Null option!");
+            }
+        }
+        OsmiumClient.options.clearOverwrittenOptions();
+    }
+
+    /**
+     * <p>A method to quickly load from the default config file</p>
+     */
+    public static void load() {
+        OptionUtil.loadConfig(FMLPaths.CONFIGDIR.get().resolve("osmium-options.json").toString());
+    }
+
+
+    /**
+     * <p>Checks if a string is valid JSON</p>
+     */
+    public static boolean isJSONValid(String jsonInString) {
+        try {
+            GSON.fromJson(jsonInString, Object.class);
+            return true;
+        } catch(JsonSyntaxException e) {
+            return false;
+        }
+    }
+
+
+}
+
Index: src/main/java/com/intro/client/util/RenderUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/RenderUtil.java b/src/main/java/com/intro/client/util/RenderUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/RenderUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,241 @@
+package com.intro.client.util;
+
+import com.intro.client.render.color.Color;
+import com.intro.common.mixin.client.FontInvoker;
+import com.mojang.blaze3d.font.GlyphInfo;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.math.Matrix4f;
+import net.minecraft.client.gui.Font;
+import net.minecraft.client.gui.font.FontSet;
+import net.minecraft.client.gui.font.glyphs.BakedGlyph;
+import net.minecraft.client.gui.font.glyphs.EmptyGlyph;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.util.FormattedCharSequence;
+
+import java.util.Objects;
+
+public class RenderUtil {
+
+    private static InternalTextRenderer textRenderer;
+
+    public static void positionAccurateScale(PoseStack stack, float scale, int x, int y, int width, int height) {
+        stack.translate((x + (width / 2f)), (y + (height / 2f)), 0);
+        stack.scale(scale, scale, 0);
+        stack.translate(-(x + (width / 2f)), -(y + (height / 2f)), 0);
+    }
+
+    public static void positionAccurateScale3d(PoseStack stack, float scale, int x, int y, int z, int width, int height, int depth) {
+        stack.translate((x + (width / 2f)), (y + (height / 2f)), (z + (depth / 2f)));
+        stack.scale(scale, scale, scale);
+        stack.translate(-(x + (width / 2f)), -(y + (height / 2f)), -(z + (depth / 2f)));
+    }
+
+    public static void positionAccurateScale3d(PoseStack stack, float scale, double x, double y, double z) {
+        stack.translate(x, y, z);
+        stack.scale(scale, scale, scale);
+        stack.translate(-x, -y, -z);
+    }
+
+    public static void positionAccurateScale3d(PoseStack stack, float scale, double x, double y, double z, double x2, double y2, double z2) {
+        if(x2 > x) {
+            double tmp = x;
+            x = x2;
+            x2 = tmp;
+        }
+        if(y2 > y) {
+            double tmp = y;
+            y = y2;
+            y2 = tmp;
+        }
+        if(z2 > z) {
+            double tmp = z;
+            z = z2;
+            z2 = tmp;
+        }
+
+        stack.translate(x + ((x - x2) / 2f), y + ((y - y2) / 2f), z + ((z - z2) / 2f));
+        stack.scale(scale, scale, scale);
+        stack.translate(-(x + ((x - x2) / 2f)), -(y + ((y - y2) / 2f)), -(z + ((z - z2) / 2f)));
+    }
+
+    public static void addChainedFilledBoxVertices(PoseStack stack, VertexConsumer vertexConsumer, float x, float y, float z, float x1, float y1, float z1, float x2, float y2, float z2, float r, float g, float b, float a) {
+        Matrix4f matrix4f = stack.last().pose();
+        x1 += x;
+        x2 += x;
+        y1 += y;
+        y2 += y;
+        z1 += z;
+        z2 += z;
+
+        vertexConsumer.vertex(matrix4f, x1, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y1, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x1, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z1).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z2).color(r, g, b, a).endVertex();
+        vertexConsumer.vertex(matrix4f, x2, y2, z2).color(r, g, b, a).endVertex();
+    }
+
+
+    public static void renderScaledText(PoseStack stack, Font font, Component text, int x, int y, int color, float scale) {
+        stack.pushPose();
+        int textWidth = font.width(text);
+        int textHeight = font.lineHeight;
+        positionAccurateScale(stack, scale, x, y, textWidth, textHeight);
+        font.drawShadow(stack, text, x, y, color);
+        stack.popPose();
+    }
+
+    public static void renderScaledText(PoseStack stack, Font font, String text, int x, int y, int color, float scale) {
+        stack.pushPose();
+        int textWidth = font.width(text);
+        int textHeight = font.lineHeight;
+        positionAccurateScale(stack, scale, x, y, textWidth, textHeight);
+        font.drawShadow(stack, text, x, y, color);
+        stack.popPose();
+    }
+
+    public static void renderCenteredScaledText(PoseStack stack, Font font, Component text, int x, int y, int color, float scale) {
+        renderScaledText(stack, font, text, (x - font.width(text) / 2), y, color, scale);
+    }
+
+    public static void renderCenteredScaledText(PoseStack stack, Font font, String text, int x, int y, int color, float scale) {
+        renderScaledText(stack, font, text, (x - font.width(text) / 2), y, color, scale);
+    }
+
+    public static void beginTextBatch(Font font, MultiBufferSource buffers, Font.DisplayMode displayMode) {
+        textRenderer = new InternalTextRenderer(font, buffers, displayMode);
+    }
+
+    public static void renderShadowedTextInBatch(PoseStack stack, String text, int x, int y, int color) {
+        FormattedCharSequence sequence = new TextComponent(text).getVisualOrderText();
+        drawInternal(stack, sequence, x, y, color, 15728880, true);
+    }
+
+    private static void drawInternal(PoseStack stack, FormattedCharSequence text, int x, int y, int color, int light, boolean shadowed) {
+        color = adjustColorForDrawCall(color);
+        textRenderer.addTextToDrawCall(stack, text, x, y, shadowed, color, light);
+    }
+
+    private static int adjustColorForDrawCall(int c) {
+        return (c & -67108864) == 0 ? c | -16777216 : c;
+    }
+
+    public static Vector2d adjustCordsForSpatialScale(int x, int y, int scaleX, int scaleY, int scale) {
+        x += scaleX;
+        y += scaleY;
+        x *= scale;
+        y *= scale;
+        x -= scaleX;
+        y -= scaleY;
+        return new Vector2d(x, y);
+    }
+
+
+
+    public static void drawTextBatch() {
+        textRenderer.submitDrawCall();
+    }
+
+
+    /**
+     * <p>Right now this kinda works</p>
+     * <p>All render parameters are set, but it only renders black boxes in place of characters</p>
+     * <p>Will finish later</p>
+     */
+    private static class InternalTextRenderer {
+
+        private final Font font;
+        private final MultiBufferSource buffers;
+        private final Font.DisplayMode displayMode;
+
+        private RenderType textRenderType;
+
+        public InternalTextRenderer(Font font, MultiBufferSource buffers, Font.DisplayMode displayMode) {
+            this.font = font;
+            this.buffers = buffers;
+            this.displayMode = displayMode;
+        }
+
+        public void addTextToDrawCall(PoseStack stack, FormattedCharSequence text, int x, int y, boolean shadowed, int textColor, int light) {
+            var ref = new Object() {
+                int xOffset = 0;
+            };
+
+            text.accept((l, style, charCode) -> {
+
+                FontSet fontSet = ((FontInvoker) font).invokeGetFontSet(style.getFont());
+                Color color;
+
+                if(style.getColor() != null) {
+                    color = new Color(Objects.requireNonNull(style.getColor()).getValue());
+                } else {
+                    color = new Color(textColor);
+                }
+
+                boolean bold = style.isBold();
+                float brightnessMultiplier = shadowed ? 0.25F : 1.0F;
+                color.multiply(brightnessMultiplier);
+
+                GlyphInfo glyphInfo = fontSet.getGlyphInfo(charCode);
+                BakedGlyph bakedGlyph = style.isObfuscated() && charCode != 32 ? fontSet.getRandomGlyph(glyphInfo) : fontSet.getGlyph(charCode);
+                this.textRenderType = bakedGlyph.renderType(this.displayMode);
+
+                if(!(bakedGlyph instanceof EmptyGlyph)) {
+                    float boldOffset = bold ? glyphInfo.getBoldOffset() : 0.0F;
+                    float shadowOffset = shadowed ? glyphInfo.getShadowOffset() : 0.0F;
+                    VertexConsumer vertexConsumer = this.buffers.getBuffer(bakedGlyph.renderType(this.displayMode));
+                    ((FontInvoker) font).invokeRenderChar(bakedGlyph, bold, style.isItalic(), boldOffset, x + shadowOffset + ref.xOffset, y + shadowOffset, stack.last().pose(), vertexConsumer, color.getFloatR(), color.getFloatG(), color.getFloatB(), color.getFloatA(), light);
+                }
+
+                ref.xOffset += glyphInfo.getAdvance(bold);
+                return true;
+            });
+        }
+
+        public void submitDrawCall() {
+            BufferBuilder builder = (BufferBuilder) this.buffers.getBuffer(textRenderType);
+            builder.end();
+            RenderSystem.setShader(GameRenderer::getRendertypeTextShader);
+            BufferUploader.end(builder);
+        }
+
+
+
+    }
+
+
+
+
+}
Index: src/main/java/com/intro/client/util/RgbColorGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/RgbColorGenerator.java b/src/main/java/com/intro/client/util/RgbColorGenerator.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/RgbColorGenerator.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,66 @@
+package com.intro.client.util;
+
+import com.intro.client.render.color.Color;
+
+public class RgbColorGenerator {
+
+    private int startColor;
+    private int endColor;
+
+    private GeneratorState startColorState;
+    private GeneratorState endColorState;
+
+
+    public RgbColorGenerator(int alpha) {
+        startColor = ColorUtil.generateRandomColor(alpha).getInt();
+        endColor = ColorUtil.generateRandomColor(alpha).getInt();
+        startColorState = GeneratorState.INCREASING;
+        endColorState = GeneratorState.INCREASING;
+    }
+
+    public void setAlpha(int alpha) {
+        Color c1 = new Color(startColor);
+        Color c2 = new Color(endColor);
+        c1.setA(alpha);
+        c2.setA(alpha);
+        startColor = c1.getInt();
+        endColor = c2.getInt();
+    }
+
+    public void tick() {
+        if(Color.toRGBAB(startColor) >= 255) {
+            startColorState = GeneratorState.DECREASING;
+        } else if(Color.toRGBAB(startColor) <= 1) {
+            startColorState = GeneratorState.INCREASING;
+        }
+        if(Color.toRGBAB(endColor) >= 255) {
+            endColorState = GeneratorState.DECREASING;
+        } else if(Color.toRGBAB(endColor) <= 1) {
+            endColorState = GeneratorState.INCREASING;
+        }
+
+        switch (startColorState) {
+            case INCREASING -> startColor = ColorUtil.nextColor(startColor);
+            case DECREASING -> startColor = ColorUtil.previousColor(startColor);
+        }
+
+        switch (endColorState) {
+            case INCREASING -> endColor = ColorUtil.nextColor(endColor);
+            case DECREASING -> endColor = ColorUtil.previousColor(endColor);
+        }
+    }
+
+    public int getStartColor() {
+        return startColor;
+    }
+
+    public int getEndColor() {
+        return endColor;
+    }
+
+    private enum GeneratorState {
+        INCREASING,
+        DECREASING
+    }
+
+}
Index: src/main/java/com/intro/client/util/TextureUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/TextureUtil.java b/src/main/java/com/intro/client/util/TextureUtil.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/TextureUtil.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,74 @@
+package com.intro.client.util;
+
+import com.intro.common.mixin.client.ResourceTextureAccessor;
+import com.intro.common.mixin.client.ResourceTextureSubclassAccessor;
+import com.mojang.blaze3d.platform.NativeImage;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.texture.SimpleTexture;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.packs.resources.ResourceManager;
+
+public class TextureUtil {
+
+    private static final Minecraft mc = Minecraft.getInstance();
+
+
+    public static NativeImage getImageAtLocation(ResourceLocation location) {
+        NativeImage TEXTURE;
+        mc.getTextureManager().bindForSetup(location);
+        SimpleTexture texture = (SimpleTexture) mc.getTextureManager().getTexture(location);
+        TEXTURE = getNativeImage(mc.getResourceManager(), texture);
+        return TEXTURE;
+    }
+
+    private static NativeImage getNativeImage(ResourceManager manager, SimpleTexture texture) {
+        SimpleTexture.TextureImage textureImage = loadTextureData(manager, texture);
+        return ((ResourceTextureSubclassAccessor) textureImage).getImage();
+    }
+
+    private static SimpleTexture.TextureImage loadTextureData(ResourceManager resourceManager, SimpleTexture texture) {
+        return SimpleTexture.TextureImage.load(resourceManager, ((ResourceTextureAccessor) texture).getLocation());
+    }
+
+    public static NativeImage subImage(NativeImage image, int x, int y, int width, int height) {
+        NativeImage subImage = new NativeImage(NativeImage.Format.RGBA, width, height, false);
+        int subY = 0;
+        for(int i = y; i < y + height; i++) {
+            int subX = 0;
+            for(int j = x; j < x + width; j++) {
+                subImage.setPixelRGBA(subX, subY, image.getPixelRGBA(j, i));
+                subX++;
+            }
+            subY++;
+        }
+        return subImage;
+    }
+
+    /**
+     * Stitches two NativeImages of equal height together on the X-Axis
+     * @param image1 An image with the same height as image2
+     * @param image2 An image with the same height as image1
+     * @return The stitched image
+     */
+    public static NativeImage stitchImagesOnX(NativeImage image1, NativeImage image2) {
+        NativeImage stitchedImage = new NativeImage(image1.getWidth() + image2.getWidth(), image1.getHeight(), false);
+
+        // fill data for image1
+        for(int y = 0; y < image1.getHeight(); y++) {
+            for(int x = 0; x < image1.getWidth(); x++) {
+                stitchedImage.setPixelRGBA(x, y, image1.getPixelRGBA(x, y));
+            }
+        }
+
+        // fill data for image 2
+        for(int y = 0; y < image2.getHeight(); y++) {
+            for(int x = image1.getWidth(); x < image1.getWidth() + image2.getWidth(); x++) {
+                stitchedImage.setPixelRGBA(x, y, image2.getPixelRGBA(x - image1.getWidth(), y));
+            }
+        }
+
+        return stitchedImage;
+
+    }
+
+}
Index: src/main/java/com/intro/client/util/Vector2d.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/client/util/Vector2d.java b/src/main/java/com/intro/client/util/Vector2d.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/client/util/Vector2d.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,31 @@
+package com.intro.client.util;
+
+public class Vector2d {
+
+    public double getX() {
+        return x;
+    }
+
+    public void setX(double x) {
+        this.x = x;
+    }
+
+    public double getY() {
+        return y;
+    }
+
+    public void setY(double y) {
+        this.y = y;
+    }
+
+    private double x, y;
+
+    public Vector2d(double x, double y) {
+        this.x = x;
+        this.y = y;
+    }
+
+    public String toString() {
+        return x + ", " + y;
+    }
+}
Index: src/main/java/com/intro/common/ModConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/ModConstants.java b/src/main/java/com/intro/common/ModConstants.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/ModConstants.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,12 @@
+package com.intro.common;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ModConstants {
+
+    public static final String UPDATE_STRING = "1.2.3";
+    public static final String MINECRAFT_VERSION_STRING = "1.17.1";
+    public static final String FULL_VERSION_STRING = UPDATE_STRING + "-" + MINECRAFT_VERSION_STRING;
+    public static final ArrayList<String> DEVELOPER_UUIDS = new ArrayList<>(List.of(new String[]{"fd1afc95-f76f-4ae6-bd86-ac04021b4410"}));
+}
Index: src/main/java/com/intro/common/api/PlayerProperties.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/api/PlayerProperties.java b/src/main/java/com/intro/common/api/PlayerProperties.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/api/PlayerProperties.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,11 @@
+package com.intro.common.api;
+
+import net.minecraft.network.FriendlyByteBuf;
+
+public class PlayerProperties {
+
+    public boolean runningOsmium;
+
+    public FriendlyByteBuf capeDataBuffer;
+
+}
Index: src/main/java/com/intro/common/config/OptionDeserializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/OptionDeserializer.java b/src/main/java/com/intro/common/config/OptionDeserializer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/OptionDeserializer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,52 @@
+package com.intro.common.config;
+
+import com.google.gson.*;
+import com.intro.client.render.color.Color;
+import com.intro.client.util.EnumUtil;
+import com.intro.common.config.options.*;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.lang.reflect.Type;
+
+public class OptionDeserializer implements JsonDeserializer<Option> {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    @Override
+    public Option deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
+        JsonObject src = json.getAsJsonObject();
+        ClassLoader cl = OptionDeserializer.class.getClassLoader();
+        if(src.get("Type").getAsString().equals("BooleanOption")) {
+            return new BooleanOption( src.get("Identifier").getAsString(), src.get("Value").getAsBoolean());
+        }
+        if(src.get("Type").getAsString().equals("EnumOption")) {
+            try {
+                // Loads enum, gets its value from the config file, and creates an EnumOption instance
+                // throws an error according to intelij, but does it crash? no.
+                return new EnumOption( src.get("Identifier").getAsString(), EnumUtil.loadEnumState(cl, src.get("EnumType").getAsString(), src.get("EnumValue").getAsString()));
+            } catch (Exception e) {
+                LOGGER.warn("Enum deserialization error!");
+            }
+        }
+        if(src.get("Type").getAsString().equals("ElementPositionOption")) {
+            return new ElementPositionOption( src.get("Identifier").getAsString(), src.get("x").getAsDouble(), src.get("y").getAsDouble(), src.get("scale").getAsFloat());
+        }
+        if(src.get("Type").getAsString().equals("DoubleOption")) {
+            return new DoubleOption( src.get("Identifier").getAsString(), src.get("Value").getAsDouble());
+        }
+        if(src.get("Type").getAsString().equals("ColorOption")) {
+            return new ColorOption(src.get("Identifier").getAsString(), new Color(src.get("R").getAsInt(), src.get("G").getAsInt(), src.get("B").getAsInt(), src.get("A").getAsInt()));
+        }
+        // for legacy Vector2d options
+        if(src.get("Type").getAsString().equals("Vector2Option")) {
+            return new ElementPositionOption( src.get("Identifier").getAsString(), src.get("x").getAsDouble(), src.get("y").getAsDouble());
+        }
+        if(src.get("Type").getAsString().equals("StringOption")) {
+            return new StringOption(src.get("Identifier").getAsString(), src.get("Value").getAsString());
+        }
+        return null;
+    }
+
+
+}
Index: src/main/java/com/intro/common/config/OptionSerializer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/OptionSerializer.java b/src/main/java/com/intro/common/config/OptionSerializer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/OptionSerializer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,77 @@
+package com.intro.common.config;
+
+import com.google.gson.*;
+import com.intro.common.config.options.*;
+
+import java.lang.reflect.Type;
+
+public class OptionSerializer implements JsonSerializer<Option> {
+
+
+
+
+    public Option deserialize(JsonArray src) {
+
+        return null;
+    }
+
+    @Override
+    public JsonElement serialize(Option src, Type typeOfSrc, JsonSerializationContext context) {
+        if(src.type.equals("BooleanOption")) {
+            BooleanOption option = (BooleanOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("Value", option.variable);
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+        if(src.type.equals("EnumOption")) {
+            EnumOption option = (EnumOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("EnumValue", option.variable.toString());
+            returnObject.addProperty("EnumType", option.variable.getClass().getTypeName());
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+        if(src.type.equals("ElementPositionOption")) {
+            ElementPositionOption option = (ElementPositionOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("x", option.elementPosition.x);
+            returnObject.addProperty("y", option.elementPosition.y);
+            returnObject.addProperty("scale", option.elementPosition.scale);
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+        if(src.type.equals("DoubleOption")) {
+            DoubleOption option = (DoubleOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("Value", option.variable);
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+        if(src.type.equals("ColorOption")) {
+            ColorOption option = (ColorOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("R", option.color.getR());
+            returnObject.addProperty("G", option.color.getFloatG());
+            returnObject.addProperty("B", option.color.getB());
+            returnObject.addProperty("A", option.color.getA());
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+        if(src.type.equals("StringOption")) {
+            StringOption option = (StringOption) src;
+            JsonObject returnObject = new JsonObject();
+            returnObject.addProperty("Identifier", option.identifier);
+            returnObject.addProperty("Value", option.variable);
+            returnObject.addProperty("Type", option.type);
+            return returnObject;
+        }
+
+        return null;
+    }
+}
Index: src/main/java/com/intro/common/config/Options.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/Options.java b/src/main/java/com/intro/common/config/Options.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/Options.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,176 @@
+package com.intro.common.config;
+
+import com.intro.client.render.color.Color;
+import com.intro.client.render.color.Colors;
+import com.intro.common.config.options.*;
+
+import java.util.HashMap;
+
+/**
+ * The Options class stores all OsmiumClient options.
+ * All options have a String identifier, which is used to get the option from the HashMap
+ * On startup, default options are set first, and are then put to the HashMap from an Option array loaded from a json file
+ *
+ * @since 1.0
+ * @author Intro
+ */
+public class Options {
+
+    /**
+     * Cache of all options
+     */
+    private final HashMap<String, Option> options = new HashMap<>();
+
+    private final HashMap<String, Option> overwrittenOptions = new HashMap<>();
+
+    public HashMap<String, Option> getOptions() {
+        return options;
+    }
+
+    public void putOverwrittenOption(String key, Option value) {
+        overwrittenOptions.put(key, value);
+    }
+
+    public HashMap<String, Option> getOverwrittenOptions() {
+        return overwrittenOptions;
+    }
+
+    public Option getOverwrittenOption(String key) {
+        return overwrittenOptions.get(key);
+    }
+
+    public void clearOverwrittenOptions() {
+        overwrittenOptions.clear();
+    }
+
+    public Option get(String identifier) {
+        return options.get(identifier);
+    }
+
+    public BooleanOption getBooleanOption(String identifier) {
+        return (BooleanOption) get(identifier);
+    }
+
+    public EnumOption getEnumOption(String identifier) {
+        return (EnumOption) get(identifier);
+    }
+
+    public DoubleOption getDoubleOption(String identifier) {
+        return (DoubleOption) get(identifier);
+    }
+
+    public ElementPositionOption getElementPositionOption(String identifier) {
+        return (ElementPositionOption) get(identifier);
+    }
+
+    public ColorOption getColorOption(String identifier) {
+        return (ColorOption) get(identifier);
+    }
+
+
+    public void put(String identifier, Option option) {
+        options.put(identifier, option);
+    }
+
+    public StringOption getStringOption(String identifier) {
+        return (StringOption) get(identifier);
+    }
+
+
+
+
+
+    public static final String ToggleSprintEnabled = "ToggleSprintEnabled";
+    public static final String FullbrightEnabled = "FullbrightEnabled";
+    public static final String HurtbobbingEnabled = "HurtBobbingEnabled";
+    public static final String SneakMode = "SneakMode";
+    public static final String NoRainEnabled = "NoRainEnabled";
+    public static final String FpsEnabled = "FpsEnabled";
+    public static final String CustomCapeMode = "CustomCapeMode";
+    public static final String NoFireEnabled = "NoFireEnabled";
+    public static final String ToggleSprintPosition = "ToggleSprintPosition";
+    public static final String FpsDisplayPosition = "FpsDisplayPosition";
+    public static final String ToggleSneakEnabled = "ToggleSneakEnabled";
+    public static final String FireworksDisabled = "FireworksDisabled";
+    public static final String FlyBoostAmount = "FlyBoostAmount";
+    public static final String FlyBoostEnabled = "FlyBoostEnabled";
+    public static final String DecreaseNetherParticles = "DecreaseNetherParticles";
+    public static final String BlockOutlineMode = "CustomBlockOutline";
+    public static final String BlockOutlineColor = "BlockOutlineColor";
+    public static final String BlockOutlineAlpha = "BlockOutlineAlpha";
+    public static final String StatusEffectDisplayMode = "StatusEffectDisplayMode";
+    public static final String StatusEffectDisplayPosition = "StatusEffectDisplayPosition";
+    public static final String MaxStatusEffectsDisplayed = "MaxStatusEffectsDisplayed";
+    public static final String StatusEffectDisplayScale = "StatusEffectDisplayScale";
+    public static final String ArmorDisplayEnabled = "ArmorDisplayEnabled";
+    public static final String ArmorDisplayPosition = "ArmorDisplayPosition";
+    public static final String PingDisplayEnabled = "PingDisplayEnabled";
+    public static final String PingDisplayPosition = "PingDisplayPosition";
+    public static final String CpsDisplayEnabled = "CpsDisplayEnabled";
+    public static final String CpsDisplayPosition = "CpsDisplayPosition";
+    public static final String KeystrokesColor = "KeystrokesColor";
+    public static final String KeystrokesRgb = "KeystrokesRgb";
+    public static final String KeystrokesPosition = "KeystrokesPosition";
+    public static final String KeystrokesEnabled = "KeystrokesEnabled";
+    public static final String KeystrokesAlpha = "KeystrokesAlpha";
+    public static final String AnimateCapes = "AnimateCapes";
+    public static final String ShowOtherPlayersCapes = "ShowOtherPlayersCapes";
+    public static final String SetCape = "SetCape";
+
+
+
+
+    public void init() {
+        // Default inits
+        // Changed to preferences when config is loaded
+        this.setDefaults();
+    }
+
+
+
+    /**
+     * Assigns the default settings to the option variables.
+     */
+    public void setDefaults() {
+        put(ToggleSprintEnabled, new BooleanOption(ToggleSprintEnabled, false));
+        put(FullbrightEnabled, new BooleanOption(FullbrightEnabled, false));
+        put(HurtbobbingEnabled, new BooleanOption(HurtbobbingEnabled, false));
+        put(SneakMode, new EnumOption(SneakMode, com.intro.common.config.options.SneakMode.VANILLA));
+        put(NoRainEnabled, new BooleanOption(NoRainEnabled, false));
+        put(FpsEnabled, new BooleanOption(FpsEnabled, false));
+        put(CustomCapeMode, new EnumOption(CustomCapeMode, CapeRenderingMode.DISABLED));
+        put(NoFireEnabled, new BooleanOption(NoFireEnabled, false));
+        put(ToggleSprintPosition, new ElementPositionOption(ToggleSprintPosition, 5, 5));
+        put(FpsDisplayPosition, new ElementPositionOption(FpsDisplayPosition, 5, 5, 1));
+        put(ToggleSneakEnabled, new BooleanOption(ToggleSneakEnabled, false));
+        put(FireworksDisabled, new BooleanOption(FireworksDisabled, false));
+        put(FlyBoostAmount, new DoubleOption(FlyBoostAmount, 1d));
+        put(FlyBoostEnabled, new BooleanOption(FlyBoostEnabled, false));
+        put(DecreaseNetherParticles, new BooleanOption(DecreaseNetherParticles, false));
+        put(BlockOutlineMode, new EnumOption(BlockOutlineMode, com.intro.common.config.options.BlockOutlineMode.VANILLA));
+        put(BlockOutlineColor, new ColorOption(BlockOutlineColor, Colors.TRANSPARENT.getColor()));
+        put(BlockOutlineAlpha, new DoubleOption(BlockOutlineAlpha, 1d));
+        put(StatusEffectDisplayMode, new EnumOption(StatusEffectDisplayMode, com.intro.common.config.options.StatusEffectDisplayMode.VANILLA));
+        put(StatusEffectDisplayPosition, new ElementPositionOption(StatusEffectDisplayPosition, 5, 5));
+        put(MaxStatusEffectsDisplayed, new DoubleOption(MaxStatusEffectsDisplayed, 1d));
+        put(StatusEffectDisplayScale, new DoubleOption(StatusEffectDisplayScale, 1d));
+        put(ArmorDisplayEnabled, new BooleanOption(ArmorDisplayEnabled, false));
+        put(ArmorDisplayPosition, new ElementPositionOption(ArmorDisplayPosition, 5, 5));
+        put(PingDisplayEnabled, new BooleanOption(PingDisplayEnabled, false));
+        put(CpsDisplayEnabled, new BooleanOption(CpsDisplayEnabled, false));
+        put(CpsDisplayPosition, new ElementPositionOption(CpsDisplayPosition, 5, 5));
+        put(PingDisplayPosition, new ElementPositionOption(PingDisplayPosition, 5, 5));
+        put(KeystrokesColor, new ColorOption(KeystrokesColor, new Color(0.1f, 0.1f, 0.1f, 0.2f)));
+        put(KeystrokesRgb, new BooleanOption(KeystrokesRgb, false));
+        put(KeystrokesPosition, new ElementPositionOption(KeystrokesPosition, 5, 5, 1));
+        put(KeystrokesEnabled, new BooleanOption(KeystrokesEnabled, false));
+        put(KeystrokesAlpha, new DoubleOption(KeystrokesAlpha, 0.2));
+        put(AnimateCapes, new BooleanOption(AnimateCapes, true));
+        put(ShowOtherPlayersCapes, new BooleanOption(ShowOtherPlayersCapes, true));
+        put(SetCape, new StringOption(SetCape, ""));
+    }
+
+    public HashMap<String, Option> getValues() {
+        return this.options;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/intro/common/config/options/BlockOutlineMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/BlockOutlineMode.java b/src/main/java/com/intro/common/config/options/BlockOutlineMode.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/BlockOutlineMode.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,16 @@
+package com.intro.common.config.options;
+
+public enum BlockOutlineMode {
+    VANILLA,
+    LINES,
+    QUADS;
+
+    // TODO work on quads overlay for the next update
+
+
+    private static final BlockOutlineMode[] vals = values();
+
+    public BlockOutlineMode next() {
+        return vals[(this.ordinal()+1) % vals.length];
+    }
+}
Index: src/main/java/com/intro/common/config/options/BooleanOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/BooleanOption.java b/src/main/java/com/intro/common/config/options/BooleanOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/BooleanOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,28 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+
+public class BooleanOption extends Option {
+
+    public boolean variable;
+
+    public final boolean def;
+
+    public BooleanOption(String identifier, boolean variable) {
+        super(identifier, "BooleanOption");
+        this.variable = variable;
+        this.def = variable;
+    }
+
+    @Override
+    public BooleanOption get() {
+        return (BooleanOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+
+
+}
Index: src/main/java/com/intro/common/config/options/CapeRenderingMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/CapeRenderingMode.java b/src/main/java/com/intro/common/config/options/CapeRenderingMode.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/CapeRenderingMode.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.common.config.options;
+
+public enum CapeRenderingMode {
+    DISABLED,
+    OPTIFINE,
+    ALL;
+
+    private static final CapeRenderingMode[] vals = values();
+
+    public CapeRenderingMode next() {
+        return vals[(this.ordinal()+1) % vals.length];
+    }
+}
Index: src/main/java/com/intro/common/config/options/ColorOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/ColorOption.java b/src/main/java/com/intro/common/config/options/ColorOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/ColorOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,29 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+
+public class ColorOption extends Option {
+
+    public Color color;
+
+    public final Color def;
+
+    public ColorOption(String identifier, Color color) {
+        super(identifier, "ColorOption");
+        this.color = color;
+        this.def = color;
+    }
+
+    @Override
+    public ColorOption get() {
+        return (ColorOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+
+
+}
Index: src/main/java/com/intro/common/config/options/DoubleOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/DoubleOption.java b/src/main/java/com/intro/common/config/options/DoubleOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/DoubleOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,28 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+
+public class DoubleOption extends Option {
+
+    public double variable;
+
+    public final double def;
+
+    public DoubleOption(String identifier, double variable) {
+        super(identifier, "DoubleOption");
+        this.variable = variable;
+        this.def = variable;
+    }
+
+    @Override
+    public DoubleOption get() {
+        return (DoubleOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+
+
+}
Index: src/main/java/com/intro/common/config/options/ElementPositionOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/ElementPositionOption.java b/src/main/java/com/intro/common/config/options/ElementPositionOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/ElementPositionOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,36 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.util.ElementPosition;
+
+public class ElementPositionOption extends Option {
+
+    public ElementPosition elementPosition;
+
+    public ElementPositionOption(String identifier, double x, double y) {
+        super(identifier, "ElementPositionOption");
+        elementPosition = new ElementPosition((int) x, (int) y, 1f);
+    }
+
+    public ElementPositionOption(String identifier, double x, double y, double scale) {
+        super(identifier, "ElementPositionOption");
+        elementPosition = new ElementPosition((int) x, (int) y, scale);
+    }
+
+    public ElementPositionOption(String identifier, ElementPosition position) {
+        super(identifier, "ElementPositionOption");
+        elementPosition = position;
+    }
+
+    @Override
+    public ElementPositionOption get() {
+        return (ElementPositionOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+
+
+}
Index: src/main/java/com/intro/common/config/options/EnumOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/EnumOption.java b/src/main/java/com/intro/common/config/options/EnumOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/EnumOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,26 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+
+public class EnumOption extends Option {
+
+    public Enum variable;
+
+    public final Enum def;
+
+    public EnumOption(String identifier, Enum option) {
+        super(identifier, "EnumOption");
+        this.variable = option;
+        this.def = variable;
+    }
+
+    @Override
+    public EnumOption get() {
+        return (EnumOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+}
Index: src/main/java/com/intro/common/config/options/Option.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/Option.java b/src/main/java/com/intro/common/config/options/Option.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/Option.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,20 @@
+package com.intro.common.config.options;
+
+public abstract class Option {
+
+    public final String identifier;
+
+    public final String type;
+
+    public Option(String identifier, String type) {
+        this.identifier = identifier;
+        this.type = type;
+    }
+
+    public abstract Option get();
+
+    public abstract void put();
+
+
+
+}
Index: src/main/java/com/intro/common/config/options/SneakMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/SneakMode.java b/src/main/java/com/intro/common/config/options/SneakMode.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/SneakMode.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.common.config.options;
+
+public enum SneakMode {
+    VANILLA,
+    SMOOTH,
+    INSTANT;
+
+    private static final SneakMode[] vals = values();
+
+    public SneakMode next() {
+        return vals[(this.ordinal()+1) % vals.length];
+    }
+}
Index: src/main/java/com/intro/common/config/options/StatusEffectDisplayMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/StatusEffectDisplayMode.java b/src/main/java/com/intro/common/config/options/StatusEffectDisplayMode.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/StatusEffectDisplayMode.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,7 @@
+package com.intro.common.config.options;
+
+public enum StatusEffectDisplayMode {
+    VANILLA,
+    CUSTOM,
+    BOTH
+}
Index: src/main/java/com/intro/common/config/options/StringOption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/config/options/StringOption.java b/src/main/java/com/intro/common/config/options/StringOption.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/config/options/StringOption.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,28 @@
+package com.intro.common.config.options;
+
+import com.intro.client.OsmiumClient;
+
+public class StringOption extends Option {
+
+    public String variable;
+
+    public final String def;
+
+    public StringOption(String identifier, String variable) {
+        super(identifier, "StringOption");
+        this.variable = variable;
+        this.def = variable;
+    }
+
+    @Override
+    public StringOption get() {
+        return (StringOption) OsmiumClient.options.get(this.identifier);
+    }
+
+    @Override
+    public void put() {
+        OsmiumClient.options.put(this.identifier, this);
+    }
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/AbilitiesMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/AbilitiesMixin.java b/src/main/java/com/intro/common/mixin/client/AbilitiesMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/AbilitiesMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,30 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.BooleanOption;
+import com.intro.common.config.options.DoubleOption;
+import net.minecraft.client.Minecraft;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.player.Abilities;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
+
+@Mixin(Abilities.class)
+public class AbilitiesMixin {
+
+    @Shadow public boolean flying;
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    @Inject(method = "getFlyingSpeed", at = @At("HEAD"), cancellable = true)
+    public void getFlyingSpeed(CallbackInfoReturnable<Float> cir) {
+        if(flying && mc.player != null && ((BooleanOption) OsmiumClient.options.get(Options.FlyBoostEnabled)).variable ) {
+            System.out.println((float) ((DoubleOption) OsmiumClient.options.get(Options.FlyBoostAmount)).variable / 40);
+            cir.setReturnValue(Mth.clamp((float) ((DoubleOption) OsmiumClient.options.get(Options.FlyBoostAmount)).variable / 40, 0.05f, 0.5f));
+        }
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/BufferBuilderAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/BufferBuilderAccessor.java b/src/main/java/com/intro/common/mixin/client/BufferBuilderAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/BufferBuilderAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,16 @@
+package com.intro.common.mixin.client;
+
+import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.VertexFormat;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(BufferBuilder.class)
+public interface BufferBuilderAccessor {
+
+    @Accessor
+    public VertexFormat.Mode getMode();
+
+    @Accessor
+    public VertexFormat getFormat();
+}
Index: src/main/java/com/intro/common/mixin/client/CameraMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/CameraMixin.java b/src/main/java/com/intro/common/mixin/client/CameraMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/CameraMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,41 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.SneakMode;
+import net.minecraft.client.Camera;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Entity;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(Camera.class)
+public class CameraMixin {
+
+    @Shadow
+    private Entity entity;
+
+    @Shadow
+    private float eyeHeight;
+
+
+
+
+    @Inject(at = @At("HEAD"), method = "tick")
+    public void changeEyeHeight(CallbackInfo info) {
+        // smooth but no squish
+        if (this.entity != null) {
+            if (OsmiumClient.options.getEnumOption(Options.SneakMode).variable == SneakMode.INSTANT) {
+                this.eyeHeight = this.entity.getEyeHeight();
+            } else if (OsmiumClient.options.getEnumOption(Options.SneakMode).variable == SneakMode.SMOOTH) {
+                this.eyeHeight = (float) Mth.lerp(0.8, this.eyeHeight, this.entity.getEyeHeight());
+            } else {
+                this.eyeHeight += (this.entity.getEyeHeight() - this.eyeHeight) * 0.5F;
+            }
+        }
+    }
+
+}
Index: src/main/java/com/intro/common/mixin/client/CapeLayerMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/CapeLayerMixin.java b/src/main/java/com/intro/common/mixin/client/CapeLayerMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/CapeLayerMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,22 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.render.cape.CosmeticManager;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.entity.layers.CapeLayer;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(CapeLayer.class)
+public class CapeLayerMixin {
+
+    @Inject(method = "render", at = @At("HEAD"), cancellable = true)
+    public void render(PoseStack poseStack, MultiBufferSource multiBufferSource, int i, AbstractClientPlayer abstractClientPlayer, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {
+        if(CosmeticManager.playerCapes.get(abstractClientPlayer.getStringUUID()) != null) {
+            ci.cancel();
+        }
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/ClientLevelMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ClientLevelMixin.java b/src/main/java/com/intro/common/mixin/client/ClientLevelMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ClientLevelMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,41 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.EventAddPlayer;
+import com.intro.client.module.event.EventDirection;
+import com.intro.client.module.event.EventSpawnEntity;
+import com.intro.client.module.event.EventType;
+import net.minecraft.client.multiplayer.ClientLevel;
+import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.world.entity.Entity;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(ClientLevel.class)
+public abstract class ClientLevelMixin {
+
+
+    @Inject(at = @At("HEAD"), method = "addEntity")
+    public void addEntityPre(int id, Entity entity, CallbackInfo info){
+        OsmiumClient.EVENT_BUS.postEvent(new EventSpawnEntity(EventDirection.PRE, entity), EventType.EVENT_SPAWN_ENTITY);
+    }
+
+    @Inject(at = @At("TAIL"), method = "addEntity")
+    public void addEntityPost(int id, Entity entity, CallbackInfo info){
+        OsmiumClient.EVENT_BUS.postEvent(new EventSpawnEntity(EventDirection.POST, entity), EventType.EVENT_SPAWN_ENTITY);
+    }
+
+    @Inject(at = @At("HEAD"), method = "addPlayer")
+    public void addPlayerPre(int id, AbstractClientPlayer player, CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventAddPlayer(player), EventType.EVENT_ADD_PLAYER);
+    }
+
+
+
+
+
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/ClientPacketListenerMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ClientPacketListenerMixin.java b/src/main/java/com/intro/common/mixin/client/ClientPacketListenerMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ClientPacketListenerMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,34 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.*;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.multiplayer.ClientPacketListener;
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.game.ClientboundLoginPacket;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(ClientPacketListener.class)
+public class ClientPacketListenerMixin {
+
+    @Inject(at = @At("RETURN"), method = "handleLogin")
+    public void onGameJoin(ClientboundLoginPacket packet, CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventJoinWorld(packet), EventType.EVENT_JOIN_WORLD);
+        OsmiumClient.EVENT_BUS.postEvent(new EventAddPlayer(Minecraft.getInstance().player), EventType.EVENT_ADD_PLAYER);
+    }
+
+    @Inject(at = @At("HEAD"), method = "handleCustomPayload")
+    public void onCustomPayload(ClientboundCustomPayloadPacket clientboundCustomPayloadPacket, CallbackInfo ci) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventCustomPacket(EventDirection.POST, clientboundCustomPayloadPacket), EventType.EVENT_CUSTOM_PACKET);
+    }
+
+    @Inject(at = @At("HEAD"), method = "handleDisconnect")
+    public void onDisconnect(ClientboundDisconnectPacket p_105008_, CallbackInfo ci) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventDisconnect(EventDirection.POST), EventType.EVENT_DISCONNECT);
+    }
+
+}
Index: src/main/java/com/intro/common/mixin/client/ElytraLayerMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ElytraLayerMixin.java b/src/main/java/com/intro/common/mixin/client/ElytraLayerMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ElytraLayerMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,30 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.render.cape.CosmeticManager;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.model.EntityModel;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.entity.RenderLayerParent;
+import net.minecraft.client.renderer.entity.layers.ElytraLayer;
+import net.minecraft.client.renderer.entity.layers.RenderLayer;
+import net.minecraft.world.entity.LivingEntity;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(ElytraLayer.class)
+public abstract class ElytraLayerMixin<T extends LivingEntity, M extends EntityModel<T>> extends RenderLayer<T, M> {
+
+
+    public ElytraLayerMixin(RenderLayerParent<T, M> renderLayerParent) {
+        super(renderLayerParent);
+    }
+
+    @Inject(method = "render", at = @At("HEAD"), cancellable = true)
+    public void render(PoseStack poseStack, MultiBufferSource multiBufferSource, int i, T livingEntity, float f, float g, float h, float j, float k, float l, CallbackInfo ci) {
+        if(CosmeticManager.playerCapes.get(livingEntity.getStringUUID()) != null) {
+            ci.cancel();
+        }
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/FireworkEntityRendererMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/FireworkEntityRendererMixin.java b/src/main/java/com/intro/common/mixin/client/FireworkEntityRendererMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/FireworkEntityRendererMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,22 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.renderer.MultiBufferSource;
+import net.minecraft.client.renderer.entity.FireworkEntityRenderer;
+import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(FireworkEntityRenderer.class)
+public class FireworkEntityRendererMixin {
+    @Inject(method = "render", at = @At("HEAD"), cancellable = true)
+    public void render(FireworkRocketEntity fireworkRocketEntity, float f, float g, PoseStack matrixStack, MultiBufferSource multiBuffer, int i, CallbackInfo ci) {
+        if(OsmiumClient.options.getBooleanOption(Options.FireworksDisabled).variable) {
+            ci.cancel();
+        }
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/FontInvoker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/FontInvoker.java b/src/main/java/com/intro/common/mixin/client/FontInvoker.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/FontInvoker.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,21 @@
+package com.intro.common.mixin.client;
+
+import com.mojang.blaze3d.vertex.VertexConsumer;
+import com.mojang.math.Matrix4f;
+import net.minecraft.client.gui.Font;
+import net.minecraft.client.gui.font.FontSet;
+import net.minecraft.client.gui.font.glyphs.BakedGlyph;
+import net.minecraft.resources.ResourceLocation;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Invoker;
+
+@Mixin(Font.class)
+public interface FontInvoker {
+
+    @Invoker
+    public FontSet invokeGetFontSet(ResourceLocation resourceLocation);
+
+    @Invoker
+    public void invokeRenderChar(BakedGlyph bakedGlyph, boolean bl, boolean bl2, float f, float g, float h, Matrix4f matrix4f, VertexConsumer vertexConsumer, float i, float j, float k, float l, int m);
+
+}
Index: src/main/java/com/intro/common/mixin/client/GameRendererMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/GameRendererMixin.java b/src/main/java/com/intro/common/mixin/client/GameRendererMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/GameRendererMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,29 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.RenderManager;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.renderer.GameRenderer;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(GameRenderer.class)
+public class GameRendererMixin {
+
+    @Inject(at = @At("HEAD"), method = "bobHurt", cancellable = true)
+    public void bobViewWhenHurt(PoseStack arg, float f, CallbackInfo info) {
+        if(OsmiumClient.options.getBooleanOption(Options.HurtbobbingEnabled).variable)
+            info.cancel();
+    }
+
+    @Inject(at = @At(value = "HEAD"), method = "renderLevel")
+    public void renderWorld(float partialTicks, long finishTimeNano, PoseStack matrixStack, CallbackInfo ci) {
+        RenderManager.postRenderEvents(partialTicks, finishTimeNano, matrixStack);
+    }
+
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/GuiMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/GuiMixin.java b/src/main/java/com/intro/common/mixin/client/GuiMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/GuiMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,27 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.RenderManager;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.StatusEffectDisplayMode;
+import com.mojang.blaze3d.vertex.PoseStack;
+import net.minecraft.client.gui.Gui;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(Gui.class)
+
+public class GuiMixin {
+    @Inject(at = @At("TAIL"), method = "render")
+    public void render(PoseStack stack, float f, CallbackInfo info) {
+        RenderManager.renderHud(stack);
+    }
+
+    @Inject(at = @At("HEAD"), method = "renderEffects", cancellable = true)
+    public void renderStatusEffectOverlay(PoseStack matrixStack, CallbackInfo ci) {
+        if(OsmiumClient.options.getEnumOption(Options.StatusEffectDisplayMode).variable == StatusEffectDisplayMode.CUSTOM)
+            ci.cancel();
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/KeyMappingAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/KeyMappingAccessor.java b/src/main/java/com/intro/common/mixin/client/KeyMappingAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/KeyMappingAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,12 @@
+package com.intro.common.mixin.client;
+
+import net.minecraft.client.KeyMapping;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(KeyMapping.class)
+public interface KeyMappingAccessor {
+
+    @Accessor
+    public int getClickCount();
+}
Index: src/main/java/com/intro/common/mixin/client/KeyboardInputMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/KeyboardInputMixin.java b/src/main/java/com/intro/common/mixin/client/KeyboardInputMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/KeyboardInputMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,36 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.ToggleSneak;
+import com.intro.common.config.Options;
+import net.minecraft.client.player.Input;
+import net.minecraft.client.player.KeyboardInput;
+import org.objectweb.asm.Opcodes;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+
+/*
+ Adapted from Tweakeroo mod under GNU GPL
+ Tweakeroo GitHub : https://github.com/maruohon/tweakeroo/
+
+ @author maruohon
+ @author Intro
+ */
+@Mixin(KeyboardInput.class)
+public class KeyboardInputMixin extends Input {
+
+    @Inject(method = "tick", at = @At(
+            value = "FIELD",
+            target = "Lnet/minecraft/client/player/KeyboardInput;shiftKeyDown:Z",
+            ordinal = 0,
+            shift = At.Shift.AFTER,
+            opcode = Opcodes.PUTFIELD))
+    private void tick(boolean slowDown, CallbackInfo ci) {
+        if(ToggleSneak.sneaking && OsmiumClient.options.getBooleanOption(Options.ToggleSneakEnabled).variable) {
+            this.shiftKeyDown = true;
+        }
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/LevelRendererAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/LevelRendererAccessor.java b/src/main/java/com/intro/common/mixin/client/LevelRendererAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/LevelRendererAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,16 @@
+package com.intro.common.mixin.client;
+
+import net.minecraft.client.renderer.LevelRenderer;
+import net.minecraft.client.renderer.RenderBuffers;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(LevelRenderer.class)
+public interface LevelRendererAccessor {
+
+    @Accessor
+    public int getLastViewDistance();
+
+    @Accessor
+    public RenderBuffers getRenderBuffers();
+}
Index: src/main/java/com/intro/common/mixin/client/LevelRendererMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/LevelRendererMixin.java b/src/main/java/com/intro/common/mixin/client/LevelRendererMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/LevelRendererMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,106 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.render.color.Color;
+import com.intro.client.util.RenderUtil;
+import com.intro.common.config.Options;
+import com.intro.common.config.options.BlockOutlineMode;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.*;
+import net.minecraft.client.multiplayer.ClientLevel;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.LevelRenderer;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+import java.util.List;
+
+@Mixin(LevelRenderer.class)
+public abstract class LevelRendererMixin {
+
+
+    @Shadow private ClientLevel level;
+
+
+    @Inject(at = @At("HEAD"), method = "renderSnowAndRain", cancellable = true)
+    public void RenderWeather(CallbackInfo info) {
+        if(OsmiumClient.options.getBooleanOption(Options.NoRainEnabled).variable) {
+            info.cancel();
+        }
+    }
+
+    @Inject(at = @At("HEAD"), method = "addParticle(Lnet/minecraft/core/particles/ParticleOptions;ZZDDDDDD)V", cancellable = true)
+    public void addParticle(ParticleOptions particleData, boolean ignoreRange, boolean minimizeLevel, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed, CallbackInfo ci) {
+        if(particleData == ParticleTypes.RAIN && OsmiumClient.options.getBooleanOption(Options.NoRainEnabled).variable) {
+            ci.cancel();
+        }
+        if(particleData == ParticleTypes.FIREWORK && OsmiumClient.options.getBooleanOption(Options.FireworksDisabled).variable) {
+            ci.cancel();
+        }
+        if((particleData == ParticleTypes.WARPED_SPORE || particleData == ParticleTypes.CRIMSON_SPORE || particleData == ParticleTypes.SPORE_BLOSSOM_AIR || particleData == ParticleTypes.FALLING_SPORE_BLOSSOM) && OsmiumClient.options.getBooleanOption(Options.DecreaseNetherParticles).variable) {
+            ci.cancel();
+        }
+    }
+
+    @Inject(method = "renderHitOutline", at = @At("HEAD"), cancellable = true)
+    public void renderBlockOutline(PoseStack stack, VertexConsumer vertexConsumer, Entity entity, double d, double e, double f, BlockPos blockPos, BlockState blockState, CallbackInfo ci) {
+        if(OsmiumClient.options.getEnumOption(Options.BlockOutlineMode).variable == BlockOutlineMode.LINES) {
+            drawShapeOutline(stack, vertexConsumer, blockState.getShape(entity.level, blockPos, CollisionContext.of(entity)), (double)blockPos.getX() - d, (double)blockPos.getY() - e, (double)blockPos.getZ() - f, OsmiumClient.options.getColorOption(Options.BlockOutlineColor).color);
+            ci.cancel();
+        } else if(OsmiumClient.options.getEnumOption(Options.BlockOutlineMode).variable == BlockOutlineMode.QUADS) {
+            drawShapeFull(stack, blockState.getShape(entity.level, blockPos, CollisionContext.of(entity)), (double)blockPos.getX() - d, (double)blockPos.getY() - e, (double)blockPos.getZ() - f, OsmiumClient.options.getColorOption(Options.BlockOutlineColor).color);
+            ci.cancel();
+        }
+    }
+
+    private void drawShapeOutline(PoseStack stack, VertexConsumer vertexConsumer, VoxelShape voxelShape, double x, double y, double z, Color color) {
+        PoseStack.Pose pose = stack.last();
+        voxelShape.forAllEdges((edgeX1, edgeY1, edgeZ1, edgeX2, edgeY2, edgeZ2) -> {
+            float edgeXDiff = (float)(edgeX2 - edgeX1);
+            float edgeYDiff = (float)(edgeY2 - edgeY1);
+            float edgeZDiff = (float)(edgeZ2 - edgeZ1);
+            float pythagorean = Mth.sqrt(edgeXDiff * edgeXDiff + edgeYDiff * edgeYDiff + edgeZDiff * edgeZDiff);
+            edgeXDiff /= pythagorean;
+            edgeYDiff /= pythagorean;
+            edgeZDiff /= pythagorean;
+            vertexConsumer.vertex(pose.pose(), (float)(edgeX1 + x), (float)(edgeY1 + y), (float)(edgeZ1 + z)).color(color.getFloatR(), color.getFloatG(), color.getFloatB(), (float) OsmiumClient.options.getDoubleOption(Options.BlockOutlineAlpha).variable).normal(pose.normal(), edgeXDiff, edgeYDiff, edgeZDiff).endVertex();
+            vertexConsumer.vertex(pose.pose(), (float)(edgeX2 + x), (float)(edgeY2 + y), (float)(edgeZ2 + z)).color(color.getFloatR(), color.getFloatG(), color.getFloatB(), (float) OsmiumClient.options.getDoubleOption(Options.BlockOutlineAlpha).variable).normal(pose.normal(), edgeXDiff, edgeYDiff, edgeZDiff).endVertex();
+        });
+    }
+
+    private void drawShapeFull(PoseStack stack, VoxelShape voxelShape, double x, double y, double z, Color color) {
+        stack.pushPose();
+        BufferBuilder builder = Tesselator.getInstance().getBuilder();
+        builder.begin(VertexFormat.Mode.TRIANGLE_STRIP, DefaultVertexFormat.POSITION_COLOR);
+        renderVoxelShape(stack, builder, voxelShape, x, y, z, color.getFloatR(), color.getFloatG(), color.getFloatB(), (float) OsmiumClient.options.getDoubleOption(Options.BlockOutlineAlpha).variable, 0.01d);
+        builder.end();
+        RenderSystem.setShader(GameRenderer::getPositionColorShader);
+        RenderSystem.enableDepthTest();
+        BufferUploader.end(builder);
+        RenderSystem.disableDepthTest();
+        stack.popPose();
+    }
+
+    public void renderVoxelShape(PoseStack stack, VertexConsumer vertexConsumer, VoxelShape voxelShape, double x, double y, double z, float r, float g, float b, float a, double expand) {
+        List<AABB> list = voxelShape.toAabbs();
+        for (AABB aABB : list) {
+            aABB = aABB.inflate(expand);
+            RenderUtil.addChainedFilledBoxVertices(stack, vertexConsumer, (float) x, (float) y, (float) z, (float) aABB.minX, (float) aABB.minY, (float) aABB.minZ, (float) aABB.maxX, (float) aABB.maxY, (float) aABB.maxZ, r, g, b, a);
+        }
+    }
+
+}
+
+
Index: src/main/java/com/intro/common/mixin/client/MinecraftAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/MinecraftAccessor.java b/src/main/java/com/intro/common/mixin/client/MinecraftAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/MinecraftAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,14 @@
+package com.intro.common.mixin.client;
+
+import net.minecraft.client.Minecraft;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(Minecraft.class)
+public interface MinecraftAccessor {
+
+    @Accessor
+    int getFps();
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/MinecraftMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/MinecraftMixin.java b/src/main/java/com/intro/common/mixin/client/MinecraftMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/MinecraftMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,66 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.EventDirection;
+import com.intro.client.module.event.EventTick;
+import com.intro.client.module.event.EventType;
+import com.intro.client.render.drawables.CpsDisplay;
+import com.intro.client.render.screen.OsmiumUpdateScreen;
+import com.intro.client.util.OptionUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.main.GameConfig;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.Logger;
+import org.spongepowered.asm.mixin.Final;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+import java.nio.file.Files;
+
+@Mixin(Minecraft.class)
+public class MinecraftMixin {
+
+    @Shadow @Final private static Logger LOGGER;
+
+    @Inject(at = @At("HEAD"), method = "tick")
+    public void preTick(CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventTick(EventDirection.PRE), EventType.EVENT_TICK);
+    }
+
+    @Inject(at = @At("HEAD"), method = "tick")
+    public void postTick(CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventTick(EventDirection.POST), EventType.EVENT_TICK);
+    }
+
+    @Inject(at = @At("HEAD"), method = "close")
+    public void close(CallbackInfo ci) {
+        OptionUtil.save();
+    }
+
+    @Inject(method = "startAttack", at = @At(value = "INVOKE", target = "Lnet/minecraft/client/player/LocalPlayer;swing(Lnet/minecraft/world/InteractionHand;)V"))
+    public void mouseClick(CallbackInfo ci) {
+        CpsDisplay.getInstance().onClick();
+    }
+
+
+    @Inject(at = @At("RETURN"), method = "close")
+    public void closeReturn(CallbackInfo ci) {
+        try {
+            if(OsmiumUpdateScreen.OLD_MOD_JAR_PATH != null) {
+                Files.deleteIfExists(OsmiumUpdateScreen.OLD_MOD_JAR_PATH);
+            }
+        } catch (Exception e) {
+            OsmiumClient.LOGGER.log(Level.ERROR, "Failed to delete old mod jar!", e);
+        }
+    }
+
+
+
+
+
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/OptionsScreenMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/OptionsScreenMixin.java b/src/main/java/com/intro/common/mixin/client/OptionsScreenMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/OptionsScreenMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,45 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.EventDirection;
+import com.intro.client.module.event.EventSettingsChange;
+import com.intro.client.module.event.EventType;
+import com.intro.client.render.screen.OsmiumOptionsScreen;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.components.Button;
+import net.minecraft.client.gui.screens.OptionsScreen;
+import net.minecraft.client.gui.screens.Screen;
+import net.minecraft.network.chat.TranslatableComponent;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(OptionsScreen.class)
+public abstract class OptionsScreenMixin extends Screen {
+
+    private final Minecraft mc = Minecraft.getInstance();
+
+    protected OptionsScreenMixin(TranslatableComponent title) {
+        super(title);
+    }
+
+    @Inject(at = @At("TAIL"), method = "init")
+    private void init(CallbackInfo info) {
+        if(this.mc.options.guiScale > 5) {
+            this.addRenderableWidget(new Button(this.width / 2 - 50, this.height / 6 + 140, 100, 20, new TranslatableComponent("osmium.options.title"), (button) -> mc.setScreen(new OsmiumOptionsScreen(this))));
+        } else {
+            this.addRenderableWidget(new Button(this.width / 2 - 100, this.height / 6 + 200, 200, 20, new TranslatableComponent("osmium.options.title"), (buttonWidget) -> mc.setScreen(new OsmiumOptionsScreen(this))));
+        }
+    }
+
+    @Inject(at = @At("TAIL"), method = "removed")
+    private void onClosePost(CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventSettingsChange(EventDirection.POST), EventType.EVENT_SETTINGS_CHANGE);
+    }
+
+    @Inject(at = @At("HEAD"), method = "removed")
+    private void onClosePre(CallbackInfo info) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventSettingsChange(EventDirection.PRE), EventType.EVENT_SETTINGS_CHANGE);
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/PlayerRendererMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/PlayerRendererMixin.java b/src/main/java/com/intro/common/mixin/client/PlayerRendererMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/PlayerRendererMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,26 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.render.cape.CapeRenderer;
+import com.intro.client.render.cape.ElytraRenderer;
+import net.minecraft.client.model.PlayerModel;
+import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.client.renderer.entity.EntityRendererProvider;
+import net.minecraft.client.renderer.entity.LivingEntityRenderer;
+import net.minecraft.client.renderer.entity.player.PlayerRenderer;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(PlayerRenderer.class)
+public abstract class PlayerRendererMixin extends LivingEntityRenderer<AbstractClientPlayer, PlayerModel<AbstractClientPlayer>> {
+    public PlayerRendererMixin(EntityRendererProvider.Context ctx, PlayerModel<AbstractClientPlayer> model, float shadowRadius) {
+        super(ctx, model, shadowRadius);
+    }
+
+    @Inject(method = ("<init>"), at = @At("RETURN"))
+    public void ConstructorMixinPlayerEntityRenderer(EntityRendererProvider.Context ctx, boolean slim, CallbackInfo ci) {
+        this.addLayer(new CapeRenderer(this));
+        this.addLayer(new ElytraRenderer<>(this, ctx.getModelSet()));
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/ResourceTextureAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ResourceTextureAccessor.java b/src/main/java/com/intro/common/mixin/client/ResourceTextureAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ResourceTextureAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,15 @@
+package com.intro.common.mixin.client;
+
+import net.minecraft.client.renderer.texture.SimpleTexture;
+import net.minecraft.resources.ResourceLocation;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(SimpleTexture.class)
+public interface ResourceTextureAccessor {
+
+    @Accessor
+    ResourceLocation getLocation();
+
+
+}
Index: src/main/java/com/intro/common/mixin/client/ResourceTextureSubclassAccessor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ResourceTextureSubclassAccessor.java b/src/main/java/com/intro/common/mixin/client/ResourceTextureSubclassAccessor.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ResourceTextureSubclassAccessor.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,13 @@
+package com.intro.common.mixin.client;
+
+import com.mojang.blaze3d.platform.NativeImage;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.gen.Accessor;
+
+@Mixin(targets = "net/minecraft/client/renderer/texture/SimpleTexture$TextureImage")
+public interface ResourceTextureSubclassAccessor {
+
+    @Accessor
+    NativeImage getImage();
+
+}
Index: src/main/java/com/intro/common/mixin/client/ScreenEffectRendererMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/ScreenEffectRendererMixin.java b/src/main/java/com/intro/common/mixin/client/ScreenEffectRendererMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/ScreenEffectRendererMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,78 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.common.config.Options;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.vertex.*;
+import com.mojang.math.Matrix4f;
+import com.mojang.math.Vector3f;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.ScreenEffectRenderer;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.client.resources.model.ModelBakery;
+import net.minecraft.util.Mth;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Overwrite;
+
+@Mixin(ScreenEffectRenderer.class)
+public class ScreenEffectRendererMixin {
+
+    /**
+     @author Intro
+     @reason Make LowFire work because it now uses BufferBuilder.
+     */
+    @Overwrite
+    private static void renderFire(Minecraft mc, PoseStack stack) {
+        BufferBuilder bufferBuilder = Tesselator.getInstance().getBuilder();
+        RenderSystem.setShader(GameRenderer::getPositionColorTexShader);
+        RenderSystem.depthFunc(519);
+        RenderSystem.depthMask(false);
+        RenderSystem.enableBlend();
+        RenderSystem.defaultBlendFunc();
+        RenderSystem.enableTexture();
+        TextureAtlasSprite textureAtlasSprite = ModelBakery.FIRE_1.sprite();
+        RenderSystem.setShaderTexture(0, textureAtlasSprite.atlas().location());
+        float f = textureAtlasSprite.getU0();
+        float g = textureAtlasSprite.getU1();
+        float h = (f + g) / 2.0F;
+        float i = textureAtlasSprite.getV0();
+        float j = textureAtlasSprite.getV1();
+        float k = (i + j) / 2.0F;
+        float l = textureAtlasSprite.uvShrinkRatio();
+        float m = Mth.lerp(l, f, h);
+        float n = Mth.lerp(l, g, h);
+        float o = Mth.lerp(l, i, k);
+        float p = Mth.lerp(l, j, k);
+        float q = 1.0F;
+
+        for(int r = 0; r < 2; ++r) {
+            stack.pushPose();
+            float s = -0.5F;
+            float t = 0.5F;
+            float u = -0.5F;
+            float v = 0.5F;
+            float w = -0.5F;
+            if(OsmiumClient.options.getBooleanOption(Options.NoFireEnabled).variable) {
+                stack.translate((float)(-(r * 2 - 1)) * 0.24F, -0.53000001192092896D, 0.0D);
+            } else {
+                stack.translate((float)(-(r * 2 - 1)) * 0.24F, -0.30000001192092896D, 0.0D);
+            }
+            stack.mulPose(Vector3f.YP.rotationDegrees((float)(r * 2 - 1) * 10.0F));
+            Matrix4f matrix4f = stack.last().pose();
+            bufferBuilder.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_TEX);
+            bufferBuilder.vertex(matrix4f, -0.5F, -0.5F, -0.5F).color(1.0F, 1.0F, 1.0F, 0.9F).uv(n, p).endVertex();
+            bufferBuilder.vertex(matrix4f, 0.5F, -0.5F, -0.5F).color(1.0F, 1.0F, 1.0F, 0.9F).uv(m, p).endVertex();
+            bufferBuilder.vertex(matrix4f, 0.5F, 0.5F, -0.5F).color(1.0F, 1.0F, 1.0F, 0.9F).uv(m, o).endVertex();
+            bufferBuilder.vertex(matrix4f, -0.5F, 0.5F, -0.5F).color(1.0F, 1.0F, 1.0F, 0.9F).uv(n, o).endVertex();
+            bufferBuilder.end();
+            BufferUploader.end(bufferBuilder);
+            stack.popPose();
+        }
+
+        RenderSystem.disableBlend();
+        RenderSystem.depthMask(true);
+        RenderSystem.depthFunc(515);
+    }
+
+}
Index: src/main/java/com/intro/common/mixin/client/SimpleReloadableResourceManagerMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/SimpleReloadableResourceManagerMixin.java b/src/main/java/com/intro/common/mixin/client/SimpleReloadableResourceManagerMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/SimpleReloadableResourceManagerMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,24 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.render.cape.CosmeticManager;
+import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.resources.ReloadInstance;
+import net.minecraft.server.packs.resources.SimpleReloadableResourceManager;
+import net.minecraft.util.Unit;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
+
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+
+@Mixin(SimpleReloadableResourceManager.class)
+public class SimpleReloadableResourceManagerMixin {
+
+    @Inject(method = "createReload", at = @At("RETURN"))
+    public void stitchTextures(Executor executor, Executor executor2, CompletableFuture<Unit> completableFuture, List<PackResources> list, CallbackInfoReturnable<ReloadInstance> cir) {
+        CosmeticManager.loadCapes();
+    }
+}
Index: src/main/java/com/intro/common/mixin/client/TitleScreenMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/client/TitleScreenMixin.java b/src/main/java/com/intro/common/mixin/client/TitleScreenMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/client/TitleScreenMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,19 @@
+package com.intro.common.mixin.client;
+
+import com.intro.client.OsmiumClient;
+import com.intro.client.module.event.EventStartGame;
+import com.intro.client.module.event.EventType;
+import net.minecraft.client.gui.screens.TitleScreen;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(TitleScreen.class)
+public class TitleScreenMixin {
+
+    @Inject(method = "init", at = @At("TAIL"))
+    public void initPost(CallbackInfo ci) {
+        OsmiumClient.EVENT_BUS.postEvent(new EventStartGame(), EventType.EVENT_START_GAME);
+    }
+}
Index: src/main/java/com/intro/common/mixin/server/MinecraftServerMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/server/MinecraftServerMixin.java b/src/main/java/com/intro/common/mixin/server/MinecraftServerMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/server/MinecraftServerMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,17 @@
+package com.intro.common.mixin.server;
+
+import com.intro.server.api.OptionApi;
+import net.minecraft.server.MinecraftServer;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(MinecraftServer.class)
+public class MinecraftServerMixin {
+
+    @Inject(method = "onServerExit", at = @At("HEAD"))
+    public void onClose(CallbackInfo ci) {
+        OptionApi.save();
+    }
+}
Index: src/main/java/com/intro/common/mixin/server/PlayerListMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/server/PlayerListMixin.java b/src/main/java/com/intro/common/mixin/server/PlayerListMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/server/PlayerListMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,47 @@
+package com.intro.common.mixin.server;
+
+import com.intro.common.config.OptionSerializer;
+import com.intro.common.config.options.Option;
+import com.intro.common.network.NetworkingConstants;
+import com.intro.server.api.OptionApi;
+import com.intro.server.api.PlayerApi;
+import com.intro.server.network.ServerNetworkHandler;
+import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.players.PlayerList;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(PlayerList.class)
+public abstract class PlayerListMixin {
+
+    @Inject(method = "placeNewPlayer", at = @At("TAIL"))
+    public void placeNewPlayer(Connection netManager, ServerPlayer player, CallbackInfo ci) {
+        OptionSerializer serializer = new OptionSerializer();
+        try {
+            ServerNetworkHandler.sendPacket(player, NetworkingConstants.RUNNING_OSMIUM_SERVER_PACKET_ID, ServerNetworkHandler.createByteBuf());
+            FriendlyByteBuf byteBuf = ServerNetworkHandler.createByteBuf();
+            byteBuf.writeInt(OptionApi.getServerSetOptions().size());
+            for (Option option : OptionApi.getServerSetOptions()) {
+                // can't use the GSON object here, or it doesn't serialize properly
+                // I have no clue why
+                byteBuf.writeUtf(serializer.serialize(option, null, null).toString());
+            }
+            ServerNetworkHandler.sendPacket(player, NetworkingConstants.SET_SETTING_PACKET_ID, byteBuf);
+            PlayerApi.registerPlayer(player);
+
+            for(ServerPlayer p : PlayerApi.playersRunningOsmium.values()) {
+                if(PlayerApi.getPlayerProperties(p).capeDataBuffer != null) {
+                    ServerNetworkHandler.sendPacket(player, NetworkingConstants.SET_PLAYER_CAPE_CLIENT_BOUND, PlayerApi.getPlayerProperties(p).capeDataBuffer);
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+}
+
Index: src/main/java/com/intro/common/mixin/server/ServerGamePacketListenerImplMixin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/mixin/server/ServerGamePacketListenerImplMixin.java b/src/main/java/com/intro/common/mixin/server/ServerGamePacketListenerImplMixin.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/mixin/server/ServerGamePacketListenerImplMixin.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,22 @@
+package com.intro.common.mixin.server;
+
+import com.intro.server.network.ServerNetworkHandler;
+import net.minecraft.network.Connection;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import org.spongepowered.asm.mixin.Mixin;
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.injection.At;
+import org.spongepowered.asm.mixin.injection.Inject;
+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
+
+@Mixin(ServerGamePacketListenerImpl.class)
+public class ServerGamePacketListenerImplMixin {
+
+    @Shadow public ServerPlayer player;
+
+    @Inject(method = "onDisconnect", at = @At("RETURN"))
+    public void handleDisconnect(CallbackInfo ci) {
+        ServerNetworkHandler.onDisconnect(player);
+    }
+}
Index: src/main/java/com/intro/common/network/NetworkingConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/network/NetworkingConstants.java b/src/main/java/com/intro/common/network/NetworkingConstants.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/network/NetworkingConstants.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,16 @@
+package com.intro.common.network;
+
+import net.minecraft.resources.ResourceLocation;
+
+public class NetworkingConstants {
+
+    // be sure to contain all set options in this packet
+    public static final ResourceLocation SET_SETTING_PACKET_ID = new ResourceLocation("osmium", "set_setting_packet");
+    public static final ResourceLocation RUNNING_OSMIUM_SERVER_PACKET_ID = new ResourceLocation("osmium", "running_server_packet");
+    public static final ResourceLocation RUNNING_OSMIUM_CLIENT_PACKET_ID = new ResourceLocation("osmium", "running_osmium_client");
+    public static final ResourceLocation SET_PLAYER_CAPE_SERVER_BOUND = new ResourceLocation("osmium", "set_player_cape_server_bound");
+    public static final ResourceLocation SET_PLAYER_CAPE_CLIENT_BOUND = new ResourceLocation("osmium", "set_player_cape_client_bound");
+
+
+
+}
Index: src/main/java/com/intro/common/util/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/common/util/Util.java b/src/main/java/com/intro/common/util/Util.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/common/util/Util.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,224 @@
+package com.intro.common.util;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.stream.JsonReader;
+import com.intro.common.ModConstants;
+import net.minecraftforge.fml.loading.FMLPaths;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.StringReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.TimeUnit;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+public class Util {
+
+    public static final Logger LOGGER = LogManager.getLogger("OsmiumGeneric");
+
+    // cache gotten values to prevent rate limiting and to prevent lag due to downloading stuff
+    private static String cachedLatestReleaseTag;
+    private static String cachedLatestReleaseDownload;
+    private static String cachedLatestReleaseName;
+
+
+    // cache values at startup
+    static {
+        getLatestGithubReleaseTag();
+        getLatestReleaseName();
+        getLatestReleaseDownloadString();
+    }
+
+
+    public static String getLatestGithubReleaseTag() {
+        try {
+            if(cachedLatestReleaseTag != null) {
+                return cachedLatestReleaseTag;
+            }
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/Intro-Dev/Osmium/releases").openConnection();
+            connection.setRequestMethod("GET");
+            connection.connect();
+
+            switch (connection.getResponseCode()) {
+                case 403 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to rate limiting. Unless your debugging you should probably not launch the game 60 times an hour");
+                    return ModConstants.FULL_VERSION_STRING;
+                }
+                case 404 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to unknown url.");
+                    return ModConstants.FULL_VERSION_STRING;
+                }
+                case 200 -> {
+                }
+                default -> {
+                    LOGGER.log(Level.DEBUG, "Could not retrieve github release data for an unknown reason.");
+                    return ModConstants.FULL_VERSION_STRING;
+                }
+            }
+
+            JsonReader reader = new JsonReader(new InputStreamReader(connection.getInputStream()));
+            JsonParser parser = new JsonParser();
+            JsonElement rootElement = parser.parse(reader);
+            JsonArray responseJson = rootElement.getAsJsonArray();
+            // get tag
+            String tag = responseJson.get(0).getAsJsonObject().get("tag_name").getAsString();
+            cachedLatestReleaseTag = tag;
+            return tag;
+        } catch (Exception e) {
+            e.printStackTrace();
+            LOGGER.log(Level.WARN, "Failed to get latest version string!");
+        }
+        return "";
+    }
+
+    public static boolean isRunningLatestVersion() {
+        String[] releaseStrings = getLatestGithubReleaseTag().split("-");
+        // release strings on GitHub have to be structured like this or else this check breaks
+        // 1.0.0-1.17.1
+        return !(!Objects.equals(releaseStrings[0], ModConstants.UPDATE_STRING) && releaseStrings[1].equals(ModConstants.MINECRAFT_VERSION_STRING));
+    }
+
+    public static String getLatestReleaseDownloadString() {
+        try {
+            if(cachedLatestReleaseDownload != null) {
+                return cachedLatestReleaseDownload;
+            }
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/Intro-Dev/Osmium/releases/latest").openConnection();
+            connection.setRequestMethod("GET");
+            connection.connect();
+
+            switch (connection.getResponseCode()) {
+                case 403 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to rate limiting. Unless your debugging you should probably not launch the game 60 times an hour");
+                    return "";
+                }
+                case 404 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to unknown url.");
+                    return "";
+                }
+                case 200 -> {
+                }
+                default -> {
+                    LOGGER.log(Level.DEBUG, "Could not retrieve github release data for an unknown reason.");
+                    return "";
+                }
+            }
+
+            JsonReader reader = new JsonReader(new InputStreamReader(connection.getInputStream()));
+            JsonParser parser = new JsonParser();
+            JsonElement rootElement = parser.parse(reader);
+            JsonObject responseJson = rootElement.getAsJsonObject();
+            // get tag
+            String download = responseJson.get("assets").getAsJsonArray().get(0).getAsJsonObject().get("browser_download_url").getAsString();
+            cachedLatestReleaseDownload = download;
+            return download;
+        } catch (Exception e) {
+            e.printStackTrace();
+            LOGGER.log(Level.WARN, "Failed to get latest version download url!");
+        }
+        return "";
+    }
+
+    public static String getLatestReleaseName() {
+        try {
+            if(cachedLatestReleaseName != null) {
+                return cachedLatestReleaseName;
+            }
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/Intro-Dev/Osmium/releases/latest").openConnection();
+            connection.setRequestMethod("GET");
+            connection.connect();
+
+            switch (connection.getResponseCode()) {
+                case 403 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to rate limiting. Unless your debugging you should probably not launch the game 60 times an hour");
+                    return "";
+                }
+                case 404 -> {
+                    LOGGER.log(Level.INFO, "Could not retrieve github release data due to unknown url.");
+                    return "";
+                }
+                case 200 -> {
+                }
+                default -> {
+                    LOGGER.log(Level.DEBUG, "Could not retrieve github release data for an unknown reason.");
+                    return "";
+                }
+            }
+
+            JsonReader reader = new JsonReader(new InputStreamReader(connection.getInputStream()));
+            JsonParser parser = new JsonParser();
+            JsonElement rootElement = parser.parse(reader);
+            JsonObject responseJson = rootElement.getAsJsonObject();
+            // get name
+            String name = responseJson.get("assets").getAsJsonArray().get(0).getAsJsonObject().get("name").getAsString();
+            cachedLatestReleaseName = name;
+            return name;
+        } catch (Exception e) {
+            e.printStackTrace();
+            LOGGER.log(Level.WARN, "Failed to get latest version download url!");
+        }
+        return "";
+    }
+
+    /**
+     * Adapted from ModManager by DeathsGun under Apache 2.0 license
+     * ModManager GitHub https://github.com/DeathsGun/ModManager
+     *
+     * @author DeathsGun
+     */
+    public static Path getModJarPath(String modId, String name) throws IOException {
+        List<Path> jars = Files.list(FMLPaths.MODSDIR.get()).filter(file -> file.toFile().getName().endsWith(".jar")).toList();
+        for(Path jarPath : jars) {
+            ZipFile zipFile = new ZipFile(jarPath.toFile());
+            ZipEntry entry = zipFile.getEntry("fabric.mod.json");
+            JsonReader reader = new JsonReader(new InputStreamReader(zipFile.getInputStream(entry)));
+            JsonParser parser = new JsonParser();
+            JsonElement rootElement = parser.parse(reader);
+            JsonObject jsonContent = rootElement.getAsJsonObject();
+            zipFile.close();
+            if (jsonContent.get("id").getAsString().equals(modId) || jsonContent.get("name").getAsString().equals(name)) {
+                return jarPath;
+            }
+        }
+        return null;
+    }
+
+    public static JsonElement getJsonFromString(String string) {
+        JsonReader reader = new JsonReader(new StringReader(string));
+        JsonParser parser = new JsonParser();
+        return parser.parse(reader);
+    }
+
+    public static Path getCosmeticPacksPath() {
+       return FMLPaths.GAMEDIR.get().resolve("cosmetics");
+    }
+
+    public static String getZipFileSystemPrefix(ZipFile file) {
+        File path = new File(file.getName());
+        return path.getName().replaceAll("\\.zip", "");
+    }
+
+    // just tells the os to delete the file
+    // only for windows because windows is the only platform that cares about concurrent file usage enough to block Files.delete()
+    public static void forceDelete(File file) throws IOException, InterruptedException {
+        if (net.minecraft.Util.getPlatform() == net.minecraft.Util.OS.WINDOWS) {
+            new ProcessBuilder("cmd", "/c", "del /f " + '"' + file.getAbsolutePath() + '"').start().waitFor(200, TimeUnit.MILLISECONDS);
+        } else {
+            Files.deleteIfExists(file.toPath());
+        }
+    }
+
+}
Index: src/main/java/com/intro/server/OsmiumServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/server/OsmiumServer.java b/src/main/java/com/intro/server/OsmiumServer.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/server/OsmiumServer.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,30 @@
+package com.intro.server;
+
+import com.intro.common.util.Util;
+import com.intro.server.api.OptionApi;
+import com.intro.server.command.CommandManager;
+import com.intro.server.network.ServerNetworkHandler;
+import net.minecraftforge.fml.common.Mod;
+import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+@Mod("osmium")
+public class OsmiumServer {
+
+    public static final Logger LOGGER = LogManager.getLogger("OsmiumServer");
+
+    public OsmiumServer() {
+        FMLJavaModLoadingContext.get().getModEventBus().addListener(this::onInitializeServer);
+    }
+
+    public void onInitializeServer(final FMLCommonSetupEvent event) {
+        CommandManager.registerCommands();
+        ServerNetworkHandler.registerPackets();
+        OptionApi.load();
+        if(!Util.isRunningLatestVersion()) {
+            System.out.println("An update for Osmium is available! Download at https://github.com/Intro-Dev/Osmium/releases");
+        }
+    }
+}
Index: src/main/java/com/intro/server/api/OptionApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/server/api/OptionApi.java b/src/main/java/com/intro/server/api/OptionApi.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/server/api/OptionApi.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,120 @@
+package com.intro.server.api;
+
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.intro.common.config.OptionDeserializer;
+import com.intro.common.config.OptionSerializer;
+import com.intro.common.config.options.Option;
+import com.intro.server.OsmiumServer;
+import net.minecraftforge.fml.loading.FMLPaths;
+import org.apache.logging.log4j.Level;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.lang.reflect.Modifier;
+import java.nio.file.Paths;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Scanner;
+
+public class OptionApi {
+
+    private static final Gson GSON = new GsonBuilder()
+            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+            .setPrettyPrinting()
+            .excludeFieldsWithModifiers(Modifier.PRIVATE)
+            .registerTypeAdapter(Option.class, new OptionSerializer())
+            .registerTypeAdapter(Option.class, new OptionDeserializer())
+            .create();
+
+    private static HashMap<String, Option> serverSetOptions = new HashMap<>();
+
+    public static void addSetOption(Option option) {
+        serverSetOptions.put(option.identifier, option);
+        save();
+    }
+
+    public static Collection<Option> getServerSetOptions()   {
+        return serverSetOptions.values().stream().toList();
+    }
+
+    public static void removeSetOption(Option option) {
+        serverSetOptions.remove(option.identifier);
+        save();
+    }
+
+    public static void clearSetOptions() {
+        serverSetOptions.clear();
+    }
+
+    public static void removeSetOption(String  identifier) {
+        serverSetOptions.remove(identifier);}
+
+
+    /**
+     * <p>Saves set options to server config</p>
+     */
+    public static void save() {
+        try {
+            File file = Paths.get(FMLPaths.CONFIGDIR.get().resolve("osmium-server-config.json").toString()).toFile();
+            if(file.createNewFile()) {
+                System.out.println("Couldn't find already existing config file, creating new one.");
+                OsmiumServer.LOGGER.log(Level.ALL, "Couldn't find already existing config file, creating new one.");
+            }
+            FileWriter writer = new FileWriter(file);
+
+            Option[] array = serverSetOptions.values().toArray(new Option[0]);
+
+            writer.write(GSON.toJson(array));
+            writer.close();
+        } catch (Exception e) {
+            OsmiumServer.LOGGER.error("Error in saving osmium config!");
+        }
+    }
+
+    /**
+     * <p>Loads set options from server config</p>
+     */
+    public static void load() {
+        try {
+            File file = Paths.get(FMLPaths.CONFIGDIR.get().resolve("osmium-server-config.json").toString()).toFile();
+            StringBuilder builder = new StringBuilder();
+            boolean createdFile = file.createNewFile();
+            Scanner reader = new Scanner(file);
+            while(reader.hasNextLine()) {
+                builder.append(reader.nextLine());
+            }
+            if(createdFile || !isJSONValid(builder.toString())) {
+                OsmiumServer.LOGGER.log(Level.WARN, "Config file either didn't exist or is corrupted, creating new one using default settings.");
+                serverSetOptions = new HashMap<>();
+                save();
+                return;
+            }
+
+            Option[] array = GSON.fromJson(builder.toString(), Option[].class);
+
+            if(array.length != 0) {
+                for(Option o : array) {
+                    serverSetOptions.put(o.identifier, o);
+                }
+            }
+
+
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            OsmiumServer.LOGGER.error("Error in loading osmium config!");
+        }
+    }
+
+    public static boolean isJSONValid(String jsonInString) {
+        try {
+            GSON.fromJson(jsonInString, Object.class);
+            return true;
+        } catch(com.google.gson.JsonSyntaxException ex) {
+            return false;
+        }
+    }
+
+}
Index: src/main/java/com/intro/server/api/PlayerApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/server/api/PlayerApi.java b/src/main/java/com/intro/server/api/PlayerApi.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/server/api/PlayerApi.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,39 @@
+package com.intro.server.api;
+
+import com.intro.common.api.PlayerProperties;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerPlayer;
+
+import java.util.HashMap;
+
+public class PlayerApi {
+
+    private static final HashMap<String, PlayerProperties> playerProperties = new HashMap<>();
+    public static final HashMap<String, ServerPlayer> playersRunningOsmium = new HashMap<>();
+
+    public static void registerPlayer(ServerPlayer player) {
+        playerProperties.put(player.getUUID().toString(), new PlayerProperties());
+    }
+
+    public static void setRunningOsmium(ServerPlayer player, boolean value) {
+        PlayerProperties properties = playerProperties.get(player.getUUID().toString());
+        properties.runningOsmium = value;
+        playerProperties.put(player.getUUID().toString(), properties);
+    }
+
+    public static boolean isRunningOsmium(ServerPlayer player) {
+        return playerProperties.get(player.getUUID().toString()).runningOsmium;
+    }
+
+    public static void removePlayerRegistry(ServerPlayer player) {
+        playerProperties.remove(player.getUUID().toString());
+    }
+
+    public static PlayerProperties getPlayerProperties(ServerPlayer player) {
+        return playerProperties.get(player.getUUID().toString());
+    }
+
+    public static void setPlayerCapeBuffer(String uuid, FriendlyByteBuf byteBuf) {
+        playerProperties.get(uuid).capeDataBuffer = byteBuf;
+    }
+}
Index: src/main/java/com/intro/server/command/CommandManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/server/command/CommandManager.java b/src/main/java/com/intro/server/command/CommandManager.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/server/command/CommandManager.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,110 @@
+package com.intro.server.command;
+
+import com.intro.client.util.EnumUtil;
+import com.intro.common.config.OptionSerializer;
+import com.intro.common.config.options.BooleanOption;
+import com.intro.common.config.options.DoubleOption;
+import com.intro.common.config.options.EnumOption;
+import com.intro.common.config.options.Option;
+import com.intro.common.network.NetworkingConstants;
+import com.intro.server.OsmiumServer;
+import com.intro.server.api.OptionApi;
+import com.intro.server.api.PlayerApi;
+import com.intro.server.network.ServerNetworkHandler;
+import com.mojang.brigadier.arguments.DoubleArgumentType;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.RegisterCommandsEvent;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import org.apache.logging.log4j.Level;
+
+import static net.minecraft.commands.Commands.argument;
+import static net.minecraft.commands.Commands.literal;
+
+public class CommandManager {
+
+    public static void registerCommands() {
+        MinecraftForge.EVENT_BUS.addListener(CommandManager::onCommandRegister);
+    }
+
+    @SubscribeEvent
+    public static void onCommandRegister(RegisterCommandsEvent event) {
+        event.getDispatcher().register(literal("osmium").requires(commandSourceStack -> commandSourceStack.hasPermission(3)).then(literal("option").then(literal("set").then(argument("identifier", StringArgumentType.string()).then(argument("double", DoubleArgumentType.doubleArg()).executes(CommandManager::doubleSetCommand))
+                        .then(argument("boolean", StringArgumentType.string()).executes(CommandManager::booleanSetCommand))
+                        .then(argument("enum_type", StringArgumentType.string()).then(argument("enum_value", StringArgumentType.string()).executes(CommandManager::enumSetCommand)))
+                )).then(literal("refresh").executes(CommandManager::refreshCommand))
+                .then(literal("remove").then(argument("identifier", StringArgumentType.string()).executes(CommandManager::removeCommand)))
+                .then(literal("reset").executes(CommandManager::clearCommand))));
+    }
+
+    public static int doubleSetCommand(CommandContext<CommandSourceStack> context) {
+        try {
+            Option option = new DoubleOption(StringArgumentType.getString(context, "identifier"), DoubleArgumentType.getDouble(context, "double"));
+            OptionApi.addSetOption(option);
+            context.getSource().sendSuccess(new TextComponent("Set Option value"), true);
+        } catch (Exception e) {
+            context.getSource().sendSuccess(new TextComponent("Error: Invalid Option Data"), true);
+        }
+        return 1;
+    }
+
+    public static int booleanSetCommand(CommandContext<CommandSourceStack> context) {
+        try {
+            Option option = new BooleanOption(StringArgumentType.getString(context, "identifier"), Boolean.parseBoolean(StringArgumentType.getString(context, "boolean")));
+            OptionApi.addSetOption(option);
+            context.getSource().sendSuccess(new TextComponent("Set Option value"), true);
+        } catch (Exception e) {
+            context.getSource().sendSuccess(new TextComponent("Error: Invalid Option Data"), true);
+        }
+        return 1;
+    }
+
+    public static int enumSetCommand(CommandContext<CommandSourceStack> context) {
+        try {
+            Option option = new EnumOption(StringArgumentType.getString(context, "identifier"), EnumUtil.loadEnumState(CommandManager.class.getClassLoader(), StringArgumentType.getString(context, "enum_type"), StringArgumentType.getString(context, "enum_value")));
+            OptionApi.addSetOption(option);
+            context.getSource().sendSuccess(new TextComponent("Set option value"), true);
+        } catch (Exception e) {
+            context.getSource().sendSuccess(new TextComponent("Error: Invalid Option Data"), true);
+        }
+        return 1;
+    }
+
+    public static int refreshCommand(CommandContext<CommandSourceStack> context) {
+        for (ServerPlayer player : PlayerApi.playersRunningOsmium.values()) {
+            try {
+                OptionSerializer serializer = new OptionSerializer();
+                FriendlyByteBuf byteBuf = ServerNetworkHandler.createByteBuf();
+                // write size so we only have to send one packet
+                byteBuf.writeInt(OptionApi.getServerSetOptions().size());
+                for (Option option : OptionApi.getServerSetOptions()) {
+                    String serializedOption = serializer.serialize(option, null, null).toString();
+                    byteBuf.writeUtf(serializedOption);
+                }
+                ServerNetworkHandler.sendPacket(player, NetworkingConstants.SET_SETTING_PACKET_ID, byteBuf);
+            } catch (Exception e) {
+                OsmiumServer.LOGGER.log(Level.WARN, "Error in refreshing clients options");
+            }
+        }
+        context.getSource().sendSuccess(new TextComponent("Refreshed option values"), true);
+        return 1;
+    }
+
+    public static int removeCommand(CommandContext<CommandSourceStack> context) {
+        OptionApi.removeSetOption(StringArgumentType.getString(context, "identifier"));
+        context.getSource().sendSuccess(new TextComponent("Set Option value"), true);
+        return 1;
+    }
+
+    public static int clearCommand(CommandContext<CommandSourceStack> context) {
+        OptionApi.clearSetOptions();
+        context.getSource().sendSuccess(new TextComponent("Reset option values"), true);
+        return 1;
+    }
+
+}
Index: src/main/java/com/intro/server/network/ServerNetworkHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/intro/server/network/ServerNetworkHandler.java b/src/main/java/com/intro/server/network/ServerNetworkHandler.java
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/java/com/intro/server/network/ServerNetworkHandler.java	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,80 @@
+package com.intro.server.network;
+
+import com.intro.common.network.NetworkingConstants;
+import com.intro.server.OsmiumServer;
+import com.intro.server.api.PlayerApi;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.Level;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class ServerNetworkHandler {
+
+    private static HashMap<ResourceLocation, ArrayList<PacketListener>> listeners = new HashMap<>();
+
+    public static void registerPacketListener(ResourceLocation channel, PacketListener listener) {
+        listeners.computeIfAbsent(channel, k -> new ArrayList<>());
+        listeners.get(channel).add(listener);
+    }
+
+    public static void handlePacketEvent(ServerboundCustomPayloadPacket payloadPacket, ServerPlayer player) {
+        listeners.get(payloadPacket.getIdentifier()).forEach(listener -> listener.onPacket(payloadPacket.getData(), player));
+    }
+
+    public static void onDisconnect(ServerPlayer player) {
+        PlayerApi.removePlayerRegistry(player);
+        PlayerApi.playersRunningOsmium.remove(player.getStringUUID());
+    }
+
+
+    @FunctionalInterface
+    private interface PacketListener {
+
+        void onPacket(FriendlyByteBuf buf, ServerPlayer player);
+
+    }
+
+
+
+    public static void sendPacket(ServerPlayer client, ResourceLocation channel, FriendlyByteBuf data) {
+        client.connection.send(new ClientboundCustomPayloadPacket(channel, data));
+    }
+
+    public static void registerPackets() {
+        registerPacketListener(NetworkingConstants.RUNNING_OSMIUM_CLIENT_PACKET_ID, (buf, player) -> {
+            PlayerApi.setRunningOsmium(player, true);
+            PlayerApi.playersRunningOsmium.put(player.getUUID().toString(), player);
+        });
+
+
+        registerPacketListener(NetworkingConstants.SET_PLAYER_CAPE_SERVER_BOUND, (buf, player) -> {
+
+            if(buf.capacity() > 16384) {
+                OsmiumServer.LOGGER.log(Level.INFO, "Player tried sending massive cape set packet");
+                return;
+            }
+
+            FriendlyByteBuf clientSendByteBuf = createByteBuf();
+            clientSendByteBuf.writeUtf(player.getStringUUID());
+            clientSendByteBuf.writeBytes(buf);
+
+            for(ServerPlayer client : PlayerApi.playersRunningOsmium.values()) {
+                sendPacket(client, NetworkingConstants.SET_PLAYER_CAPE_CLIENT_BOUND, clientSendByteBuf);
+            }
+
+            PlayerApi.setPlayerCapeBuffer(player.getStringUUID(), clientSendByteBuf);
+
+        });
+    }
+
+    public static FriendlyByteBuf createByteBuf() {
+        return new FriendlyByteBuf(Unpooled.buffer());
+    }
+
+}
Index: src/main/resources/assets/osmium/lang/de_de.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/osmium/lang/de_de.json b/src/main/resources/assets/osmium/lang/de_de.json
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/resources/assets/osmium/lang/de_de.json	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,83 @@
+{
+  "osmium.options.title": "Osmium Optionen",
+  "osmium.options.video_options.title": "Osmium Video Optionen",
+  "osmium.options.toggle_sprint_enabled": "ToggleSprint: an",
+  "osmium.options.toggle_sprint_disabled": "ToggleSprint: aus",
+  "osmium.options.full_bright_enabled": "Fullbright: an",
+  "osmium.options.full_bright_disabled": "Fullbright: aus",
+  "osmium.options.hurt_bobbing_enabled": "NoHurtBob: an",
+  "osmium.options.hurt_bobbing_disabled": "NoHurtBob: aus",
+  "keys.osmium.MenuKey": "Öffne Osmium Optionen",
+  "keys.category.osmium.keys": "Osmium",
+  "osmium.options.no_fire_disabled": "LowFire: aus",
+  "osmium.options.video_options": "Video Optionen",
+  "osmium.options.no_fire_enabled": "LowFire: an",
+  "osmium.options.sneak_vanilla": "Sneak: Vanilla",
+  "osmium.options.sneak_smooth": "Sneak: Geschmeidig",
+  "osmium.options.sneak_instant": "Sneak: Instant",
+  "osmium.options.video_options.back": "Zurück",
+  "osmium.version": "Osmium Version 1.2.3",
+  "osmium.gui_edit.title": "Gui bearbeiten",
+  "osmium.options.fps_enabled": "Fps Display: an",
+  "osmium.options.fps_disabled": "Fps Display: aus",
+  "osmium.options.rain_enabled": "NoRain: an",
+  "osmium.options.rain_disabled": "NoRain: aus",
+  "osmium.options.toggle_sneak_settings": "ToggleSneak Einstellungen",
+  "osmium.options.toggle_sneak_enabled": "ToggleSneak: an",
+  "osmium.options.toggle_sneak_disabled": "ToggleSneak: aus",
+  "osmium.options.fireworks_enabled": "Fireworks: aus",
+  "osmium.options.fireworks_disabled": "Fireworks: an",
+  "osmium.options.fly_boost_amount": "Flug Boost Faktor: ",
+  "osmium.options.fly_boost_enabled": "Flug Boost: an",
+  "osmium.options.fly_boost_disabled": "Flug Boost: aus",
+  "osmium.options.nether_particles_enabled": "Nether Partikel: aus",
+  "osmium.options.nether_particles_disabled": "Nether Particles: an",
+  "osmium.options.block_overlay_enabled": "Block Overlay: an",
+  "osmium.options.block_overlay_disabled": "Block Overlay: aus",
+  "osmium.widget.color_picker": "Farbwähler",
+  "osmium.options.block_overlay_alpha": "Overlay Transparenz: ",
+  "osmium.options.overlay_vanilla": "BlockOverlay: Vanilla",
+  "osmium.options.overlay_lines": "BlockOverlay: Outline",
+  "osmium.options.block_option_settings": "Block Overlay Einstellungen",
+  "osmium.open_credits": "Osmium Modrinth",
+  "osmium.options.status_effect_display_settings": "Effect Display Einstellungen",
+  "osmium.options.status_display_scale": "Effect Display Skalierungsfaktor: ",
+  "osmium.options.status_effect_display_vanilla": "Effect Display: Vanilla",
+  "osmium.options.status_effect_display_both": "Effect Display: Beide",
+  "osmium.options.status_effect_display_custom": "Effect Display: Custom",
+  "osmium.options.max_status_display": "Max Display Effects: ",
+  "osmium.toast.running_osmium_server": "Verbunden zu einem Osmium Server",
+  "osmium.toast.settings_change": "Manche Module können eingeschränkt sein!",
+  "osmium.command.invalid_option_data": "Ungültige Auswahl!",
+  "osmium.command.option_set_success": "Einstellung erfolgreich geändert!",
+  "osmium.update_available": "Eine neue Version ist verfügbar!",
+  "osmium.decline_update": "Gehe zu den Optionen",
+  "osmium.download_update": "Herunterladen",
+  "osmium.retry": "Update erneut versuchen",
+  "osmium.options.video_options.cape_disabled": "Custom Capes: aus",
+  "osmium.options.video_options.cape_optifine": "Custom Capes: Optifine",
+  "osmium.options.video_options.cape_all": "Custom Capes: Alle",
+  "osmium.options.armor_display_enabled": "Armor Display: an",
+  "osmium.options.armor_display_disabled": "Armor Display: aus",
+  "osmium.options.widgets_screen": "Widget Optionen",
+  "osmium.options.ping_display_enabled": "Ping Display: an",
+  "osmium.options.ping_display_disabled": "Ping Display: aus",
+  "osmium.options.cps_enabled": "Cps Display: an",
+  "osmium.options.cps_disabled": "Cps Display: aus",
+  "osmium.options.keystrokes_settings": "Keystrokes Options",
+  "osmium.options.keystrokes_enabled": "Keystrokes: an",
+  "osmium.options.keystrokes_disabled": "Keystrokes : aus",
+  "osmium.options.rgb_enabled": "Rgb: an",
+  "osmium.options.rgb_disabled": "Rgb: aus",
+  "osmium.options.reset_color": "Reset Color",
+  "osmium.options.transparency": "Transparency: ",
+  "osmium.options.animate_capes_enabled": "Deaktiviere animierte Capes",
+  "osmium.options.animate_capes_disabled": "Aktiviere animierte Capes",
+  "osmium.options.show_other_capes_enabled": "Deaktiviere andere Capes",
+  "osmium.options.show_other_capes_disabled": "Aktiviere andere Capes",
+  "osmium.cape_select": "Cape auswählen",
+  "osmium.cape_options": "Cape Optionen",
+  "osmium_failed_cape_load": "Cape Paket konnte nicht geladen werden!",
+  "osmium_failed_cape_load_title": "Fehler beim laden der Capes!",
+  "osmium.refresh_capes": "Übersicht neu laden"
+}
Index: src/main/resources/assets/osmium/lang/en_us.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/osmium/lang/en_us.json b/src/main/resources/assets/osmium/lang/en_us.json
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/resources/assets/osmium/lang/en_us.json	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,83 @@
+{
+  "osmium.options.title": "Osmium Options",
+  "osmium.options.video_options.title": "Osmium Video Options",
+  "osmium.options.toggle_sprint_enabled": "ToggleSprint: Enabled",
+  "osmium.options.toggle_sprint_disabled": "ToggleSprint: Disabled",
+  "osmium.options.full_bright_enabled": "Fullbright: Enabled",
+  "osmium.options.full_bright_disabled": "Fullbright: Disabled",
+  "osmium.options.hurt_bobbing_enabled": "NoHurtBob: Enabled",
+  "osmium.options.hurt_bobbing_disabled": "NoHurtBob: Disabled",
+  "keys.osmium.MenuKey": "Open Osmium Options",
+  "keys.category.osmium.keys": "Osmium",
+  "osmium.options.no_fire_disabled": "LowFire: Disabled",
+  "osmium.options.video_options": "Video Options",
+  "osmium.options.no_fire_enabled": "LowFire: Enabled",
+  "osmium.options.sneak_vanilla": "Sneak: Vanilla",
+  "osmium.options.sneak_smooth": "Sneak: Smooth",
+  "osmium.options.sneak_instant": "Sneak: Instant",
+  "osmium.options.video_options.back": "Back",
+  "osmium.version": "Osmium Version 1.2.3",
+  "osmium.gui_edit.title": "Gui Editing",
+  "osmium.options.fps_enabled": "Fps Display: Enabled",
+  "osmium.options.fps_disabled": "Fps Display: Disabled",
+  "osmium.options.rain_enabled": "NoRain: Enabled",
+  "osmium.options.rain_disabled": "NoRain: Disabled",
+  "osmium.options.toggle_sneak_settings": "ToggleSneak Settings",
+  "osmium.options.toggle_sneak_enabled": "ToggleSneak: Enabled",
+  "osmium.options.toggle_sneak_disabled": "ToggleSneak: Disabled",
+  "osmium.options.fireworks_enabled": "Fireworks: Disabled",
+  "osmium.options.fireworks_disabled": "Fireworks: Enabled",
+  "osmium.options.fly_boost_amount": "Fly Boost Amount: ",
+  "osmium.options.fly_boost_enabled": "Fly Boost: Enabled",
+  "osmium.options.fly_boost_disabled": "Fly Boost: Disabled",
+  "osmium.options.nether_particles_enabled": "Nether Particles: Disabled",
+  "osmium.options.nether_particles_disabled": "Nether Particles: Enabled",
+  "osmium.options.block_overlay_enabled": "Block Overlay: Enabled",
+  "osmium.options.block_overlay_disabled": "Block Overlay: Disabled",
+  "osmium.widget.color_picker": "Color Picker",
+  "osmium.options.block_overlay_alpha": "Overlay Transparency: ",
+  "osmium.options.overlay_vanilla": "BlockOverlay: Vanilla",
+  "osmium.options.overlay_lines": "BlockOverlay: Outline",
+  "osmium.options.block_option_settings": "Block Overlay Settings",
+  "osmium.open_credits": "Osmium Modrinth",
+  "osmium.options.status_effect_display_settings": "Effect Display Settings",
+  "osmium.options.status_display_scale": "Effect Display Scale: ",
+  "osmium.options.status_effect_display_vanilla": "Effect Display: Vanilla",
+  "osmium.options.status_effect_display_both": "Effect Display: Both",
+  "osmium.options.status_effect_display_custom": "Effect Display: Custom",
+  "osmium.options.max_status_display": "Max Display Effects: ",
+  "osmium.toast.running_osmium_server": "Connected to Osmium Server",
+  "osmium.toast.settings_change": "Some Settings May Have Been Disabled",
+  "osmium.command.invalid_option_data": "Invalid Option Data!",
+  "osmium.command.option_set_success": "Successfully Set Option",
+  "osmium.update_available": "An update is available!",
+  "osmium.decline_update": "Continue to options",
+  "osmium.download_update": "Download",
+  "osmium.retry": "Retry update",
+  "osmium.options.video_options.cape_disabled": "Custom Capes: Disabled",
+  "osmium.options.video_options.cape_optifine": "Custom Capes: Optifine",
+  "osmium.options.video_options.cape_all": "Custom Capes: All",
+  "osmium.options.armor_display_enabled": "Armor Display: Enabled",
+  "osmium.options.armor_display_disabled": "Armor Display: Disabled",
+  "osmium.options.widgets_screen": "Widget Options",
+  "osmium.options.ping_display_enabled": "Ping Display: Enabled",
+  "osmium.options.ping_display_disabled": "Ping Display: Disabled",
+  "osmium.options.cps_enabled": "Cps Display: Enabled",
+  "osmium.options.cps_disabled": "Cps Display: Disabled",
+  "osmium.options.keystrokes_settings": "Keystrokes Options",
+  "osmium.options.keystrokes_enabled": "Keystrokes: Enabled",
+  "osmium.options.keystrokes_disabled": "Keystrokes : Disabled",
+  "osmium.options.rgb_enabled": "Rgb: Enabled",
+  "osmium.options.rgb_disabled": "Rgb: Disabled",
+  "osmium.options.reset_color": "Reset Color",
+  "osmium.options.transparency": "Transparency: ",
+  "osmium.options.animate_capes_enabled": "Disable animated Capes",
+  "osmium.options.animate_capes_disabled": "Enable animated Capes",
+  "osmium.options.show_other_capes_enabled": "Disable Other Capes",
+  "osmium.options.show_other_capes_disabled": "Enable Other Capes",
+  "osmium.cape_select": "Select Cape",
+  "osmium.cape_options": "Cape Options",
+  "osmium_failed_cape_load": "Failed to load custom cape pack",
+  "osmium_failed_cape_load_title": "Error loading capes",
+  "osmium.refresh_capes": "Refresh Capes"
+}
Index: src/main/resources/osmium.mixins.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/osmium.mixins.json b/src/main/resources/osmium.mixins.json
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/resources/osmium.mixins.json	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,44 @@
+{
+  "required": true,
+  "package": "com.intro.common.mixin",
+  "minVersion": "0.8",
+  "compatibilityLevel": "JAVA_16",
+  "refmap": "osmium.refmap.json",
+  "client": [
+    "client.AbilitiesMixin",
+    "client.CameraMixin",
+    "client.CapeLayerMixin",
+    "client.ClientLevelMixin",
+    "client.ClientPacketListenerMixin",
+    "client.ElytraLayerMixin",
+    "client.FireworkEntityRendererMixin",
+    "client.FontInvoker",
+    "client.GameRendererMixin",
+    "client.GuiMixin",
+    "client.KeyboardInputMixin",
+    "client.KeyMappingAccessor",
+    "client.LevelRendererAccessor",
+    "client.LevelRendererMixin",
+    "client.MinecraftAccessor",
+    "client.MinecraftMixin",
+    "client.OptionsScreenMixin",
+    "client.PlayerRendererMixin",
+    "client.ResourceTextureAccessor",
+    "client.ResourceTextureSubclassAccessor",
+    "client.ScreenEffectRendererMixin",
+    "client.SimpleReloadableResourceManagerMixin",
+    "client.TitleScreenMixin",
+    "client.BufferBuilderAccessor"
+  ],
+  "server": [
+    "server.MinecraftServerMixin",
+    "server.PlayerListMixin",
+    "server.ServerGamePacketListenerImplMixin"
+
+  ],
+  "injectors": {
+    "defaultRequire": 1
+  },
+  "mixins": [
+  ]
+}
Index: src/main/resources/pack.mcmeta
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/pack.mcmeta b/src/main/resources/pack.mcmeta
new file mode 100644
--- /dev/null	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
+++ b/src/main/resources/pack.mcmeta	(revision 3079d2585e33b06d50af0fb0d91474f71cbc1ec8)
@@ -0,0 +1,6 @@
+{
+    "pack": {
+        "description": "osmium resources",
+        "pack_format": 7
+    }
+}
diff --git a/logs/latest.log b/logs/latest.log
new file mode 100644
diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000000000000000000000000000000000000..9c79152e9d7bf64bf87dbe9a3161060bd20018da
GIT binary patch
literal 261
zc${sIK?=e!5JmTe-r+-cMcNa%5X6<27}IGJjY-Lj)ZE@!r69PO&42UfO@pHox_AaX
zG@9f`#DIwdCsH0TI?u9$TFxN9P?jyk;?&}Ns;dTvVE}~;erlr65@NzkY6X@PLnH2V
zV@ysV8fOS)7pArO-9UvgmcmqyE|x>l@EP6(28W@L@{PN?l4SZ#v2WYHGh{6H>x32w
RaP)gW{z2RBD&@l;=mmcXS*8F0

diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..7454180f2ae8848c63b8b4dea2cb829da983f2fa
GIT binary patch
literal 59536
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
KxNQHoy?+DEO@e9w

diff --git a/src/main/resources/META-INF/accesstransformer.cfg b/src/main/resources/META-INF/accesstransformer.cfg
new file mode 100644
index 0000000000000000000000000000000000000000..cfa938d7d5c781f8583655bc9abe7f544dff045c
GIT binary patch
literal 188
zc$_OJP0GnkR>(^&(aX)uOHD3HOe@h#&dE&8E72=T%}YrwN-feWNv$X;ElSl3&de>y
vNezMUc)1G5)~f=gJ#!P&2^f@KnyKfOpI4$1TvC*ommUN**T1x+ptJ-4llVvT

diff --git a/src/main/resources/META-INF/mods.toml b/src/main/resources/META-INF/mods.toml
new file mode 100644
index 0000000000000000000000000000000000000000..8a97169ed346eb4838f6ce940ace0fafa34fcb1d
GIT binary patch
literal 3485
zc$}SAU2EG&6nzimKTMTE5^&^(vUDjJHrqPelr&}?w+~zTFqW>ZNu?QeW@Oit{`Wn1
zMw0D(Y+-{#Z0mlWd+wRZk(d?A3B05h^j%hUNun~jOTDQ|u}~$Y;>wH6XfKs^!WSfR
z>7}q#O0V=%coV)Xjm-IDa6UXZLSV8aBz_&O$jVYwQp45Q4dPOnJ8^Q<e|0)Q1v#5+
z5CTrVkUn^u+AE{sesa{kJ?#<*6C$HfV=LIB59c|g&Bbi;;kx~PAXYEZ-_jSs?Z)^v
zy6-ELXt3ed%_91h%6Y(|VS|_f2KK#FTqBpKbPSDp1YQxXSOiCXEkxmc?OqRuOXZ7Z
zo@S;Rvej8B^)kHcdeE{8i5W$p7my??{H7)bmp_U#4i3zhO)0IoM1_BRFnIu5C@)-L
znlcx25_fVX7aSXpu0x<v(tekSE!>>@LI6C+4Oo;Ea-saJ2&tS@`EE5&6oA}o1^nj}
z%7+aCwP6nrqVK2pag=<1`D$>wTSZSk^r|w<aU<qURZ}jQF&ptgY09iz_`cHlMqF}^
zRNN9kYplr4S_g<~xeNugvjd>5Q%^@c$w<3swJ{C%m-aPmtE$M$z;R|IsxoUATu3?v
zC@{&|Qh`We_zMoj(B#N#)x7a)MWVK*ChHZ&>{D7PT1U&sVr-o6Ig%B|IFfCBfh(!F
z0IpUo3p8WNkzD~7)ovgyWK;55)|+4wXrEDBqF~hQTQVt8Nt<Dmys;!hp>Ir8aW(&t
zHDYz1z7QX^V&r6*M3#J<UNbi=Ezo>ThW7-Y*Fb>VoR?Gq?kq!VYj8cT44{R#a;~A7
zmDyLa2s28y4KwA^il8$oqml;G)JNO2m7-MX6;R2CU`@CDu_zugV;?r)OcZ7vwIhrR
zK!w#t9XWZj6?l|0cNh_@uv)3SVL|HoeR%NsGl%-}<=&Fa;!<K6wi_Cj>na~5##O4R
z?(Y@5bbQrKH3w=t+kF;g=NR)B3s7QB81q*R7K`UUeu|Z}N&-?R8V~|+VkcnVU4xDb
zC|hQ7bm2MG^B+N)?qs)QKjS*OX70T5jgM;y44YnJt{B*gpy!O|S?eeyvkYsru%_yY
zMUn3>ra}JtrQo!VVqEE*$&~aAZllUPU0RvL)@4@JKI{w+24tyC4dDpoU?{vnB?g0i
zmkp#4mBj7O8_Q>ijNuLsR-JS_Y;+%W!JNPX)}`D;LFMHAyxJ!>crZ#Pk4~-U`L~9p
zhuxbRkIA*6BB`VBaNzg1lbhB=xSBGxKoj9S=ty2=K@U^L6&|_CT&m2F^pK%&ez+vh
zM<{mJ0>dF=5d#iUQGCZ)p4goGJJOb$-Z`Tm><c&7L6Q`vB9_Z!ueCu3AnT0o3H$L1
z5!xre*x_*Ycfo(X!+}>}SSM{hYmDDr7O?NMyL&`plxAr{)on$5$SlnzB8?IS%e2<Z
z2Z=m=_wmm0bc-1axOb!EN_%St;xEVs?nDqI?MfLH8)^sTh*DA+Dlpjpmkg6GjO~)$
z3o#3_9e0T76a#MQEKVvYx`G61dUm>Zi2~ENj-%t_<H&U(bEqUsi@~w*_XJdc`ZqXL
znDG56`wR}Thn#BCIq7Tzy@C*h)F~UYdS*=d9TToi_B#;eG8Jz-1Dt_-7rB(hHs5)g
zMjd7C-QpndbJVrGmEUdJXwoWiShRbR5CXh4++-0>g1+EFuEG&U-}w|d6KWx}!7b5P
z90km?IhA~%u;R}9?WVj<+2t5{3t4@bbN2v<SF0zAZ;hsG^T_q6i+7>7mBni}$XKYl
zC&k{l{v2OUrei)aE-q)|DLlS4$}$II5qlAU3py9~Qg+!!$<5?uoOE^Eg8L7!<bNIN
zx&%6W4@UaQ?A<`TxxO0T%(#f#@$}Pp8bde)7$s~Gt`_gwa}X8aklRD&34-j+yy|$H
zJT{lONvLjr5;<kKz%nBR{8feJXorLQi^ZuZst1?Ore?C>Vi&MdIxCy-uMT@@Ud~G1
cq0|1_`^ad|)ALv9`2c@@KTZAv<UNG`1#G9NfB*mh

diff --git a/src/main/resources/assets/osmium/icon.png b/src/main/resources/assets/osmium/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..b2a76c0ea70531b42653be66bf9fce7804649f90
GIT binary patch
literal 11512
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%0DH3^i$63S^v=?QSUnG;Or3l=W5m8KQ{5cX1!
znhXn*OfWHwzn0SpL?b+*r*<@HD?EdvC>>E^o(E8f6OQ^Pm3EVG*fbV57Z}i#H5Ysr
zDSl9NKLfl2Q%~ZySM%Is7Yz;F?<TDXOQu*}{(;5s)=B|9#HtA<iGGGa!2~AAg`KQ{
z*%(65Zog`v^mgmn63N9hE(}eJ`Y<u@)Q2uaNB65JWKO=>T#&dOkdV&{D3CO;fNkcx
z=$LfOXHck<O>pf9Vp9(a;6Q0WP>Gdl|AB#D#-jGFbh;Ud7eIzl)yz^U?Pz%OIX7Ep
zWlZM*U<Jiy^!b-$6b#0uX=>D3ajHacZzWsh-I0|;H%>dVHW*tl7Eh(1H(W)_V2*o~
zR<VY)Gg7mT_?kV3FQOr7qTw$pwPC(&qj_a16{C<vdzxGlA90IXbDe8{fpg^<cZQNC
zipgWd$x*NjW%Z&ff|zwN%%K?7bV^r;1kQy%vhq@gGw50~AA^Mipy3_3pmWM0LTQW{
zrF6<DIHMYI(;~gQPm@DQ&zXOiN6fWbqDvTwLhI=inKmhnuuoF4r(_zL`%GfiB<=j9
zlo7%LstDw?G_~s}WdY1xB$GwessN2ImGmvh>>EqicnI3}rw1u{6I!Y(YaAV<8%=|#
z*C4VUHj0I2Gs@l^T7nGe(6!5BEBv^*?0epC7<bvTmamUaoE=@`$|RbXFUWW{jNxHQ
zQ=bFIzlZtgsH9bNl|Xq3m69$LbTqC5dWh7w^<lI31XeBv16`Yvc)59$W2nq{7$gGb
z-evPJ)VAC)ce$an#s;;P9agptRMwADwPwBzN#;PL5#`cJp+H{1!J>gR!N!R8(Q<Xs
zM*V43#>^&e;D2UQF#xQs%Xtf!o4V<kLfI@cw$pdUf8XMQAlkMAFk$8l2Fp75v)~l;
zlnaY#8Nwy_*lAkPranC~as7-5;W}Vd!nlm870|+~A^2Hx?VaG`gI5IuqEc8(mNkUC
z(nYYzIsZ7jTiJ8$a=lq5BIA;K-+dPcxLI|&RoiFpP-LPmHkXpgwII5NRA(*58i?Y4
zd0F(Uds0q8Sb>Y;WJF7*C>ae7f*cB|byN*QE0>DIsm~7EpxISs(ezC=MA?dGaG*aS
z^b2y~TZ1CiqN2g6NcO56W0xX+|2tobFTML~@qa)1jd)dme&VzLBHnuO&a@y<l87^H
zyeU?CA*G%-pX+Py{Z4%4-CvJC{P4fMvgi0mZ~sbs^2OW5;xKO^8TM^cY&-qN0|XWF
zE)#62?OmKVB0E-z_0UrNU=TjBViNxU{p0u7x~_l(#j`(97ugI^bnw=z`jabeLXcZL
z04k88i4d53aL)TEuC;*ORE}bc;ZNxb7TK3rv((t(PWRPr05-FB5JXIYQlL?xwCdV|
zLiscsc>$b9sd5@QG&{b8zdIDy{lG6?MVqpRD@&MSd2H%tL1t67d=)2W-^lzV483}z
zMrNsu#Z49+p5XO|LgH4`S%Gp1I8DReJVbG22CBP21pFwO4}qPMY>=nHT;WzFSPuV6
zcR<$QlR5hXc-piyZ9l`2Lbf1FJdHauG7PM%*%iztq|LN^V<LIGeC(Y;T8B2(t`&dZ
z0mwW=8nB<nRHA0SY8SATmoIgPaf(ukIJGg9z77bb`)N!7B#>pRRuN|uu7H4O#+}F}
zvAwv?jtCm%4Vkwhd&WeN3~&9yQ=FQkifNGWQ8zeNC2gUyrHys8Z9L5`fChYEfu}IZ
zH#BT0j@5{hV7g-07$Bj|o<q<u7hJ)HiK<<$dI?p_c!eGSEccQUi{z12AFd$pdEExS
zwo2ra1cBD@iDffxR8f!c)_qMCb8jHepL^$v=rm+{6rVz(qwChopcF?ODb)urzZHM^
z@>{XROG6X4)%l~pZKd&136<A-dE?m+#Peq_8f8(Xcp<y1)Smq7UfP7Z_1*2;@&3#A
z0{E!?{jNsXk~2GXp#3@@y!>{&`Qp>@+U5JSR>4dp=}~By0H`m0=QGQ-M-VuJh!6@_
z8jjBe4`#0Z_PhTf{_~&zv*oV-$3O6^@%9^kBVK!WeUVK>D+No9-xEVeSEWOI=c8}L
zm;dzN#FxJPub21nPd@k0<E_^|UwY<_=ltrs|0%xs&40Q4{lE8vKOdj{_+N|5v)4&+
z>=1dVrC%k0bkI_DrQdn^BL3&se<S|KxBu<(KK{YmzZjo<{c|mC?VS3^+y)PYRU<7?
z=9e-`(D4}K2CBb<OO#C#mizzDoaLWJQga4;IOArx#ttgF;8A)0tgcm^0p7-2ZeF5X
zw}q7&%zal;XmQY(jA3K2?lW!DOZDw21jSNOEAI^VZ<cO2yM-|J%*NzT#~xB$1JyR}
z-bddmlF@6Q)DIY`t_UzR6}s`Ho3RJ5DqBsTo_I{8pv}9U7F*$p-zkpXK+(L;Xghw#
zPq|73RiN%dbq$>2T)!|RlH&`lS)_aoO{?|#^eW34kFa7%)@WXHYrBn0P&V0@H3~sx
z@7{m?P|-?v+idJn^_cUT1~%`hrz0rktHG6T-m>@dN8hmNQf{?HiYQI628g_m7K+P5
zKF;)K6x~Frh^i1s6^VAnq6s}E9)p=MVWy}iN7Xp*m{F*G0p+Z4(<5p*7&vJF!bFQ3
zU`d)QQOrbWhmoD&6YB=4QS9b<De1npApIgAYm-7rLz{4>5NEj00GTJ(b8$$QS)6GI
zAGGims4+$mNUj83ogeYYTSn)>Oaw`<&-%82;o`|=^n@$Q+60m~f9h_wWTN8@RUvIy
z`UgA`Y(g$zDk7bvf*}e7?Jl58yQCwy5ISMO)7hXU4Tw-CjE)R2oL&OaS)SIwYP)+M
zDE=^-ArfaI!HK&U7E#s?=WZg(TuygO=gxm78d)tn@r|?`>n>r&09}<Y8jfCr4xUEG
zwm$lAau3HMBwZx8!}4#)^H!+V`f<*X9j?Rr9V_IGk|mWkcU#M&+4aTcjrifWek|U3
z^KXYXvChNtvFD#?1$49R5#Fw4EsB$pri!!@F@to#_59paCZ!=x+>f7|feTppE@RPx
zbG@vEk2vYUiz?sA>>=ndtR!_{Spb?Cro!SXpZ|bo@$u)MydKT;z6_Lk0Nv*0YGS(6
zHT|Ur-@!@B*?fAX+?Z2Hu4NOgfD=~^Dei~B8dJcUwEK-3HVo)E^8%0mX0)A4r+_4M
zGS*y#%A&}TB2yP54iU>hO*vA9O)Rm}7^x+PaMWs-M3zbIOhOJEz%d<In|AJ`0}^9c
z>iXU}K(wP1Sd$%)dXf&E9!%sct+adh^|{1snzrBF-|yUBRag>DBG^fGBoEdj(YDu<
zT>+|8j05OtL{zrkd9<x<gao3|up#jTmPQRKk~|K&w5G_?K|_md5o>{-M{RpED}=i{
zFe!^j3&`%Kky)LH#w&|1AKKhoaK_PSCv<xMCan{m+p`iHL(`y~KoH!G$HrNtXl5wc
zxOO#w#AyUQVll-h*(y}n7p67X?YpyJBxC3RwDx}IQ<6TUtHep5nJA@jk;5tQyP+eL
z9c_6>#19IZ08NY}yn(D)z-+eMTf9iFWwvg0AAJAhA+!%Jh^x<4Gj=&H_g+i8vFuB@
z^9Cz@8s~~zlUBWcAp?;c-23cH*>KHdA7m9&0>%>FNzW3{AgY|!?_7Z6P+xp*-l4WR
z%deq$0H4x4mj)hXT&6JR9?X@f-!X`iJI^lKrKsf%696<8=@A&fnnyrGsUl1VsIF5b
ztb|eX$O^;_?$YSMHaUGL?q5W`4hz8OSkT;|RvaO962)nn94zbOaVlsO!AnKbg2C?9
zXFSRkO^{}47XIj4Ux*+5)E7idk+1#7?|n7?>mUBB_~Q?MD_+%~zyJ0x#G9{wwm~Yi
z2_&hAlqS#Tt!6HJHyYQjL!(S3J364H{<jk&yk`aaR`e)EovJ0+bt0oi%y(S?nhn<I
z0jCF>=b!U?{j-{nBv@^l&{Q@8RN*pm{S3!Tgbje+>&S^}o|SX3D|b9%O^}rsvFhHf
za%;FzO}vjqbZH>#>=*E9Ei?HfTObz|1esIBvUv;ioqHkW5X<oB;Ww`J{US<`8qHo$
z5)l|qB5<1e(PXXE?`ulP6S4ce`|O`gt|L?@220sWapj5rtcpit*anWqmMhC|H27Ly
zz_9K`)KeHi>N8e4fw&V6okHMZGp-4&cAiRv%-WUIpGTZR^HD~@cHKAK;AlLd8(=>;
z=9CFtpB81;07_FR)w1u5HdTXRxPT}c{#8Raie%aOg`bnbjvGmhMxj0$hDRJJWIF<_
zFqm%dM9G^?Zx^f*+Kj7wQX4?|U1@lg!;?0<z}#k5ES9m52PPz35h9l=#{x4yU%PfS
zZ@^SI@?P^rH&%6Jk8WFl6l?)Pb4x+{wx|%{6Gj0x0Mpe~SZ6RixU)@;GURjq-z9he
zMADS80khVK`+GBOT3;wiU!!@mf;K=wy(1n|%!9fXWG5|KbBqy5KS?04H5N`Wk+zr9
zM(v>)k<)GC%alNmI%$K!iJQew++X?B6i~G8uo~(BLDnK{#Qk`yd9Ij~D2Q1%BDPCD
z6A_<!@lO1$&-{37@lPkPL?R8~7P$mz5FD;9g$NT-^$ecnCI09yekb1h?w|EVq>Om`
z6MsEkzkG84>_%xUyVSMIZYT@T_OAYgJHZgAt0?LMQgm~(#1@!i9zz78nn|7^r}{(?
zm>qo^RSeUndSymDfA+C>{_JDaq0^4bs-nz^c8q*B)ztSt`t$ha`+pF>`>kJJKF6oO
z??>We7t6}v!?=RR$8|AV?noe-@$MD~rsdkjcb}p$>uA`S%2XfL){u?WoPPyYZ{8>$
zb(P22jLEZk_J%dodP103<t(uEQ(18*`MViZamK<>u#K$C?34!Q2EU+_YB!Iub$UTu
z)5&uy--{p`CENfHp?w7vq;4Q)_kt^AHx|z{Buvs>)cKI&n-%HQ6mtxZL>9AOX9b-D
z910M$kFqNpuL{hMzRtsPJ|xYSt)opF-fP#Mg%d@XCdywEnpqbxCsfI*+eepgZr09y
zXA7)?q9!Zgh&fXUtyy~WyYX~PL|916ilWK6h<4~Zr|IDw>guE+)NVMc;9f>YNtr>@
z{Sr&X9VU2-bAOCRUIsQd`hw6MTeSgEN4lQ5g}e`D>Ev;JVJambrP;KZOSVM#=EH6#
z(s^nnX_EWCH5p5}A?`udKm~o$Mvc2UlvP{}RqV0=4tuOyW(6;?ULIHdlBwA;PW3(`
zXiIM&XX0t?ph=gIfxA8r_}1A{Z&PV#2F(jNWd*qS)6G;|ptpPv7c_dgV%1?>!L0M{
zakd;_{e2P?@o)!nzNKDIGOralIRgZB<&|wGzJ$o-mPPX^=BY(AA2!*)><(Q7Pm??K
z92+)jh~?7#oc+9-2FKsKbY>z-vQW8v5gCsGNc;3FdV)1;{G>NH^fP@POX+~icLLIf
zD4VUIY@tK1kQF|UO5bR)22=VxTU~X1;vV$LIZoH(9UdGh600`a4MI4K!7A-UiB2Sf
zCHfv3<LHAyM)5)VLr2@wj9*Stx+o8GPO;1)M)RAfQ^zY^ZN>6!!rmcQf2`?tE~SN2
z<Dy9N>a1l~Pn~yoi5s4n--=8E9|6lbR*+Io>d2HdT(Jy|id1up6up1sX<CY8GDZE%
z!6uWf=aN8X=T~vNSj7|9hDP==Ec+1$DrdEjdnW59ql%&kMo$;}p#EtS^QH3UFp?{V
zg4KP$#q)rfypRP{W*ywFarC-?n~+P+_tdRH6^&&`YbPQ)_@k?iln{$0+wGcJOg_S_
z^BogFGZ_!!X!`wZ)^`!*-9Dg+y0vCB9k5^>iL?02{KT9R>Ro3L`>2G<awV6G$F|>Y
z^e(RX0HFUVaY$C}Jsq|%F#%*Vj?QITj^~kqSC&p^167|X7fZkwySb<CpW}PzdzBGe
zT+*afC4Nkl{C`TKSc>?lAgp%KrkF{uc|$n@B7X)QWp_6ijiSOC)asQYeBpcu5|f4&
zU9#x@&r^7aX2Mcy>D=iu$h**L9pIS^Dj8f4pTz)D2&p4i=>nGjC$}x-S?_BvzRa0M
zf9l$rLl<bBtOxL94jvxm(?xSCo(n)`AWNC4fC|^Z%{z~9Pg5>GwVtqP<sofm(t<zW
zVgup!-@nY+ySgBgC&(s>r+NexOwI*glI1VPw)X5sEpsNNWc^f)yUvK#Y%7s9Oz<hg
z24BNfBcTi@kBp_?fxJUPsoIZF2rHe@sG?I_R&uZFJ6^acfi?Mfm+Fuu2%<a9_nB%i
zdVs<?e|ZBkMwPF}V=1D|%)|5-2ht>JnlaE#L21U~-jZu6EA+@VyDsB^)!f0F$806`
zXT5M(l3^p#V1fdPX3^tZ;F1lWH&Z8e8)Z4NS;(ZU;E`Iyh>kuuEzAG@#(#+~zq=Ni
z{5zlinfUY@KN6RR7d6j^Z!Vjj+K4yiViG1!+ta3O&NT``2z67>4R_Io&}jPP6d=hY
zSvQ@?a3|Z^Cl$kpjWP4mf&_azn2{Y9r0)A$AZ?ueQD(+j5XL>$bO6bzR#<-Svz9?>
zBRDTq6)x&wroI4fMG8Nt8Yq#7CT6U#t<a`r0H-v9LKMAZd!eruDj-8IYiAX2k2L*h
zCY!U4JR3#iqFTDYfi3DdxKV07dM?ns$c!=r@T?06G)^!T$0#Fm_xE`@#*Ga>pNlD$
zXm((pR@bpI>Sp-)5l3(lW~;PqpOg_dhEv|C1JthBI1OkO0ZVaVQODx?tU`;z3t8h4
zQGg12#!vv+nAj3%2Tg>uhr4`?v43>PV%`a8)=SURM3^Kxr+C#t2Ys<48sPPOi?|Rk
z9;tL9YUI$0BENr_Q&+{6PUzurj!aw3qnX62GX^?s1q6=1fT#%Ak!B?c52s3D<|7uJ
z#g+X@9U=3cJ;XNLQAeuElYt-uB-(fXn35uvYCY2JU{yqw(~m}u_Yr*-2MWqDfXMxt
zTnvMF=7TR`08oaNGbMlB+M&j0w0X4nVpF<`P-B;MI1<sRnxB_^4QX@7DV=~7ovjqa
zNQ_w|a+?8<yjjl10Lcz8>y&qa>tU_)sny9#rlNX0tzxQh&dO6Rs$X}x09@rrQ_-e>
zyZUG5n$Zf6S2E9^Ug{Cp@Hq3!n<k6sG*wVp6$}l|!I%mb=;Dn)v~&Y?ctdL6;3z*I
zhy161=-*>7SDBSUIU~@|(>pHmwfDXfU;p6usu1G7%inzcbMeOIt$4_1D_TVJ*xSus
zK);uVhv)Il_x~Wi_1!;Nk}p30=HHBuKmSztNcST}`rxC#h!0-AKQ{RmCeLDm*D{|6
zjbIZuv1F8K<&^=1cz*eKyxhJUFSid%S^l`@YtO$wF3(<*wy(@?L!fdeQ$eo$sUP}x
zMJ5ZYkt;0>QQMe&A-?vV{~llc#(#`I`tXbKs{Z`Lw|_Z4@#3=$e&JHA9e9NWUdPh}
z5P$aG|BB!J`ftXce)!w3>^c7K=YKZ7|Mkz5NQcMWt{PBO9u8V`ib}#o<gOJ=h}@7a
zkIF1>p+_#Nq0y*$O!MCN^am~KHiIU#qzRB+oxyL_;LRr;9ofxd3{_GSixQ%q3Q&DV
zFnC$v000WZNkl<ZGANgq+OET+r9$S>YspuYI4X)2E`0dJUA3j<Cank(u^1XPg%i6i
z(v5_9f^Dqe*%6k*%F2y!rS>Z1vi5+Z7}P0GMwzaS5q-Mwy9{3L3M)@^Zi?U(1(a>?
z+<3mNm9HOriqfZ7KROPk1C%zy5K7MrP;n9kFkTm>1PY!eCX<MgZB%M9uasI0(Jhz{
ze#()n(F~3Z@6ruvX=8_{zP2KxPvHi1Ow&f2&L*8Wb_2~2CTV3goa;~uJtj-~0HjtX
zg<(x|2g2SV^ZOLTHiw^|mTSY*$ng{nx1eMLX|j}hpCAI*-S1#)!*mVMXb7!F&UdaQ
z2NdibvBpZ_dG$6i431@6335ZmQ_Kx61}Z~)3&Z9OhBbtC^0&=|G(64iYk>#U2MO2w
zwMivuV4h`l>5w)+gb)EKbShV!K*6Kh4eTI{I`eUSo$uWRT<>ceG(nmtl(C#oT40nS
z>;H5^uuCN`m6IsJU#U2TA%82payE<PPyX<)L5;;$2E6FsE$6fasskU;%CD`0lUQct
z!~sAr^9o>rimiI)nrk&g*vj#bF)q(X*27*9md|N<K2gXOb99Q@j89}!gFC9bfRNlH
zX8}hKex&Xc{^5z>Ld&15Fz#$ur^OJvXmkTb&u9%-1j#v$ev2>@r$HS@&TPt8xweo&
zUGKMK4cZ+gP;T}kZMzMZ1?db;@1jlyWqu}>W8mV3oF7+SV@y%M<Z8@27P%!uot$RL
zd>brMDwap7(jQV!7it<Gy?q2So5S=Xi)rF5Du@UzLe07a!o@9TE86kcSk48E?4CQ@
z7EuYXsqiL@UYCE35cyZlAGW4uLNA}vMqIUmBW_K*R%9>dXnCEwM(yP(Wyw0$6lKCU
z!l!sa0+q6t(;HS(MIJJ&e2tr)Kf`EQMbRWn%NTbmWp+?bt=#ErX<lwKk&Wf$XJIX^
z(-{lldS)A&Tr4ol!AI1NPGzH{8x2EO%C=j?F+6b}O#*QN3fN`ozNx_wirM#OAe1@6
z$Sh^+I#)~O-mk+MXfT8YWL!@NDXXI`?A#k7UwMfYjMJS2gQlY?CY8<JOn~99U)q+Y
zk`9IC*p1s*6j%5G(gs7N?QRKvr1c2}=qT)9bb}mRWPP)G0W+UeD8fI-<zLcj4w>Bs
zb7V)Ys;YjQ#Z6d4XOk>0VD0oi&QycQ?S7ZGs?Wid?_KA-d6!RGe9+dYO@~+n?NwCk
zuqY8e@KM{uRJu(ECRKed?*WHyQkfG_T>=(kc9$7OLld8Gm1`&2%ev)SpD{Zm)F!+{
z@N=ove5e(#<^=G#6Ofu!8h(%}ZQ4np>7Hpia+#y&9l)tQajqw{9i~#OgmAy73~YL_
zXqx3NCOH@aE?E-`A?ZP$VT)mS!tt!v^FY~G@OZuo-|FNOLto)MM9^9yRMQEw7BEY@
z*B8Cfge~_B8(21u1EE_JL9wW^nd%6xaxKXUplBMioAhfr06V7S99Pvi5K{u>Jhg6$
zX9~CuzC>GP%soUM+7Nmo{hT{h{YY_-O~UE4+(FmT#g$%~4SCUk&IA)2Sn(P_s<`4x
zPImOLqpMTd9L}We!Sb@~3%T-CqTX)Pxx(3uO4&!sWbvJ7nb>>m%0w?Lg)Kp&^%x*Z
zf!fn#-fU22cD;%|s;)m;4)z44yq?`(hRVc<g&;NbvEml|Xyl82-W|UjpFQCDz7=b@
zEGk;XB#8mi_DgEttm&9bs$)zct#b34yGMCRRUSsT$xz@+kyta&sI>>h?-_JM$z;j|
z5#NN8u4hF`fvZSVLW#*qL77UU&EE4Y0Fb6Gb<l#DXlu@p6fjv4gwoVprE`@fT(p1v
z=wua|VgRcsp_M?=<!d$@rmG@UWlDGuNrlrqif@KnDl&VZ@$o1DJUGZa%zYlHrwU76
zM20-6e4Dk5%W`bpcvH<qt!53|3N9`ofnjAKVd2+T3S1n&RIy74iYWgkfTwGD>~K66
zw%|F5<FG6SV*$~O#W`%yCN1jRU{gpe4q3}{ad57ydC_W~`xJHs8kr8E?_3c`w*_rE
z#Pe67!x`|T03i2tfla0zwZvOS<VsH!ti(-jz}nYKpzGDTh&tmpD|tq7g>EpGcR}3H
zaxYU?%)PoxV1Wpo43?s2vyw>FsuQVEF@?z{WJ>XcZ-^>~vLGJJFs-_D3~K<Sr=w~R
zcoxtt&Pe@+ib&KEdklgIUP7N^@^XnADB-=9_hv*6XH=c0Gf2<^)TI@X+8a2vYMY`)
z${U!>VbQmRYSSDOz%#EkdLdXgZBP=dtb;BMz`{i6lpEkuG<6Q~tXW_o(FHEh6hLfi
zD~!UjCJU6=YXzXKBQ#h)jOW9MCb~2-#2raGI7h}bi*51rlr`I=d6WZ`<mTv+&SXL7
zT(3q+oQzqjAMPAUN&0pTLnU)+*;s4#HL&$T5H&83wv!#4xwhmDt}E2gGNMnXQD3Rm
z6PoflGle3o<Ujv=Vbj#fziQVYX1O#C*S0R%iMDzVUn9MiUhn{wMHgVlK<3iAjVlF=
zmsMhC;Kr0vk1ax*GHy^;f-nyW8guSI6o4ld$Oymwtv{e`18O%cvKE;xJ{vF#?O1(u
zy4<?^TtO*xwhtnSzC2T?zUP-}_KN_rjCMoTAym+;ps<rV22VCLHq>n)Q%0bXKBQkT
zH9c%QhZl7PB5!CR$f|sPkDYR8*3EiBZie@Vs%F^0s4-taM<qqesP&1Xn0S9SC&`sH
zIspo8LOCqNX4Bp3R1hvl>mI=56ePs5#4X;S(d1NjfG?&^93ljfovDvf%U8R+r-#VO
zfC|M?l40gFL~wuB2M$saQSwOduT$nAT0-e$&Y<%5a?dls60a%0Q`59&ki}@aq-Z{`
z_oaGAN2%7PoE@aqWb&mqmtZ_+60VUhmB*x^^n;?zTt-^6VgGg8t@1G_*x-2yN$3El
zo!JDbBM9^)z<K?R{6gO?h$?^5%F50%E{}^tAvCy6P+Dr1s2y5kr%la-kA8v{n@E#>
z$6~T5lob?IAl(WA2~k?>XEgM~ITc*fayimcTAmF|71^Qjl=VGcu;}Mgbt_io(jI|=
z#-Za^n_How4=8?p&2YJ%=1n`0Qc*^YcA=SvkC|(tba_UI&5*dFO3#OoQ!`i@yrJ3E
zkx|q8dkB(>FO@N|>F6JC=BgwP=?nr|0!XxsQ%{4`+$?!>!pXV%CT&|Hxz^NS6wT;c
zautM$^Uy>zm_h+sG$rijmudt**U0e<ZkRc)x3TVGu3()-3qDw~Q{i@26@!iML7|Ur
zjdih!A+=9l=L2T+Wl7!%M-a8_2Tf+&ggijcx>;xd0|lM%E}jh3fetVl7PD!x4vB0v
zh+ud<DuY@mX^V;H*Gy%*<KtDnCJG#lIw8dFfz$46qKo5M9-`@f>9la1czN*HWtI+=
zXUEP@4XJL1Jy@L%0naOIHhd&(8kxdRjpy`Kdd<EsQg{Gb9oy#$qw@Z`ielCrzeHI%
z=QjWyBRWOywg`Q3_0a_+Q^$W^*gR%~Id#>zQZy>lGgI;Up;enpoNEw8qc&4i!iF=5
zQ589}de{xr-`Gs|LUYYIOd@AT4zZ!ZZYZMF;;R!qAe|9PFd?^|JvBUX({3-*9gH$}
ez!cKy>;Dg*S7Vpoy&p6H0000<MNUMnLSTY_huFIS

diff --git a/src/main/resources/assets/osmium/textures/cape/osmium_logo_cape.png b/src/main/resources/assets/osmium/textures/cape/osmium_logo_cape.png
new file mode 100644
index 0000000000000000000000000000000000000000..d7f8411b359ce5dee365ce87acfe89534cb5c53f
GIT binary patch
literal 9725
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
Fe*s=rXyX6?

diff --git a/src/main/resources/assets/osmium/textures/gui/back_button.png b/src/main/resources/assets/osmium/textures/gui/back_button.png
new file mode 100644
index 0000000000000000000000000000000000000000..82a7d81107b839f8eedf297286cbde16d7f115e9
GIT binary patch
literal 638
zc$@)#0)hRBP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV0004nX+uL$Nkc;*
zaB^>EX>4Tx04R}tkv&MmKpe$iQ$;H+4t5Z6$WWauh>8d<QpF-zC~bvS9ZW9$f+h_~
zii@M*T5#}VvFhOBtgC~oAP9bdxVbqgx=4xtOA0MwJUH&hyL*qjcYx5SFxBiD2UN{6
zQt_CW&8><(uLvNF5M~jOn5ieyiy3&1uY36TdKcwc-sk=tAti4zz$X&VG2O6;H;AV<
zEuHf|ahR1Ph4`F!%%BSrKXP4m`HgeYVS#6cjZA8uI7}=SJ6P^uRx(uLDdLEtYLqWz
zT~;`6aaJoe*19KuVKA?)q`6LW7;!8ifh0u8sG*DsEJSJ5NHLM3{g{V;$nhu1C6lWR
zMvetkp+a)};D7MDTeC1Z;U)!RK=+Gne~bV<yFjyU+uz5w-8=#O&%l+|_E#Ig%qQvf
zwiY=8`nQ3L>$WEE0hc?#;FB&Hk|X(P3WWmjen#Jv0|st^zBRYE);>-jfDCoDd;=UD
z0;5IBUiWx+Z)b1+o@w>>1E1G&xh|meQ~&?~24YJ`L;&po<^a;{wWs?4000SaNLh0L
z04^f{04^f|c%?sf00007bV*G`2jvMA4gnlrvcfC?000?uMObu0Z*6U5Zgc=ca%Ew3
zWn>_CX>@2HM@dakSAh-}00010Nkl<ZILl*T7zJ3tizlc46RVbq63rL}ym)fzKPwXl
zNv>r?*Zlk64}zK`WX$0DSkP@I<N|aHm|!NtB!2(<ffwWS0=hSlok?^cBD;ic>0lTD
Y045?qR&<Ol0ssI207*qoM6N<$f<9daD*ylh

diff --git a/src/main/resources/assets/osmium/textures/gui/forward_button.png b/src/main/resources/assets/osmium/textures/gui/forward_button.png
new file mode 100644
index 0000000000000000000000000000000000000000..4f6bb1d0fc2aa5a00e9528b5ca50c2af3a8e2a56
GIT binary patch
literal 651
zc$@)?0(AX}P)<h;3K|Lk000e1NJLTq000mG000mO1^@s7X!Otb0004nX+uL$Nkc;*
zaB^>EX>4Tx04R}tkv&MmKpe$iQ$;H+4t5Z6$WWauh>8d<QpF-zC~bvS9ZW9$f+h_~
zii@M*T5#}VvFhOBtgC~oAP9bdxVbqgx=4xtOA0MwJUH&hyL*qjcYx5SFxBiD2UN{6
zQt_CW&8><(uLvNF5M~jOn5ieyiy3&1uY36TdKcwc-sk=tAti4zz$X&VG2O6;H;AV<
zEuHf|ahR1Ph4`F!%%BSrKXP4m`HgeYVS#6cjZA8uI7}=SJ6P^uRx(uLDdLEtYLqWz
zT~;`6aaJoe*19KuVKA?)q`6LW7;!8ifh0u8sG*DsEJSJ5NHLM3{g{V;$nhu1C6lWR
zMvetkp+a)};D7MDTeC1Z;U)!RK=+Gne~bV<yFjyU+uz5w-8=#O&%l+|_E#Ig%qQvf
zwiY=8`nQ3L>$WEE0hc?#;FB&Hk|X(P3WWmjen#Jv0|st^zBRYE);>-jfDCoDd;=UD
z0;5IBUiWx+Z)b1+o@w>>1E1G&xh|meQ~&?~24YJ`L;&po<^a;{wWs?4000SaNLh0L
z04^f{04^f|c%?sf00007bV*G`2jvMA4goBAYw~~q000?uMObu0Z*6U5Zgc=ca%Ew3
zWn>_CX>@2HM@dakSAh-}0001DNkl<ZILl*TKn8E0UHT8_Frx6t1TUVP`p>|?z`%%X
z{O^B1FjbImKFkCrhM@|OLz)rhEmkHD428l{dW-~37*PN@0U!fLY^e|*U}fT9`2Ft(
lgM^G3BYjg7E-wr`006$@Jl5*$_nQC!002ovPDHLkV1m6d44VJ|

diff --git a/src/main/resources/assets/osmium/textures/gui/gradient.png b/src/main/resources/assets/osmium/textures/gui/gradient.png
new file mode 100644
index 0000000000000000000000000000000000000000..8ae17c10c537560126b8c8c79cb9d7dec731395c
GIT binary patch
literal 21202
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
Eg6x@zy#N3J

